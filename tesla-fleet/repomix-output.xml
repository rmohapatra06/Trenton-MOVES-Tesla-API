This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
clusterSetup/
  agentK3s.sh
  haproxySetup.sh
  installControlPlaneDB.sh
  keepAlived.sh
  launchVM.sh
  multipassItems.txt
  networkInfo.txt
debug-scripts/
  add-shebang-and-chmod.sh
  analyze-oauth-vs-partner.js
  comprehensive-oauth-test.js
  debug-oauth.sh
  revert-to-vehicle-id.sh
  setup-tesla-integration.sh
  test-integration.js
  test-oauth-url.js
  tlskeygen.sh
  update-vehicle-id.sh
scripts/
  authCodeTokenReq
  confirmPublicKey
  confirmRegisteredDomain.sh
  confirmRegisteredKey.sh
  copyPublicKey.sh
  hostPublicKey
  ngrokTunnelRequest.sh
  package.json
  partnerTokenGenerate
  refreshToAccess.sh
  refreshTokenGenerate
  registerEndpoint.sh
  setup-production-certs.sh
  update-callback.js
  update-code.js
  update-tokens.js
  viewTokens.sh
src/
  routes/
    extractToken.ts
    health.ts
    vehicles.ts
  types/
    tesla-api-toolkit.d.ts
  utils/
    tesla.ts
  db.ts
  server.ts
vehicleReq/
  charging/
    charging_history
    charging_invoice
  userEndpoints/
    feature_config
    me
    orders
    region
  vehicleCommands/
    actuate_trunk
    add_charge_schedule
    add_precondition_schedule
    adjust_volume
    auto_conditioning_start
    auto_conditioning_stop
    cancel_software_update
    charge_max_range
    charge_port_door_close
    charge_port_door_open
    charge_standard
    charge_start
    charge_stop
    clear_pin_to_drive_admin
    door_lock
    door_unlock
    erase_user_data
    flash_lights
    guest_mode
    honk_horn
    media_next_fav
    media_next_track
    media_prev_fav
    media_prev_track
    media_toggle_playback
    media_volume_down
    navigation_gps_request
    navigation_request
    navigation_sc_request
    navigation_waypoints_request
    remote_auto_seat_climate_request
    remote_auto_steering_wheel_heat_climate_request
    remote_boombox
    remote_seat_cooler_request
    remote_seat_heater_request
    remote_start_drive
    remote_steering_wheel_heat_level_request
    remote_steering_wheel_heater_request
    remove_charge_schedule
    remove_precondition_schedule
    reset_pin_to_drive_pin
    reset_valet_pin
    schedule_software_update
    set_bioweapon_mode
    set_cabin_overheat_protection
    set_charge_limit
    set_charging_amps
    set_climate_keeper_mode
    set_cop_temp
    set_pin_to_drive
    set_preconditioning_max
    set_scheduled_charging
    set_scheduled_departure
    set_sentry_mode
    set_temps
    set_valet_mode
    set_vehicle_name
    speed_limit_activate
    speed_limit_clear_pin
    speed_limit_clear_pin_admin
    speed_limit_deactivate
    speed_limit_set_limit
    sun_roof_control
    trigger_homelink
    upcoming_calendar_entries
    window_control
  vehicleEndpoints/
    drivers
    drivers_remove
    eligible_subscriptions
    eligible_upgrades
    fleet_status
    fleet_telemetry_config_create
    fleet_telemetry_config_delete
    fleet_telemetry_config_get
    fleet_telemetry_config_jws
    fleet_telemetry_errors
    list
    mobile_enabled
    nearbly_charging_sites
    options
    recent_alerts
    release_notes
    service_data
    share_invites
    share_invites_create
    share_invites_redeem
    share_invites_revoke
    signed_command
    subscriptions
    subscriptions_set
    vehicle
    vehicle_data
    vehicle_subscriptions
    vehicle_subscriptions_set
    wake_up
    warranty_details
  mapsReq.js
.gitignore
directory.php
docker-compose.yml
Dockerfile
nginx.conf
package.json
README.md
telemetry-config.json
tsconfig.json
values.yaml
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="clusterSetup/agentK3s.sh">
multipass exec agent-1 -- sudo bash -lc '
  echo "⏳ Joining worker node to https://10.10.10.100:6443"
  curl -sfL https://get.k3s.io | sh -s - \
    agent \
    --server https://10.10.10.100:6443 \
    --token '"$K3S_TOKEN"'
'
</file>

<file path="clusterSetup/haproxySetup.sh">
sudo tee /etc/haproxy/haproxy.cfg <<EOF
frontend k3s-frontend
    bind *:6443
    mode tcp
    option tcplog
    default_backend k3s-backend

backend k3s-backend
    mode tcp
    option tcp-check
    balance roundrobin
    default-server inter 10s downinter 5s rise 2 fall 3
    server server-1 192.168.64.2:6443 check
    server server-2 192.168.64.3:6443 check
    server server-3 192.168.64.4:6443 check
EOF
</file>

<file path="clusterSetup/installControlPlaneDB.sh">
multipass exec postgres-ha -- bash -c '
  sudo apt-get update -qq
  sudo apt-get install -y postgresql
  sudo -u postgres psql -c "CREATE DATABASE k3s_cluster;"
  sudo -u postgres psql -c "CREATE USER k3s_user WITH ENCRYPTED PASSWORD '\''cmbo**77^!'\'';"
  sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE k3s_cluster TO k3s_user;"
  sudo sed -i "s/#listen_addresses.*/listen_addresses='\''*'\''/" /etc/postgresql/*/main/postgresql.conf
  echo \"host all all 0.0.0.0/0 md5\" | sudo tee -a /etc/postgresql/*/main/pg_hba.conf
  sudo systemctl restart postgresql
'
</file>

<file path="clusterSetup/keepAlived.sh">
sudo tee /etc/keepalived/keepalived.conf <<EOF
global_defs {
    enable_script_security
    script_user root
    max_auto_priority 50
}

vrrp_script chk_haproxy {
    script "/usr/bin/pgrep haproxy"
    interval 2
    weight 2
}
# put your own interface by inspecting your network on VM for proper interface config
vrrp_instance k3s-vip {
    state MASTER
    interface enp0s1
    virtual_router_id 51
    priority 200
    advert_int 1

    authentication {
        auth_type PASS
        auth_pass cmbo77 #keep under 8 char for spec compliance 
    }

    virtual_ipaddress {
        10.10.10.100/24
    }

    track_script {
        chk_haproxy
    }
}
EOF
</file>

<file path="clusterSetup/launchVM.sh">
# Control plane
for n in 1 2 3; do
  multipass launch 22.04 --name server-$n --cpus 2 --memory 2G --disk 10G
done

# Workers
multipass launch 22.04 --name agent-1 --cpus 2 --memory 2G --disk 10G

# Load balancers
for n in 1 2; do
  multipass launch 22.04 --name lb-$n --cpus 1 --memory 512M --disk 5G
done

# External Postgres for the control‑plane datastore
multipass launch 22.04 --name postgres-ha --cpus 1 --memory 1G --disk 5G
</file>

<file path="clusterSetup/multipassItems.txt">
Name                    State             IPv4             Image
agent-1                 Running           192.168.64.5     Ubuntu 22.04 LTS
lb-1                    Running           192.168.64.6     Ubuntu 22.04 LTS
lb-2                    Running           192.168.64.7     Ubuntu 22.04 LTS
postgres-ha             Running           192.168.64.8     Ubuntu 22.04 LTS
server-1                Running           192.168.64.2     Ubuntu 22.04 LTS
server-2                Running           192.168.64.3     Ubuntu 22.04 LTS
server-3                Running           192.168.64.4     Ubuntu 22.04 LTS
</file>

<file path="clusterSetup/networkInfo.txt">
*-network                 
       description: Ethernet controller
       product: Virtio network device
       vendor: Red Hat, Inc.
       physical id: 1
       bus info: pci@0000:00:01.0
       version: 00
       width: 64 bits
       clock: 33MHz
       capabilities: bus_master cap_list rom
       configuration: driver=virtio-pci latency=0
       resources: irq:46 ioport:10c0(size=32) memory:10040000-10043fff memory:10000000-1003ffff
     *-virtio0
          description: Ethernet interface
          physical id: 0
          bus info: virtio@0
          logical name: enp0s1
          serial: 52:54:00:e1:11:de
          capabilities: ethernet physical
          configuration: autonegotiation=off broadcast=yes driver=virtio_net driverversion=1.0.0 ip=192.168.64.6 link=yes multicast=yes
</file>

<file path="debug-scripts/add-shebang-and-chmod.sh">
#!/bin/bash

# Change to the tesla-fleet directory
cd tesla-fleet || exit 1

# Directories to process
DIRS=(
  "vehicleReq/vehicleCommands"
  "vehicleReq/vehicleEndpoints"
  "vehicleReq/userEndpoints"
  "vehicleReq/charging"
)

# Function to process a file
process_file() {
  local file="$1"
  
  # Check if file already has shebang
  if ! head -n1 "$file" | grep -q "^#!"; then
    # Create temp file
    temp_file=$(mktemp)
    echo '#!/usr/bin/env node' > "$temp_file"
    cat "$file" >> "$temp_file"
    mv "$temp_file" "$file"
    echo "Added shebang to $file"
  fi
  
  # Make file executable
  chmod +x "$file"
  echo "Made executable: $file"
}

# Process each directory
for dir in "${DIRS[@]}"; do
  echo "Processing directory: $dir"
  
  # Process all files in directory
  for file in "$dir"/*; do
    if [ -f "$file" ]; then
      process_file "$file"
    fi
  done
done

echo "All files processed!"
</file>

<file path="debug-scripts/analyze-oauth-vs-partner.js">
#!/usr/bin/env node

// Analyze OAuth vs Partner Token Generation
require('dotenv').config({ path: '../fleet.env' });

const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const NGROK_DOMAIN = process.env.NGROK_DOMAIN;

console.log('🔍 OAuth vs Partner Token Analysis');
console.log('==================================');
console.log('');

console.log('📋 Same CLIENT_ID used in both flows:');
console.log(`   CLIENT_ID: ${CLIENT_ID}`);
console.log('');

console.log('🔄 Partner Token Generation (WORKS):');
console.log('   Endpoint: https://auth.tesla.com/oauth2/v3/token');
console.log('   Method: POST');
console.log('   Grant Type: client_credentials');
console.log('   Audience: https://fleet-api.prd.na.vn.cloud.tesla.com');
console.log('   Scope: openid vehicle_device_data vehicle_cmds vehicle_charging_cmds');
console.log('   No redirect_uri needed');
console.log('');

console.log('❌ OAuth Flow (FAILS):');
console.log('   Endpoint: https://auth.tesla.com/oauth2/v3/authorize');
console.log('   Method: GET');
console.log('   Grant Type: authorization_code');
console.log('   Redirect URI: https://major-charmed-parakeet.ngrok-free.app/extractToken');
console.log('   Scope: openid user_data offline_access vehicle_device_data vehicle_cmds vehicle_charging_cmds');
console.log('');

console.log('🔍 Key Differences:');
console.log('');
console.log('1. **Grant Type**:');
console.log('   - Partner: client_credentials (server-to-server)');
console.log('   - OAuth: authorization_code (user authorization)');
console.log('');

console.log('2. **Scope Differences**:');
console.log('   - Partner: openid vehicle_device_data vehicle_cmds vehicle_charging_cmds');
console.log('   - OAuth: openid user_data offline_access vehicle_device_data vehicle_cmds vehicle_charging_cmds');
console.log('   - OAuth has additional scopes: user_data, offline_access');
console.log('');

console.log('3. **Redirect URI**:');
console.log('   - Partner: Not required');
console.log('   - OAuth: Required and must be pre-registered');
console.log('');

console.log('4. **Authentication Flow**:');
console.log('   - Partner: Direct server authentication');
console.log('   - OAuth: User consent flow');
console.log('');

console.log('💡 **Most Likely Causes**:');
console.log('');
console.log('1. **Missing OAuth Scopes**:');
console.log('   Your Tesla app might not be approved for the additional OAuth scopes:');
console.log('   - user_data');
console.log('   - offline_access');
console.log('   Try removing these scopes from the OAuth URL');
console.log('');

console.log('2. **OAuth vs Partner App Configuration**:');
console.log('   Tesla might have separate configurations for:');
console.log('   - Partner API access (what works)');
console.log('   - OAuth user flows (what fails)');
console.log('');

console.log('3. **App Type Mismatch**:');
console.log('   Your app might be configured for:');
console.log('   - Server-to-server communication (partner tokens)');
console.log('   - But not for user OAuth flows');
console.log('');

console.log('🔧 **Solutions to Try**:');
console.log('');
console.log('1. **Try OAuth with partner scopes only**:');
const oauthPartnerScopes = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds&state=user_id=test-user-id`;
console.log(`   ${oauthPartnerScopes}`);
console.log('');

console.log('2. **Check Tesla Developer Portal for OAuth settings**:');
console.log('   - Look for "OAuth Configuration" or "User Authorization" settings');
console.log('   - Check if OAuth flows are enabled for your app');
console.log('   - Verify OAuth scopes are approved');
console.log('');

console.log('3. **Contact Tesla Developer Support**:');
console.log('   - Ask about OAuth vs Partner API configuration differences');
console.log('   - Inquire about required app settings for user OAuth flows');
console.log('');

console.log('4. **Alternative: Use Partner Token Only**:');
console.log('   - If OAuth continues to fail, you might be able to use');
console.log('   - Partner tokens for vehicle commands without user OAuth');
console.log('   - This depends on your specific use case');
</file>

<file path="debug-scripts/comprehensive-oauth-test.js">
#!/usr/bin/env node

// Comprehensive OAuth Test Script
require('dotenv').config({ path: '../fleet.env' });

const CLIENT_ID = process.env.CLIENT_ID;
const NGROK_DOMAIN = process.env.NGROK_DOMAIN;

console.log('🔍 Comprehensive OAuth Test');
console.log('============================');
console.log('');

// Test 1: Basic OAuth URL (what you're currently using)
console.log('1️⃣  Current OAuth URL:');
const currentOauthUrl = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid%20user_data%20offline_access%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds&state=user_id=test-user-id`;
console.log(currentOauthUrl);
console.log('');

// Test 2: Alternative OAuth URL (without state parameter)
console.log('2️⃣  OAuth URL without state parameter:');
const oauthUrlNoState = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid%20user_data%20offline_access%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds`;
console.log(oauthUrlNoState);
console.log('');

// Test 3: OAuth URL with different scope format
console.log('3️⃣  OAuth URL with different scope format:');
const oauthUrlAltScope = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid+user_data+offline_access+vehicle_device_data+vehicle_cmds+vehicle_charging_cmds&state=user_id=test-user-id`;
console.log(oauthUrlAltScope);
console.log('');

// Test 4: OAuth URL with minimal scope
console.log('4️⃣  OAuth URL with minimal scope:');
const oauthUrlMinimalScope = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid%20vehicle_device_data%20vehicle_cmds&state=user_id=test-user-id`;
console.log(oauthUrlMinimalScope);
console.log('');

// Test 5: OAuth URL with different redirect URI format
console.log('5️⃣  OAuth URL with different redirect URI:');
const oauthUrlAltRedirect = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${encodeURIComponent(`https://${NGROK_DOMAIN}/extractToken`)}&scope=openid%20user_data%20offline_access%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds&state=user_id=test-user-id`;
console.log(oauthUrlAltRedirect);
console.log('');

// Test 6: Check if there are any special characters in the client ID
console.log('6️⃣  Client ID Analysis:');
console.log(`   Raw CLIENT_ID: ${CLIENT_ID}`);
console.log(`   Length: ${CLIENT_ID.length}`);
console.log(`   Contains special chars: ${/[^a-zA-Z0-9-]/.test(CLIENT_ID)}`);
console.log(`   Format check: ${/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(CLIENT_ID) ? 'Valid UUID format' : 'Not UUID format'}`);
console.log('');

// Test 7: Check ngrok domain format
console.log('7️⃣  Ngrok Domain Analysis:');
console.log(`   Raw NGROK_DOMAIN: ${NGROK_DOMAIN}`);
console.log(`   Length: ${NGROK_DOMAIN.length}`);
console.log(`   Contains ngrok-free.app: ${NGROK_DOMAIN.includes('ngrok-free.app')}`);
console.log(`   Starts with https://: ${NGROK_DOMAIN.startsWith('https://')}`);
console.log('');

// Test 8: Alternative OAuth endpoints to try
console.log('8️⃣  Alternative OAuth Endpoints:');
console.log('   Standard: https://auth.tesla.com/oauth2/v3/authorize');
console.log('   Alternative 1: https://auth.tesla.com/oauth2/authorize');
console.log('   Alternative 2: https://auth.tesla.com/oauth2/v2/authorize');
console.log('');

// Test 9: Different response_type values
console.log('9️⃣  Different response_type values to try:');
console.log('   Current: response_type=code');
console.log('   Alternative: response_type=token');
console.log('');

console.log('🔧 Additional Troubleshooting Steps:');
console.log('');
console.log('1. **Try different browsers**: Chrome, Firefox, Safari, Edge');
console.log('2. **Clear browser cache and cookies**');
console.log('3. **Try incognito/private browsing mode**');
console.log('4. **Check if your Tesla account has Fleet API access**');
console.log('5. **Verify your Tesla app is in the correct environment (dev/prod)**');
console.log('6. **Check if there are any IP restrictions on your Tesla app**');
console.log('7. **Try the OAuth URL from a different network/location**');
console.log('8. **Check Tesla developer portal for any error messages or warnings**');
console.log('9. **Verify your Tesla account email matches the one in your developer portal**');
console.log('10. **Try creating a new Tesla app in the developer portal**');
console.log('');
console.log('💡 **Most Likely Issues**:');
console.log('   - Tesla app environment mismatch (dev vs prod)');
console.log('   - IP restrictions on your Tesla app');
console.log('   - Tesla account not approved for Fleet API');
console.log('   - Browser cache/cookie issues');
console.log('   - Network/firewall blocking Tesla OAuth');
</file>

<file path="debug-scripts/debug-oauth.sh">
#!/usr/bin/env bash
set -euo pipefail

# Tesla OAuth Debug Script
# This script helps diagnose OAuth "unauthorized_client" errors

echo "🔍 Tesla OAuth Debug Script"
echo "============================"

# --- load secrets ---
ENV_FILE="$(dirname "$0")/../fleet.env"
if [[ -f $ENV_FILE ]]; then
  echo "✅ Loading environment variables from: $ENV_FILE"
  set -a
  source "$ENV_FILE"
  set +a
else
  echo "❌ Env file not found: $ENV_FILE" >&2
  exit 1
fi

echo ""
echo "📋 Current Configuration:"
echo "   CLIENT_ID: $CLIENT_ID"
echo "   NGROK_DOMAIN: $NGROK_DOMAIN"
echo "   REDIRECT_URI: https://${NGROK_DOMAIN}/extractToken"
echo ""

# Test 1: Check if server is running
echo "1️⃣  Checking server status..."
if curl -s http://localhost:3000/health > /dev/null 2>&1; then
  echo "✅ Server is running on localhost:3000"
else
  echo "❌ Server is not running"
  echo "   Please start the server: cd tesla-fleet && npm start"
  exit 1
fi

# Test 2: Check if ngrok domain is accessible
echo ""
echo "2️⃣  Checking ngrok domain accessibility..."
if curl -s "https://${NGROK_DOMAIN}/health" > /dev/null 2>&1; then
  echo "✅ Ngrok domain is accessible: https://${NGROK_DOMAIN}"
else
  echo "❌ Ngrok domain is not accessible: https://${NGROK_DOMAIN}"
  echo "   Please check if ngrok is running: ngrok http 3000"
  exit 1
fi

# Test 3: Test partner token generation (this should work even if OAuth doesn't)
echo ""
echo "3️⃣  Testing partner token generation..."
TOKEN_RESPONSE=$(curl -s --request POST \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data-urlencode 'grant_type=client_credentials' \
  --data-urlencode "client_id=$CLIENT_ID" \
  --data-urlencode "client_secret=$CLIENT_SECRET" \
  --data-urlencode 'scope=openid vehicle_device_data vehicle_cmds vehicle_charging_cmds' \
  --data-urlencode "audience=https://fleet-api.prd.na.vn.cloud.tesla.com" \
  'https://auth.tesla.com/oauth2/v3/token')

if echo "$TOKEN_RESPONSE" | grep -q "access_token"; then
  echo "✅ Partner token generation successful"
  echo "   This confirms your CLIENT_ID and CLIENT_SECRET are valid"
else
  echo "❌ Partner token generation failed"
  echo "   Response: $TOKEN_RESPONSE"
  echo "   This suggests your CLIENT_ID or CLIENT_SECRET may be incorrect"
  exit 1
fi

# Test 4: Generate and display the exact OAuth URL
echo ""
echo "4️⃣  Generated OAuth URL:"
OAUTH_URL="https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid%20user_data%20offline_access%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds&state=user_id=test-user-id"
echo "   $OAUTH_URL"
echo ""

# Test 5: Check if extractToken endpoint is accessible
echo "5️⃣  Testing extractToken endpoint accessibility..."
if curl -s "https://${NGROK_DOMAIN}/extractToken" > /dev/null 2>&1; then
  echo "✅ extractToken endpoint is accessible"
else
  echo "❌ extractToken endpoint is not accessible"
  echo "   This could be causing the OAuth redirect to fail"
fi

echo ""
echo "🔧 Troubleshooting Steps:"
echo ""
echo "1. **Check Tesla Developer Portal Configuration:**"
echo "   - Go to: https://developer.tesla.com/"
echo "   - Find your app and check 'Allowed Redirect URIs'"
echo "   - Make sure it includes: https://${NGROK_DOMAIN}/extractToken"
echo "   - The URI must match EXACTLY (including /extractToken)"
echo ""
echo "2. **Verify App Status:**"
echo "   - Check if your app is approved for Fleet API access"
echo "   - Ensure your app is active and not suspended"
echo ""
echo "3. **Check Client ID:**"
echo "   - Verify the CLIENT_ID in fleet.env matches your Tesla developer portal"
echo "   - Make sure you're using the correct app's credentials"
echo ""
echo "4. **Common Issues:**"
echo "   - Missing /extractToken in redirect URI"
echo "   - Wrong ngrok domain in developer portal"
echo "   - App not approved for Fleet API"
echo "   - Using wrong client credentials"
echo ""
echo "5. **Test with Different Redirect URI:**"
echo "   Try adding this to your Tesla developer portal:"
echo "   https://${NGROK_DOMAIN}/extractToken"
echo ""
echo "6. **Alternative Test:**"
echo "   Try the OAuth URL in an incognito/private browser window"
echo "   Sometimes browser cache can cause issues"
</file>

<file path="debug-scripts/revert-to-vehicle-id.sh">
#!/bin/bash

# Function to process a file
process_file() {
    local file="$1"
    # Replace the variable name but keep the environment variable name
    sed -i '' 's/const vin = process\.env\.VIN/const vin = process.env.TESLA_VEHICLE_ID/' "$file"
    sed -i '' 's/${process\.env\.VIN}/${process.env.TESLA_VEHICLE_ID}/g' "$file"
    sed -i '' 's/env\.VIN/env.TESLA_VEHICLE_ID/g' "$file"
    echo "Reverted $file"
}

# Process all files in vehicleCommands
for file in vehicleReq/vehicleCommands/*; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done

# Process all files in vehicleEndpoints
for file in vehicleReq/vehicleEndpoints/*; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done

# Process all files in charging
for file in vehicleReq/charging/*; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done

# Process mapsReq.js separately
process_file "vehicleReq/mapsReq.js"

echo "All files have been reverted to use TESLA_VEHICLE_ID instead of VIN"
</file>

<file path="debug-scripts/setup-tesla-integration.sh">
#!/usr/bin/env bash
set -euo pipefail

# Tesla Fleet API Third-Party OAuth Setup Script
# This script helps you set up and test the third-party (ownerapi) OAuth flow

echo "🚗 Tesla Fleet API Third-Party OAuth Setup"
echo "==========================================="

# --- load secrets ---
ENV_FILE="$(dirname "$0")/../fleet.env"
if [[ -f $ENV_FILE ]]; then
  echo "✅ Loading environment variables from: $ENV_FILE"
  set -a
  source "$ENV_FILE"
  set +a
else
  echo "❌ Env file not found: $ENV_FILE" >&2
  exit 1
fi

# Check required variables
if [[ -z "${NGROK_DOMAIN:-}" ]]; then
  echo "❌ NGROK_DOMAIN is not set" >&2
  exit 1
fi

echo "✅ Environment variables loaded successfully"
echo "   NGROK_DOMAIN: $NGROK_DOMAIN"
echo ""

# Step 1: Check if server is running
echo "1️⃣  Checking if server is running..."
if curl -s http://localhost:3000/health > /dev/null 2>&1; then
  echo "✅ Server is running on localhost:3000"
else
  echo "❌ Server is not running. Please start the server first:"
  echo "   cd tesla-fleet && npm start"
  exit 1
fi

# Step 2: Check if ngrok domain is accessible
echo ""
echo "2️⃣  Checking ngrok domain accessibility..."
if curl -s "https://${NGROK_DOMAIN}/health" > /dev/null 2>&1; then
  echo "✅ Ngrok domain is accessible: https://${NGROK_DOMAIN}"
else
  echo "❌ Ngrok domain is not accessible: https://${NGROK_DOMAIN}"
  echo "   Please check if ngrok is running: ngrok http 3000"
  exit 1
fi

# Step 2.5: Check if the Client ID has been imported correctly
echo "2.5️⃣  Checking if the Client ID has been imported correctly..."
echo "   Client ID: $CLIENT_ID"

# Step 3: Remind user to register redirect URI
echo ""
echo "3️⃣  Register your redirect URI in the Tesla developer portal:"
echo "   https://${NGROK_DOMAIN}/extractToken"
echo "   (Go to your Tesla developer portal and add this as an allowed redirect URI)"
echo ""

# Step 4: Generate and display the OAuth URL for third-party flow
echo "4️⃣  Generated OAuth URL (Third-Party):"
RAND_STATE=$(openssl rand -hex 32)
OAUTH_URL="https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/authorize?&client_id=${CLIENT_ID}&locale=en-US&prompt=login&redirect_uri=https%3A%2F%2F${NGROK_DOMAIN}%2FextractToken&response_type=code&scope=openid%20vehicle_device_data%20offline_access%20vehicle_cmds%20vehicle_location%20user_data&state=${RAND_STATE}"
echo "   $OAUTH_URL"
echo ""
echo "   1. Open this URL in your browser"
echo "   2. Log in and consent"
echo "   3. Tesla will redirect to /extractToken with a code parameter"
echo "   4. Your backend will exchange the code for tokens (handled automatically)"
echo ""
echo "🎉 Setup completed for Tesla third-party OAuth!"
echo ""
echo "📋 Next Steps:"
echo "- Use the access token returned from /extractToken to call the Fleet API"
echo "- See README.md for more details"
echo ""
</file>

<file path="debug-scripts/test-integration.js">
#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Load environment variables
require('dotenv').config({ path: '../fleet.env' });

const NGROK_DOMAIN = process.env.NGROK_DOMAIN;
const CLIENT_ID = process.env.CLIENT_ID;
const CLIENT_SECRET = process.env.CLIENT_SECRET;
const ACCESS_TOKEN = process.env.ACCESS_TOKEN;

console.log('🚗 Tesla Fleet API Integration Test\n');

// Test 1: Check if server is running
console.log('1️⃣  Testing server health...');
try {
  const healthResponse = execSync(`curl -s http://localhost:3000/health`, { encoding: 'utf8' });
  console.log('✅ Server is running:', healthResponse.trim());
} catch (error) {
  console.log('❌ Server is not running. Please start the server first.');
  process.exit(1);
}

// Test 2: Verify key files exist
console.log('\n2️⃣  Verifying key files...');
const privateKeyPath = path.join(__dirname, 'keys', 'private-key.pem');
const publicKeyPath = path.join(__dirname, 'public', '.well-known', 'appspecific', 'com.tesla.3p.public-key.pem');

if (fs.existsSync(privateKeyPath)) {
  console.log('✅ Private key found:', privateKeyPath);
} else {
  console.log('❌ Private key not found:', privateKeyPath);
}

if (fs.existsSync(publicKeyPath)) {
  console.log('✅ Public key found:', publicKeyPath);
} else {
  console.log('❌ Public key not found:', publicKeyPath);
}

// Test 3: Test key verification endpoint
console.log('\n3️⃣  Testing key verification endpoint...');
try {
  const keyVerifyResponse = execSync(`curl -s https://${NGROK_DOMAIN}/user/vehicles/verify-keys`, { encoding: 'utf8' });
  const keyVerifyData = JSON.parse(keyVerifyResponse);
  console.log('✅ Key verification:', keyVerifyData);
} catch (error) {
  console.log('❌ Key verification failed:', error.message);
}

// Test 4: Test user registration (Step 7)
console.log('\n4️⃣  Testing user registration...');
try {
  const registerResponse = execSync(`curl -s -X POST https://${NGROK_DOMAIN}/user/auth/register \
    -H "Content-Type: application/json" \
    -d '{"email": "rishabh.mohapatra@gmail.com", "password": "Tbf14&*7pr!7=^"}'`, { encoding: 'utf8' });
  
  const registerData = JSON.parse(registerResponse);
  console.log('✅ User registered successfully:', registerData);
  
  if (registerData.user_id) {
    console.log(`📝 User ID: ${registerData.user_id}`);
    console.log(`📝 Save this user_id for the next steps!`);
  }
} catch (error) {
  console.log('❌ User registration failed:', error.message);
}

// Test 5: Test OAuth URL generation (Step 9)
console.log('\n5️⃣  Generating OAuth URL...');
if (process.argv.includes('--user-id')) {
  const userId = process.argv[process.argv.indexOf('--user-id') + 1];
  const oauthUrl = `https://auth.tesla.com/oauth2/v3/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&scope=openid%20user_data%20offline_access%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds&state=user_id=${userId}`;
  console.log('🔗 OAuth URL:', oauthUrl);
  console.log('📝 Open this URL in your browser to complete OAuth flow');
} else {
  console.log('⚠️  Run with --user-id <YOUR_USER_ID> to generate OAuth URL');
}

// Test 6: Test vehicle pairing URL (Step 6)
console.log('\n6️⃣  Vehicle pairing URL...');
const pairingUrl = `https://tesla.com/_ak/${NGROK_DOMAIN}`;
console.log('🔗 Vehicle pairing URL:', pairingUrl);
console.log('📝 Open this URL on the same device as your Tesla mobile app');

// Test 7: Test getVehicles endpoint (Step 10)
console.log('\n7️⃣  Testing getVehicles endpoint...');
if (process.argv.includes('--user-id')) {
  const userId = process.argv[process.argv.indexOf('--user-id') + 1];
  try {
    const vehiclesResponse = execSync(`curl -s https://${NGROK_DOMAIN}/user/vehicles/getVehicles/${userId}`, { encoding: 'utf8' });
    const vehiclesData = JSON.parse(vehiclesResponse);
    console.log('✅ Vehicles retrieved:', vehiclesData);
  } catch (error) {
    console.log('❌ Failed to get vehicles:', error.message);
  }
} else {
  console.log('⚠️  Run with --user-id <YOUR_USER_ID> to test getVehicles');
}

// Test 8: Test honk horn endpoint
console.log('\n8️⃣  Testing honk horn endpoint...');
if (process.argv.includes('--user-id') && process.argv.includes('--vin')) {
  const userId = process.argv[process.argv.indexOf('--user-id') + 1];
  const vin = process.argv[process.argv.indexOf('--vin') + 1];
  try {
    const honkResponse = execSync(`curl -s -X POST https://${NGROK_DOMAIN}/user/vehicles/honkHorn \
      -H "Content-Type: application/json" \
      -d '{"user_id": "${userId}", "vin": "${vin}"}'`, { encoding: 'utf8' });
    const honkData = JSON.parse(honkResponse);
    console.log('✅ Honk horn response:', honkData);
  } catch (error) {
    console.log('❌ Failed to honk horn:', error.message);
  }
} else {
  console.log('⚠️  Run with --user-id <YOUR_USER_ID> --vin <YOUR_VIN> to test honk horn');
}

console.log('\n📋 Summary:');
console.log('• Make sure your server is running on localhost:3000');
console.log('• Make sure ngrok is running and pointing to localhost:3000');
console.log('• Verify your key files are in the correct locations');
console.log('• Update your Tesla developer portal with the ngrok domain');
console.log('• Complete the OAuth flow to get user-specific tokens');
console.log('• Pair your vehicle key using the pairing URL');
console.log('• Test vehicle commands with your user_id and VIN');

console.log('\n🔧 Usage examples:');
console.log('node test-integration.js --user-id <YOUR_USER_ID>');
console.log('node test-integration.js --user-id <YOUR_USER_ID> --vin <YOUR_VIN>');
</file>

<file path="debug-scripts/test-oauth-url.js">
#!/usr/bin/env node

// Test OAuth URL Generation for Tesla Fleet API (official client_id)
require('dotenv').config({ path: '../fleet.env' });

const CLIENT_ID = process.env.CLIENT_ID;
const NGROK_DOMAIN = process.env.NGROK_DOMAIN;

console.log('🔍 OAuth URL Test (Official Tesla Fleet API)');
console.log('=================');
console.log('');
console.log('📋 Configuration:');
console.log(`   CLIENT_ID: ${CLIENT_ID}`);
console.log(`   NGROK_DOMAIN: ${NGROK_DOMAIN}`);
console.log('');

// Generate the exact OAuth URL for official flow
const oauthUrl = `https://auth.tesla.com/oauth2/v3/authorize?client_id=${CLIENT_ID}&redirect_uri=https://${NGROK_DOMAIN}/extractToken&response_type=code&scope=openid%20user_data%20offline_access%20vehicle_device_data%20vehicle_cmds%20vehicle_charging_cmds&state=test`;

console.log('🔗 Generated OAuth URL:');
console.log(oauthUrl);
console.log('');

// Break down the URL components
console.log('📝 URL Components:');
console.log(`   Base URL: https://auth.tesla.com/oauth2/v3/authorize`);
console.log(`   response_type: code`);
console.log(`   client_id: ${CLIENT_ID}`);
console.log(`   redirect_uri: https://${NGROK_DOMAIN}/extractToken`);
console.log(`   scope: openid user_data offline_access vehicle_device_data vehicle_cmds vehicle_charging_cmds`);
console.log(`   state: test`);
console.log('');

console.log('🔧 Troubleshooting Checklist:');
console.log('');
console.log('1. ✅ Register your redirect_uri in the Tesla developer portal');
console.log('2. ✅ Use your official client_id for OAuth');
console.log('3. ✅ Use scopes: openid email offline_access');
console.log('4. ✅ Try the URL in an incognito browser window');
console.log('');
console.log('💡 This is the official Tesla Fleet API OAuth flow.');
</file>

<file path="debug-scripts/tlskeygen.sh">
openssl req -x509 -nodes -newkey ec \
    -pkeyopt ec_paramgen_curve:secp384r1 \
    -pkeyopt ec_param_enc:named_curve  \
    -subj '/CN=localhost' \
    -keyout config/tls-key.pem -out config/tls-cert.pem -sha256 -days 3650 \
    -addext "extendedKeyUsage = serverAuth" \
    -addext "keyUsage = digitalSignature, keyCertSign, keyAgreement"
</file>

<file path="debug-scripts/update-vehicle-id.sh">
#!/bin/bash

# Function to process a file
process_file() {
    local file="$1"
    # Replace the variable name but keep the environment variable name
    sed -i '' 's/const vin = process\.env\.TESLA_VEHICLE_ID/const vin = process.env.VIN/' "$file"
    sed -i '' 's/${process\.env\.TESLA_VEHICLE_ID}/${process.env.VIN}/g' "$file"
    sed -i '' 's/env\.TESLA_VEHICLE_ID/env.VIN/g' "$file"
    echo "Updated $file"
}

# Process all files in vehicleCommands
for file in vehicleReq/vehicleCommands/*; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done

# Process all files in vehicleEndpoints
for file in vehicleReq/vehicleEndpoints/*; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done

# Process all files in charging
for file in vehicleReq/charging/*; do
    if [ -f "$file" ]; then
        process_file "$file"
    fi
done

# Process mapsReq.js separately
process_file "vehicleReq/mapsReq.js"

echo "All files have been updated to use VIN instead of TESLA_VEHICLE_ID"
</file>

<file path="scripts/authCodeTokenReq">
#!/usr/bin/env bash
set -euo pipefail

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

# Authorization code token request
TOKEN_RESPONSE=$(curl --silent --request POST \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data-urlencode 'grant_type=authorization_code' \
  --data-urlencode "client_id=${CLIENT_ID}" \
  --data-urlencode "client_secret=${CLIENT_SECRET}" \
  --data-urlencode "code=${CODE}" \
  --data-urlencode "audience=${AUDIENCE}" \
  --data-urlencode "redirect_uri=${CALLBACK}" \
  'https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token')

echo "$TOKEN_RESPONSE"  # print the response for reference

# Extract tokens using jq
TP_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
REFRESH_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.refresh_token')

if [[ -z "$TP_TOKEN" || "$TP_TOKEN" == "null" ]]; then
  echo "❌ No access_token found in response."
  exit 1
fi

if [[ -z "$REFRESH_TOKEN" || "$REFRESH_TOKEN" == "null" ]]; then
  echo "❌ No refresh_token found in response."
  exit 1
fi

# Update or add TP_TOKEN in the env file
if grep -q '^TP_TOKEN=' "$ENV_FILE"; then
  sed -i '' "s|^TP_TOKEN=.*|TP_TOKEN='${TP_TOKEN}'|" "$ENV_FILE"
else
  echo "TP_TOKEN='${TP_TOKEN}'" >> "$ENV_FILE"
fi

# Update or add REFRESH_TOKEN in the env file
if grep -q '^REFRESH_TOKEN=' "$ENV_FILE"; then
  sed -i '' "s|^REFRESH_TOKEN=.*|REFRESH_TOKEN='${REFRESH_TOKEN}'|" "$ENV_FILE"
else
  echo "REFRESH_TOKEN='${REFRESH_TOKEN}'" >> "$ENV_FILE"
fi

echo "✅ Tokens updated in $ENV_FILE:"
echo "   TP_TOKEN: ${TP_TOKEN:0:50}..."
echo "   REFRESH_TOKEN: ${REFRESH_TOKEN}"
</file>

<file path="scripts/confirmPublicKey">
#!/usr/bin/env node
require('dotenv').config({ path: '../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.PARTNER_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/partner_accounts/public_key?domain=${process.env.NGROK_DOMAIN}`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="scripts/confirmRegisteredDomain.sh">
#!/usr/bin/env bash
set -euo pipefail

echo "Tesla Fleet API - Third-Party OAuth Setup"
echo "==========================================="

echo "Domain confirmation is NOT required for third-party (ownerapi) OAuth."
echo "Instead, you must register your redirect URI in the Tesla developer portal."
echo ""
echo "1. Go to https://developer.tesla.com/"
echo "2. Find your app and add your ngrok domain with /extractToken as an allowed redirect URI."
echo "   Example: https://your-ngrok-domain.ngrok-free.app/extractToken"
echo "3. Save your changes."
echo ""
echo "You can now use the third-party OAuth flow as described in the README."

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

# Check required variables
if [[ -z "${NGROK_DOMAIN:-}" ]]; then
  echo "❌  NGROK_DOMAIN is not set" >&2
  exit 1
fi
if [[ -z "${PARTNER_TOKEN:-}" ]]; then
  echo "❌  PARTNER_TOKEN is not set" >&2
  exit 1
fi

echo "Checking if domain is registered: ${NGROK_DOMAIN}"

curl -X GET "https://fleet-api.prd.na.vn.cloud.tesla.com/api/1/partner_accounts" \
  -H 'Content-Type: application/json' \
  -H "Authorization: Bearer ${PARTNER_TOKEN}"
</file>

<file path="scripts/confirmRegisteredKey.sh">
#!/usr/bin/env bash
set -euo pipefail

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

curl -H "Authorization: Bearer ${PARTNER_TOKEN}" \
      -i https://fleet-api.prd.na.vn.cloud.tesla.com/api/1/partner_accounts/public_key?domain=${NGROK_DOMAIN}
</file>

<file path="scripts/copyPublicKey.sh">
#!/usr/bin/env bash
set -euo pipefail

# Script to copy the Tesla Fleet API public key to the required hosted location
# Usage: ./copyPublicKey.sh /path/to/your/public-key.pem

TARGET_PATH="$(dirname "$0")/../tesla-fleet/public/.well-known/appspecific/com.tesla.3p.public-key.pem"

if [[ $# -ge 1 ]]; then
  SRC_KEY="$1"
else
  read -rp "Enter the path to your public key file: " SRC_KEY
fi

if [[ ! -f "$SRC_KEY" ]]; then
  echo "❌ Source public key not found: $SRC_KEY" >&2
  exit 1
fi

echo "📂 Creating target directory if needed..."
mkdir -p "$(dirname "$TARGET_PATH")"

echo "📋 Copying $SRC_KEY to $TARGET_PATH ..."
cp "$SRC_KEY" "$TARGET_PATH"

echo "✅ Public key successfully copied to $TARGET_PATH"
echo "   It will now be hosted at: /.well-known/appspecific/com.tesla.3p.public-key.pem on your domain."
</file>

<file path="scripts/hostPublicKey">
# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

curl https://${NGROK_DOMAIN}/.well-known/appspecific/com.tesla.3p.public-key.pem
</file>

<file path="scripts/ngrokTunnelRequest.sh">
#!/usr/bin env bash
curl "https://${NGROK_DOMAIN}/.well-known/appspecific/com.tesla.3p.public-key.pem"
</file>

<file path="scripts/package.json">
{
  "dependencies": {
    "node-fetch": "^3.3.2"
  }
}
</file>

<file path="scripts/partnerTokenGenerate">
#!/usr/bin/env bash
set -euo pipefail

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

# Partner authentication token request

TOKEN_RESPONSE=$(curl --silent --request POST \
--header 'Content-Type: application/x-www-form-urlencoded' \
--data-urlencode 'grant_type=client_credentials' \
--data-urlencode "client_id=$CLIENT_ID" \
--data-urlencode "client_secret=$CLIENT_SECRET" \
--data-urlencode 'scope=openid vehicle_device_data vehicle_cmds vehicle_charging_cmds' \
--data-urlencode "audience=$AUDIENCE" \
'https://auth.tesla.com/oauth2/v3/token')

echo "$TOKEN_RESPONSE"  # still print the response for your reference

# Extract the access_token using jq
PARTNER_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')

if [[ -z "$PARTNER_TOKEN" || "$PARTNER_TOKEN" == "null" ]]; then
  echo "❌ No access_token found in response."
  exit 1
fi

# Update or add PARTNER_TOKEN in the env file
if grep -q '^PARTNER_TOKEN=' "$ENV_FILE"; then
  sed -i '' "s|^PARTNER_TOKEN=.*|PARTNER_TOKEN='${PARTNER_TOKEN}'|" "$ENV_FILE"
else
  echo "PARTNER_TOKEN='${PARTNER_TOKEN}'" >> "$ENV_FILE"
fi

echo "✅ PARTNER_TOKEN updated in $ENV_FILE"
</file>

<file path="scripts/refreshToAccess.sh">
#!/usr/bin/env bash
set -euo pipefail

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

if [[ -z "${REFRESH_TOKEN:-}" ]]; then
  echo "❌ REFRESH_TOKEN not found in environment variables" >&2
  exit 1
fi

echo "🔄 Using REFRESH_TOKEN to get new tokens..."

# Refresh token request
TOKEN_RESPONSE=$(curl --silent --request POST \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data-urlencode 'grant_type=refresh_token' \
  --data-urlencode "client_id=${CLIENT_ID}" \
  --data-urlencode "refresh_token=${REFRESH_TOKEN}" \
  'https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token')

echo "$TOKEN_RESPONSE"  # print the response for reference

# Extract tokens using jq
TP_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
NEW_REFRESH_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.refresh_token')
ID_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.id_token')

if [[ -z "$TP_TOKEN" || "$TP_TOKEN" == "null" ]]; then
  echo "❌ No access_token found in response."
  exit 1
fi

if [[ -z "$NEW_REFRESH_TOKEN" || "$NEW_REFRESH_TOKEN" == "null" ]]; then
  echo "❌ No refresh_token found in response."
  exit 1
fi

if [[ -z "$ID_TOKEN" || "$ID_TOKEN" == "null" ]]; then
  echo "❌ No id_token found in response."
  exit 1
fi

# Update or add TP_TOKEN in the env file
if grep -q '^TP_TOKEN=' "$ENV_FILE"; then
  sed -i '' "s|^TP_TOKEN=.*|TP_TOKEN='${TP_TOKEN}'|" "$ENV_FILE"
else
  echo "TP_TOKEN='${TP_TOKEN}'" >> "$ENV_FILE"
fi

# Update or add REFRESH_TOKEN in the env file
if grep -q '^REFRESH_TOKEN=' "$ENV_FILE"; then
  sed -i '' "s|^REFRESH_TOKEN=.*|REFRESH_TOKEN='${NEW_REFRESH_TOKEN}'|" "$ENV_FILE"
else
  echo "REFRESH_TOKEN='${NEW_REFRESH_TOKEN}'" >> "$ENV_FILE"
fi

# Update or add ID_TOKEN in the env file
if grep -q '^ID_TOKEN=' "$ENV_FILE"; then
  sed -i '' "s|^ID_TOKEN=.*|ID_TOKEN='${ID_TOKEN}'|" "$ENV_FILE"
else
  echo "ID_TOKEN='${ID_TOKEN}'" >> "$ENV_FILE"
fi

# Decode ID_TOKEN and print the payload
function jwt_decode(){
    jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "$1"
}


echo "✅ Tokens updated in $ENV_FILE:"
echo "   TP_TOKEN: ${TP_TOKEN:0:50}..."
echo "   REFRESH_TOKEN: ${NEW_REFRESH_TOKEN}"
echo "   ID_TOKEN: ${ID_TOKEN:0:50}..."
echo "   ID_TOKEN payload: $(jwt_decode "$ID_TOKEN")"
</file>

<file path="scripts/refreshTokenGenerate">
#!/usr/bin/env bash
set -euo pipefail

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

# Refresh token request
curl --request POST \
  --header 'Content-Type: application/x-www-form-urlencoded' \
  --data-urlencode 'grant_type=refresh_token' \
  --data-urlencode "client_id=${CLIENT_ID}" \
  --data-urlencode "refresh_token=${REFRESH_TOKEN}" \
  'https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token'
</file>

<file path="scripts/registerEndpoint.sh">
#!/usr/bin/env bash
set -euo pipefail

# --- load secrets ---
ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/fleet.env"
if [[ -f $ENV_FILE ]]; then
  # export all names found in the file
  set -a            # automatically export every variable that gets set
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "❌  Env file not found: $ENV_FILE" >&2
  exit 1
fi

curl -i -X POST "https://fleet-api.prd.na.vn.cloud.tesla.com/api/1/partner_accounts" \
  -H "Authorization: Bearer ${PARTNER_TOKEN}" \
  -H "Content-Type: application/json" \
  -d "{\"domain\":\"${NGROK_DOMAIN}\"}"
</file>

<file path="scripts/setup-production-certs.sh">
#!/usr/bin/env bash
set -euo pipefail

# Production Certificate Setup Script for Tesla Fleet API
# This script sets up proper SSL/TLS certificates for production use

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
PROD_CONFIG_DIR="$PROJECT_ROOT/config/production"
CA_BUNDLE="$PROD_CONFIG_DIR/ca-bundle.pem"

echo "🔒 Setting up production certificates..."

# Create production config directory
mkdir -p "$PROD_CONFIG_DIR"

# Function to check if OpenSSL is available
check_openssl() {
  if ! command -v openssl &> /dev/null; then
    echo "❌ OpenSSL is required but not installed. Please install OpenSSL first."
    exit 1
  fi
}

# Function to check if certificate exists and is valid
check_cert_validity() {
  local cert_file="$1"
  if [[ -f "$cert_file" ]]; then
    local end_date
    end_date=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
    local end_epoch
    end_epoch=$(date -j -f "%b %d %H:%M:%S %Y %Z" "$end_date" "+%s")
    local now_epoch
    now_epoch=$(date "+%s")
    
    # If certificate expires in less than 30 days, return false
    if (( end_epoch - now_epoch < 2592000 )); then
      return 1
    fi
    return 0
  fi
  return 1
}

# 1. Set up CA bundle
setup_ca_bundle() {
  echo "📦 Setting up CA bundle..."
  
  # Copy system CA certificates
  if [[ -f "/etc/ssl/cert.pem" ]]; then
    cp "/etc/ssl/cert.pem" "$CA_BUNDLE"
  elif [[ -f "/etc/ssl/certs/ca-certificates.crt" ]]; then
    cp "/etc/ssl/certs/ca-certificates.crt" "$CA_BUNDLE"
  else
    echo "❌ Could not find system CA certificates"
    exit 1
  fi
  
  echo "✅ CA bundle created at $CA_BUNDLE"
}

# 2. Generate production TLS certificate (if using self-signed)
setup_tls_cert() {
  local tls_cert="$PROD_CONFIG_DIR/tls-cert.pem"
  local tls_key="$PROD_CONFIG_DIR/tls-key.pem"
  
  if check_cert_validity "$tls_cert"; then
    echo "✅ TLS certificate is valid and not expiring soon"
    return
  fi
  
  echo "🔑 Generating new TLS certificate..."
  
  # Generate a strong private key and CSR
  openssl req -new -newkey ec \
    -pkeyopt ec_paramgen_curve:secp384r1 \
    -pkeyopt ec_param_enc:named_curve \
    -days 365 \
    -nodes \
    -subj "/C=US/ST=CA/O=Tesla Fleet API/CN=${DOMAIN:-localhost}" \
    -keyout "$tls_key" \
    -out "$PROD_CONFIG_DIR/tls.csr"
    
  # Self-sign the certificate (in production, you'd submit the CSR to a CA)
  openssl x509 -req \
    -days 365 \
    -in "$PROD_CONFIG_DIR/tls.csr" \
    -signkey "$tls_key" \
    -out "$tls_cert" \
    -sha384 \
    -extensions v3_req \
    -extfile <(echo "
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = digitalSignature, keyEncipherment
      extendedKeyUsage = serverAuth
      subjectAltName = @alt_names
      [ alt_names ]
      DNS.1 = ${DOMAIN:-localhost}
      DNS.2 = tesla_http_proxy
    ")
    
  rm "$PROD_CONFIG_DIR/tls.csr"
  chmod 600 "$tls_key"
  echo "✅ TLS certificate generated"
}

# 3. Set up Tesla Fleet API key pair
setup_fleet_keys() {
  local fleet_key="$PROD_CONFIG_DIR/fleet-key.pem"
  local public_key_dir="$PROJECT_ROOT/public/.well-known/appspecific"
  local public_key="$public_key_dir/com.tesla.3p.public-key.pem"
  
  if [[ -f "$fleet_key" && -f "$public_key" ]]; then
    echo "✅ Fleet API keys already exist"
    return
  fi
  
  echo "🔑 Generating Tesla Fleet API key pair..."
  
  # Create public key directory
  mkdir -p "$public_key_dir"
  
  # Generate EC key pair for Tesla Fleet API
  openssl ecparam -genkey -name prime256v1 -noout -out "$fleet_key"
  chmod 600 "$fleet_key"
  
  # Extract public key
  openssl ec -in "$fleet_key" -pubout -out "$public_key"
  
  echo "✅ Fleet API keys generated"
}

# Main execution
main() {
  check_openssl
  
  # Create production config directory if it doesn't exist
  mkdir -p "$PROD_CONFIG_DIR"
  
  # Set up certificates
  setup_ca_bundle
  setup_tls_cert
  setup_fleet_keys
  
  echo "✅ All production certificates have been set up successfully"
  echo "⚠️  Remember:"
  echo "   1. Keep private keys secure and never commit them to version control"
  echo "   2. In production, use proper SSL certificates from a trusted CA"
  echo "   3. Regularly monitor certificate expiration dates"
  echo "   4. Set up automated certificate renewal"
}

main "$@"
</file>

<file path="scripts/update-callback.js">
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Function to extract ONLY the code value from URL
function extractCodeFromUrl(url) {
    try {
        const urlObj = new URL(url);
        const code = urlObj.searchParams.get('code');
        return code;
    } catch (error) {
        console.error('Error parsing URL:', error.message);
        return null;
    }
}

// Function to update fleet.env file
function updateFleetEnv(callbackUrl, code) {
    const envPath = path.join(__dirname, '..', 'fleet.env');
    
    try {
        // Read the current fleet.env file
        let content = fs.readFileSync(envPath, 'utf8');
        
        // Update CALLBACK variable (full URL)
        content = content.replace(
            /^CALLBACK=.*$/m,
            `CALLBACK='${callbackUrl}'`
        );
        
        // Update CODE variable (just the code value)
        content = content.replace(
            /^CODE=.*$/m,
            `CODE='${code}'`
        );
        
        // Write back to file
        fs.writeFileSync(envPath, content);
        
        console.log('✅ Successfully updated fleet.env:');
        console.log(`   CALLBACK: ${callbackUrl}`);
        console.log(`   CODE: ${code}`);
        
    } catch (error) {
        console.error('❌ Error updating fleet.env:', error.message);
        process.exit(1);
    }
}

// Main function for interactive mode
async function main() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    console.log('🔄 Tesla Fleet API - Callback URL Updater');
    console.log('==========================================\n');
    console.log('This script will:');
    console.log('1. Extract the code parameter from your redirect URI');
    console.log('2. Update CALLBACK with the full redirect URI');
    console.log('3. Update CODE with just the extracted code value\n');
    
    // Get redirect URI from user
    const redirectUri = await new Promise((resolve) => {
        rl.question('Enter the redirect URI: ', (answer) => {
            resolve(answer.trim());
        });
    });
    
    if (!redirectUri) {
        console.error('❌ No redirect URI provided');
        rl.close();
        process.exit(1);
    }
    
    // Extract code from the URI
    const code = extractCodeFromUrl(redirectUri);
    
    if (!code) {
        console.error('❌ Could not extract code from the provided URI');
        console.log('Make sure the URI contains a "code" parameter');
        rl.close();
        process.exit(1);
    }
    
    console.log(`\n📋 Extracted information:`);
    console.log(`   Full Redirect URI: ${redirectUri}`);
    console.log(`   Extracted Code: ${code}\n`);
    
    // Confirm with user
    const confirm = await new Promise((resolve) => {
        rl.question('Do you want to update fleet.env with these values? (y/N): ', (answer) => {
            resolve(answer.toLowerCase().trim());
        });
    });
    
    if (confirm === 'y' || confirm === 'yes') {
        updateFleetEnv(redirectUri, code);
    } else {
        console.log('❌ Update cancelled');
    }
    
    rl.close();
}

// Handle command line arguments
if (process.argv.length > 2) {
    const redirectUri = process.argv[2];
    const code = extractCodeFromUrl(redirectUri);
    
    if (!code) {
        console.error('❌ Could not extract code from the provided URI');
        console.log('Usage: node update-callback.js <redirect_uri>');
        console.log('Example: node update-callback.js "https://example.com/callback?code=ABC123&state=xyz"');
        process.exit(1);
    }
    
    console.log('🔄 Tesla Fleet API - Callback URL Updater');
    console.log('==========================================\n');
    console.log(`📋 Extracted information:`);
    console.log(`   Full Redirect URI: ${redirectUri}`);
    console.log(`   Extracted Code: ${code}\n`);
    
    updateFleetEnv(redirectUri, code);
} else {
    // Interactive mode
    main().catch(console.error);
}
</file>

<file path="scripts/update-code.js">
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Function to extract ONLY the code value from URL
function extractCodeFromUrl(url) {
    try {
        const urlObj = new URL(url);
        const code = urlObj.searchParams.get('code');
        return code;
    } catch (error) {
        console.error('Error parsing URL:', error.message);
        return null;
    }
}

// Function to update only CODE in fleet.env file
function updateCodeInFleetEnv(code) {
    const envPath = path.join(__dirname, '..', 'fleet.env');
    
    try {
        // Read the current fleet.env file
        let content = fs.readFileSync(envPath, 'utf8');
        
        // Update only CODE variable
        content = content.replace(
            /^CODE=.*$/m,
            `CODE='${code}'`
        );
        
        // Write back to file
        fs.writeFileSync(envPath, content);
        
        console.log('✅ Successfully updated CODE in fleet.env:');
        console.log(`   CODE: ${code}`);
        
    } catch (error) {
        console.error('❌ Error updating fleet.env:', error.message);
        process.exit(1);
    }
}

// Main function for interactive mode
async function main() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    console.log('🔄 Tesla Fleet API - Code Updater');
    console.log('==================================\n');
    console.log('This script will update ONLY the CODE variable in fleet.env\n');
    
    // Get input from user
    const userInput = await new Promise((resolve) => {
        rl.question('Enter the redirect URI or just the code value: ', (answer) => {
            resolve(answer.trim());
        });
    });
    
    if (!userInput) {
        console.error('❌ No input provided');
        rl.close();
        process.exit(1);
    }
    
    let code;
    
    // Check if input looks like a URL
    if (userInput.includes('http') || userInput.includes('?')) {
        // Extract code from URL
        code = extractCodeFromUrl(userInput);
        
        if (!code) {
            console.error('❌ Could not extract code from the provided URI');
            console.log('Make sure the URI contains a "code" parameter');
            rl.close();
            process.exit(1);
        }
        
        console.log(`\n📋 Extracted code from URL: ${code}`);
    } else {
        // Treat as direct code value
        code = userInput;
        console.log(`\n📋 Using provided code: ${code}`);
    }
    
    // Confirm with user
    const confirm = await new Promise((resolve) => {
        rl.question(`\nDo you want to update CODE in fleet.env with "${code}"? (y/N): `, (answer) => {
            resolve(answer.toLowerCase().trim());
        });
    });
    
    if (confirm === 'y' || confirm === 'yes') {
        updateCodeInFleetEnv(code);
    } else {
        console.log('❌ Update cancelled');
    }
    
    rl.close();
}

// Handle command line arguments
if (process.argv.length > 2) {
    const input = process.argv[2];
    let code;
    
    // Check if input looks like a URL
    if (input.includes('http') || input.includes('?')) {
        code = extractCodeFromUrl(input);
        
        if (!code) {
            console.error('❌ Could not extract code from the provided URI');
            console.log('Usage: node update-code.js <redirect_uri_or_code>');
            console.log('Example: node update-code.js "https://example.com/callback?code=ABC123&state=xyz"');
            console.log('Example: node update-code.js "ABC123"');
            process.exit(1);
        }
        
        console.log('🔄 Tesla Fleet API - Code Updater');
        console.log('==================================\n');
        console.log(`📋 Extracted code from URL: ${code}\n`);
    } else {
        // Treat as direct code value
        code = input;
        console.log('🔄 Tesla Fleet API - Code Updater');
        console.log('==================================\n');
        console.log(`📋 Using provided code: ${code}\n`);
    }
    
    updateCodeInFleetEnv(code);
} else {
    // Interactive mode
    main().catch(console.error);
}
</file>

<file path="scripts/update-tokens.js">
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Function to extract tokens from JSON string
function extractTokensFromJson(jsonString) {
    try {
        // Clean the JSON string (remove trailing % and any extra characters)
        const cleanJson = jsonString.replace(/%$/, '').trim();
        const tokens = JSON.parse(cleanJson);
        
        return {
            tp_token: tokens.access_token,
            refresh_token: tokens.refresh_token,
            id_token: tokens.id_token
        };
    } catch (error) {
        console.error('Error parsing JSON:', error.message);
        return null;
    }
}

// Function to update tokens in fleet.env file
function updateTokensInFleetEnv(tpToken, refreshToken, idToken) {
    const envPath = path.join(__dirname, '..', 'fleet.env');
    
    try {
        // Read the current fleet.env file
        let content = fs.readFileSync(envPath, 'utf8');
        
        // Update TP_TOKEN variable
        if (tpToken) {
            content = content.replace(
                /^TP_TOKEN=.*$/m,
                `TP_TOKEN='${tpToken}'`
            );
        }
        
        // Update REFRESH_TOKEN variable (add if doesn't exist)
        if (refreshToken) {
            if (content.includes('REFRESH_TOKEN=')) {
                content = content.replace(
                    /^REFRESH_TOKEN=.*$/m,
                    `REFRESH_TOKEN='${refreshToken}'`
                );
            } else {
                // Add REFRESH_TOKEN after TP_TOKEN
                content = content.replace(
                    /^(TP_TOKEN=.*)$/m,
                    `$1\nREFRESH_TOKEN='${refreshToken}'`
                );
            }
        }
        
        // Update ID_TOKEN variable (add if doesn't exist)
        if (idToken) {
            if (content.includes('ID_TOKEN=')) {
                content = content.replace(
                    /^ID_TOKEN=.*$/m,
                    `ID_TOKEN='${idToken}'`
                );
            } else {
                // Add ID_TOKEN after REFRESH_TOKEN or ACCESS_TOKEN
                if (content.includes('REFRESH_TOKEN=')) {
                    content = content.replace(
                        /^(REFRESH_TOKEN=.*)$/m,
                        `$1\nID_TOKEN='${idToken}'`
                    );
                } else {
                    content = content.replace(
                        /^(TP_TOKEN=.*)$/m,
                        `$1\nID_TOKEN='${idToken}'`
                    );
                }
            }
        }
        
        // Write back to file
        fs.writeFileSync(envPath, content);
        
        console.log('✅ Successfully updated tokens in fleet.env:');
        if (tpToken) console.log(`   TP_TOKEN: ${tpToken.substring(0, 50)}...`);
        if (refreshToken) console.log(`   REFRESH_TOKEN: ${refreshToken}`);
        if (idToken) console.log(`   ID_TOKEN: ${idToken.substring(0, 50)}...`);
        
    } catch (error) {
        console.error('❌ Error updating fleet.env:', error.message);
        process.exit(1);
    }
}

// Main function for interactive mode
async function main() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    console.log('🔄 Tesla Fleet API - Token Updater');
    console.log('==================================\n');
    console.log('This script will extract tokens from JSON output and update fleet.env\n');
    
    // Get JSON input from user
    const jsonInput = await new Promise((resolve) => {
        rl.question('Paste the JSON output containing tokens: ', (answer) => {
            resolve(answer.trim());
        });
    });
    
    if (!jsonInput) {
        console.error('❌ No JSON input provided');
        rl.close();
        process.exit(1);
    }
    
    // Extract tokens from JSON
    const tokens = extractTokensFromJson(jsonInput);
    
    if (!tokens) {
        console.error('❌ Could not extract tokens from the provided JSON');
        rl.close();
        process.exit(1);
    }
    
    console.log(`\n📋 Extracted tokens:`);
    if (tokens.tp_token) console.log(`   TP Token: ${tokens.tp_token.substring(0, 50)}...`);
    if (tokens.refresh_token) console.log(`   Refresh Token: ${tokens.refresh_token}`);
    if (tokens.id_token) console.log(`   ID Token: ${tokens.id_token.substring(0, 50)}...`);
    
    // Confirm with user
    const confirm = await new Promise((resolve) => {
        rl.question(`\nDo you want to update fleet.env with these tokens? (y/N): `, (answer) => {
            resolve(answer.toLowerCase().trim());
        });
    });
    
    if (confirm === 'y' || confirm === 'yes') {
        updateTokensInFleetEnv(tokens.tp_token, tokens.refresh_token, tokens.id_token);
    } else {
        console.log('❌ Update cancelled');
    }
    
    rl.close();
}

// Handle command line arguments
if (process.argv.length > 2) {
    const jsonInput = process.argv[2];
    const tokens = extractTokensFromJson(jsonInput);
    
    if (!tokens) {
        console.error('❌ Could not extract tokens from the provided JSON');
        console.log('Usage: node update-tokens.js <json_string>');
        console.log('Example: node update-tokens.js \'{"access_token":"...","refresh_token":"..."}\'');
        process.exit(1);
    }
    
    console.log('🔄 Tesla Fleet API - Token Updater');
    console.log('==================================\n');
    console.log(`📋 Extracted tokens:`);
    if (tokens.tp_token) console.log(`   TP Token: ${tokens.tp_token.substring(0, 50)}...`);
    if (tokens.refresh_token) console.log(`   Refresh Token: ${tokens.refresh_token}`);
    if (tokens.id_token) console.log(`   ID Token: ${tokens.id_token.substring(0, 50)}...\n`);
    
    updateTokensInFleetEnv(tokens.tp_token, tokens.refresh_token, tokens.id_token);
} else {
    // Interactive mode
    main().catch(console.error);
}
</file>

<file path="scripts/viewTokens.sh">
#!/usr/bin/env bash
set -euo pipefail

# Helper script to view tokens from token.env file
TOKEN_ENV_FILE="$HOME/Research 2025/Tesla Fleet API/tesla-fleet/token.env"

if [[ ! -f $TOKEN_ENV_FILE ]]; then
  echo "❌ Token environment file not found: $TOKEN_ENV_FILE" >&2
  exit 1
fi

echo "📋 Current tokens in token.env:"
echo "================================"

# Load and display tokens
source "$TOKEN_ENV_FILE"

echo "TP_TOKEN:"
if [[ -n "${TP_TOKEN:-}" && "${TP_TOKEN}" != "''" ]]; then
  echo "  ${TP_TOKEN:0:50}..."
else
  echo "  (empty)"
fi

echo ""
echo "REFRESH_TOKEN:"
if [[ -n "${REFRESH_TOKEN:-}" && "${REFRESH_TOKEN}" != "''" ]]; then
  echo "  ${REFRESH_TOKEN}"
else
  echo "  (empty)"
fi

echo ""
echo "ID_TOKEN:"
if [[ -n "${ID_TOKEN:-}" && "${ID_TOKEN}" != "''" ]]; then
  echo "  ${ID_TOKEN:0:50}..."
else
  echo "  (empty)"
fi

echo ""
echo "File location: $TOKEN_ENV_FILE"
</file>

<file path="src/routes/extractToken.ts">
import express, { Router, Request, Response } from 'express';
import fetch from 'node-fetch'; // or axios
import { config } from 'dotenv';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';
import { VehicleToken } from '../db';
import jwt from 'jsonwebtoken'; // to decode sub from idToken

// Load environment variables from fleet.env
config({ path: path.join(__dirname, '../../fleet.env') });

const router = Router();

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

interface TokenResponse {
  access_token: string;
  refresh_token: string;
  id_token: string;
  token_type: string;
  expires_in: number;
}

interface UserInfo {
  email: string;
  full_name: string;
}

interface Vehicle {
  vin: string;
  id: string;
  vehicle_id: string;
}

interface VehicleResponse {
  response: Vehicle[];
}

// Helper function to fetch user info
async function fetchUserInfo(accessToken: string): Promise<UserInfo> {
  const response = await fetch(`${BASE_URL}/api/1/users/me`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${accessToken}`
    }
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch user info: ${response.status} ${response.statusText}`);
  }

  const data = await response.json() as UserInfo;
  return data;
}

// Helper function to fetch vehicle list
async function fetchVehicleList(accessToken: string): Promise<Vehicle[]> {
  const response = await fetch(`${BASE_URL}/api/1/vehicles`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${accessToken}`
    }
  });

  if (!response.ok) {
    throw new Error(`Failed to fetch vehicle list: ${response.status} ${response.statusText}`);
  }

  const data = await response.json() as VehicleResponse;
  return data.response || [];
}

// helper
async function storeTokens(
  { userId, tpToken, refreshToken, idToken, expiresIn }: {
    userId: string, tpToken: string, refreshToken: string,
    idToken: string, expiresIn: number }
) {
  // Check if user already exists first
  const existingUser = await VehicleToken.findOne({
    where: { userId }
  });

  try {
    // Fetch additional user info
    console.log('🔍 Fetching user info...');
    const userInfo = await fetchUserInfo(tpToken);
    console.log('✅ User info fetched');

    // Fetch vehicle list
    console.log('🔍 Fetching vehicle list...');
    const vehicles = await fetchVehicleList(tpToken);
    console.log(`✅ Found ${vehicles.length} vehicles`);

    if (existingUser) {
      // Update existing user's tokens and info
      await existingUser.update({
        idToken,
        accessToken: tpToken,
        refreshToken,
        expiresAt: new Date(Date.now() + expiresIn * 1000),
        email: userInfo.email,
        fullName: userInfo.full_name
      });
      console.log(`🔄 Updated tokens and info for existing user (${userId})`);

      // Update or create vehicle entries
      for (const vehicle of vehicles) {
        const vehicleEntry = await VehicleToken.findOne({
          where: { userId, vin: vehicle.vin }
        });

        if (vehicleEntry) {
          await vehicleEntry.update({
            vehicleId: vehicle.vehicle_id
          });
        } else {
          await VehicleToken.create({
            userId,
            vin: vehicle.vin,
            vehicleId: vehicle.vehicle_id,
            email: userInfo.email,
            fullName: userInfo.full_name,
            idToken,
            accessToken: tpToken,
            refreshToken,
            expiresAt: new Date(Date.now() + expiresIn * 1000)
          });
        }
      }
    } else {
      // Create new user entries for each vehicle
      for (const vehicle of vehicles) {
        await VehicleToken.create({
          userId,
          vin: vehicle.vin,
          vehicleId: vehicle.vehicle_id,
          email: userInfo.email,
          fullName: userInfo.full_name,
          idToken,
          accessToken: tpToken,
          refreshToken,
          expiresAt: new Date(Date.now() + expiresIn * 1000)
        });
      }

      // If no vehicles, create a base user entry
      if (vehicles.length === 0) {
        await VehicleToken.create({
          userId,
          vin: null,
          vehicleId: null,
          email: userInfo.email,
          fullName: userInfo.full_name,
          idToken,
          accessToken: tpToken,
          refreshToken,
          expiresAt: new Date(Date.now() + expiresIn * 1000)
        });
      }

      console.log(`✨ Created new user entries (${userId}) with ${vehicles.length} vehicles`);
    }
  } catch (error) {
    console.error('Failed to fetch additional info:', error);
    // Still create/update the basic token entry even if additional info fetch fails
    if (existingUser) {
      await existingUser.update({
        idToken,
        accessToken: tpToken,
        refreshToken,
        expiresAt: new Date(Date.now() + expiresIn * 1000)
      });
    } else {
      await VehicleToken.create({
        userId,
        vin: null,
        vehicleId: null,
        email: null,
        fullName: null,
        idToken,
        accessToken: tpToken,
        refreshToken,
        expiresAt: new Date(Date.now() + expiresIn * 1000)
      });
    }
    console.log(`⚠️ Created/updated basic token entry for ${userId} (additional info fetch failed)`);
  }
}

// Helper function to update token environment file
const updateTokenEnvFile = async (tokens: {
  tpToken?: string;
  refreshToken?: string;
  idToken?: string;
}): Promise<void> => {
  const tokenEnvFilePath = path.join(__dirname, '../../fleet.env');
  
  if (!fs.existsSync(tokenEnvFilePath)) {
    throw new Error(`Token environment file not found: ${tokenEnvFilePath}`);
  }

  let envContent = fs.readFileSync(tokenEnvFilePath, 'utf8');

  // Update TP_TOKEN if provided
  if (tokens.tpToken) {
    const tpTokenRegex = /^TP_TOKEN=.*/m;
    if (tpTokenRegex.test(envContent)) {
      envContent = envContent.replace(tpTokenRegex, `TP_TOKEN='${tokens.tpToken}'`);
    } else {
      envContent += `\nTP_TOKEN='${tokens.tpToken}'`;
    }
  }

  // Update REFRESH_TOKEN if provided
  if (tokens.refreshToken) {
    const refreshTokenRegex = /^REFRESH_TOKEN=.*/m;
    if (refreshTokenRegex.test(envContent)) {
      envContent = envContent.replace(refreshTokenRegex, `REFRESH_TOKEN='${tokens.refreshToken}'`);
    } else {
      envContent += `\nREFRESH_TOKEN='${tokens.refreshToken}'`;
    }
  }

  // Update ID_TOKEN if provided
  if (tokens.idToken) {
    const idTokenRegex = /^ID_TOKEN=.*/m;
    if (idTokenRegex.test(envContent)) {
      envContent = envContent.replace(idTokenRegex, `ID_TOKEN='${tokens.idToken}'`);
    } else {
      envContent += `\nID_TOKEN='${tokens.idToken}'`;
    }
  }

  fs.writeFileSync(tokenEnvFilePath, envContent);
};

// Enhanced extractToken endpoint with authCodeTokenReq functionality
router.get('/extractToken', async (req: Request, res: Response): Promise<void> => {
  console.log(`🌐 Received ${req.method} request to ${req.path}`);
  console.log(`📝 Query params:`, req.query);

  const code = req.query.code as string | undefined;

  if (!code) {
    console.log('❌ No code parameter found in request');
    res.status(400).json({ 
      error: 'Missing code parameter',
      message: 'Authorization code is required for token exchange',
      receivedParams: Object.keys(req.query),
      fullUrl: req.url
    });
    return;
  }

  try {
    console.log(`🔄 Processing token exchange for code: ${code.substring(0, 20)}...`);
    
    const formData = new URLSearchParams();
    formData.append('grant_type', 'authorization_code');
    formData.append('client_id', process.env.CLIENT_ID!);
    formData.append('client_secret', process.env.CLIENT_SECRET!);
    formData.append('code', code);
    formData.append('redirect_uri', process.env.CALLBACK!);

    console.log(`🔗 Making request to: https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token`);
    console.log(`📋 Request parameters:`, {
      grant_type: 'authorization_code',
      client_id: process.env.CLIENT_ID,
      code: code.substring(0, 20) + '...',
      redirect_uri: process.env.CALLBACK
    });

    const response = await fetch('https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: formData.toString()
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.log(`❌ Tesla API Error Response: ${errorText}`);
      throw new Error(`Token exchange failed: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const tokenResponse = await response.json() as TokenResponse;
    console.log('🎯 Token exchange successful');

    // Extract tokens
    const tpToken = tokenResponse.access_token;
    const refreshToken = tokenResponse.refresh_token;
    const idToken = tokenResponse.id_token;

    // Validate required tokens
    if (!tpToken || !refreshToken || !idToken) {
      throw new Error('Missing required tokens in response');
    }

    // Extract user ID from idToken
    const decodedToken = jwt.decode(idToken) as { sub: string };
    if (!decodedToken?.sub) {
      throw new Error('Missing sub claim in ID token');
    }

    // Store tokens in database
    await storeTokens({
      userId: decodedToken.sub,
      tpToken,
      refreshToken,
      idToken,
      expiresIn: tokenResponse.expires_in
    });

    res.json({
      success: true,
      message: 'Token exchange and storage completed successfully',
      tokens: {
        access_token: tpToken,
        refresh_token: refreshToken,
        id_token: idToken,
        token_type: tokenResponse.token_type,
        expires_in: tokenResponse.expires_in
      },
      decodedIdToken: decodedToken  // Include decoded token information in response
    });

  } catch (err) {
    console.error('❌ Error:', err);
    res.status(500).json({ 
      error: 'Operation failed',
      message: err instanceof Error ? err.message : 'Unknown error occurred'
    });
  }
});

// POST handler with same logic
router.post('/extractToken', async (req: Request, res: Response): Promise<void> => {
  const code = (req.query.code || req.body.code) as string | undefined;
  // Set the code in query params for consistent handling
  req.query.code = code;
  // Remove code from body to avoid confusion
  if (req.body && 'code' in req.body) {
    delete req.body.code;
  }
  // Handle the request using the same logic
  await new Promise<void>((resolve) => {
    router.get('/extractToken')(req, res, () => resolve());
  });
});

export default router;
</file>

<file path="src/routes/health.ts">
// src/routes/health.ts
import { Router, Request, Response } from 'express';
const router = Router();
router.get('/', (req: Request, res: Response) => {
  res.json({ status: 'ok' });
});
export default router;
</file>

<file path="src/routes/vehicles.ts">
import express, { Router, Request, Response } from 'express';
import { config } from 'dotenv';
import fetch from 'node-fetch';
import { VehicleToken, refreshToken } from '../db';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';

config();

const router = Router();

// Load private key for signing commands
const privateKey = fs.readFileSync(
  path.join(__dirname, '../../keys/private-key.pem'),
  'utf8'
);

// Helper function to sign commands
function signWithECKey(data: string): string {
  const sign = crypto.createSign('SHA256');
  sign.update(data);
  return sign.sign(privateKey, 'base64');
}

// Helper function to execute vehicle command with token refresh
async function executeVehicleCommand(
  vehicleToken: any,
  vin: string,
  command: string,
  commandData: string
): Promise<any> {
  try {
    const signature = signWithECKey(commandData);
    
    const response = await fetch(
      `https://fleet-api.prd.na.vn.cloud.tesla.com/api/1/vehicles/${vin}/command/${command}`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${vehicleToken.accessToken}`,
          'Content-Type': 'application/json',
          'X-Signature': signature
        },
        body: commandData
      }
    );

    // If unauthorized, try refreshing token and retry once
    if (response.status === 401) {
      console.log(`🔄 Token expired for ${vin}, attempting refresh...`);
      const refreshSuccess = await refreshToken(vehicleToken);
      
      if (!refreshSuccess) {
        throw new Error('Token refresh failed');
      }

      // Retry with new token
      const retryResponse = await fetch(
        `https://fleet-api.prd.na.vn.cloud.tesla.com/api/1/vehicles/${vin}/command/${command}`,
        {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${vehicleToken.accessToken}`,
            'Content-Type': 'application/json',
            'X-Signature': signature
          },
          body: commandData
        }
      );

      if (!retryResponse.ok) {
        throw new Error(`Command failed after token refresh: ${retryResponse.status} ${retryResponse.statusText}`);
      }

      return await retryResponse.json();
    }

    if (!response.ok) {
      throw new Error(`Command failed: ${response.status} ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    throw error;
  }
}

// Honk horn endpoint
router.post('/user/vehicles/honkHorn', async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = req.body.user_id || req.query.user_id;
    const vin = req.body.vin || req.query.vin;
    
    if (!userId || !vin) {
      res.status(400).json({ error: 'user_id and vin are required' });
      return;
    }

    // Get access token from database
    const vehicleToken = await VehicleToken.findOne({
      where: { userId, vin }
    });

    if (!vehicleToken) {
      res.status(401).json({ error: 'No access token found for user and vehicle' });
      return;
    }

    // Create command data
    const commandData = JSON.stringify({
      command: 'honk_horn',
      vin: vin,
      timestamp: Date.now()
    });

    const result = await executeVehicleCommand(vehicleToken, vin, 'honk_horn', commandData);
    
    console.log(`✅ Honked horn for vehicle ${vin} (user: ${userId}):`, result);
    
    res.json({
      user_id: userId,
      vin: vin,
      result: result
    });

  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error occurred'
    });
  }
});

export default router;
</file>

<file path="src/types/tesla-api-toolkit.d.ts">
declare module 'tesla-api-toolkit' {
    export class VehicleError extends Error {
        constructor(message: string);
    }

    export class Vehicle {
        honkHorn(duration: number): Promise<void>;
    }

    export class VehicleCache {
        constructor(
            publicKeyPEM: string,
            privateKeyPEM: string,
            getAccessToken: (id: string) => Promise<string>,
            refreshAccessToken: (id: string) => Promise<string>
        );
        
        ensureVehicle(id: string, vin: string): Vehicle;
        containsVehicle(id: string): boolean;
        getVehicle(id: string): Vehicle;
    }
}
</file>

<file path="src/utils/tesla.ts">
import axios from 'axios';

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com/api/1';

export function createFleetClient(token: string) {
  return axios.create({
    baseURL: BASE_URL,
    headers: { Authorization: `Bearer ${token}` },
  });
}

export async function listVehicles(token: string) {
  const client = createFleetClient(token);
  const resp = await client.get('/vehicles');
  return resp.data;
}

// Further helpers, e.g., get vehicle state, send commands, etc.
</file>

<file path="src/db.ts">
import { Sequelize, DataTypes, Op, Model } from "sequelize";
import dotenv from "dotenv";
import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';
dotenv.config();

if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL environment variable is not set. Please check your .env file.');
}

export const sequelize = new Sequelize(process.env.DATABASE_URL, {
  dialect: "postgres",
  protocol: "postgres",
  logging: false,
});

// Test the database connection
sequelize.authenticate()
  .then(() => {
    console.log('Database connection has been established successfully.');
  })
  .catch(err => {
    console.error('Unable to connect to the database:', err);
  });

interface TokenResponse {
  access_token: string;
  refresh_token: string;
  expires_in: number;
}

interface VehicleTokenAttributes {
  userId: string;
  email: string | null;
  fullName: string | null;
  vin: string | null;
  vehicleId: string | null;
  idToken: string;
  refreshToken: string;
  accessToken: string;
  expiresAt: Date;
}

// define VehicleTokens model
export const VehicleToken = sequelize.define<Model<VehicleTokenAttributes>>('VehicleToken', {
  userId:      { type: DataTypes.STRING, allowNull: false },
  email:       { type: DataTypes.STRING, allowNull: true },
  fullName:    { type: DataTypes.STRING, allowNull: true },
  vin:         { type: DataTypes.STRING, allowNull: true },
  vehicleId:   { type: DataTypes.STRING, allowNull: true },
  idToken:     { type: DataTypes.TEXT,   allowNull: false },
  refreshToken:{ type: DataTypes.TEXT,   allowNull: false },
  accessToken: { type: DataTypes.TEXT,   allowNull: false },
  expiresAt:   { type: DataTypes.DATE,   allowNull: false },
}, {
  indexes: [
    { unique: true, fields: ["userId", "vin"] },
    { unique: true, fields: ["userId"] },
    { unique: true, fields: ["email"], where: { email: { [Op.ne]: null } } }
  ]
});

// Function to refresh a single token
export async function refreshToken(token: Model<VehicleTokenAttributes>): Promise<boolean> {
  try {
    const tokenData = token.get();
    const formData = new URLSearchParams();
    formData.append('grant_type', 'refresh_token');
    formData.append('client_id', process.env.CLIENT_ID!);
    formData.append('client_secret', process.env.CLIENT_SECRET!);
    formData.append('refresh_token', tokenData.refreshToken);

    const response = await fetch('https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: formData.toString()
    });

    if (!response.ok) {
      throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);
    }

    const tokenResponse = await response.json() as TokenResponse;
    
    await token.update({
      accessToken: tokenResponse.access_token,
      refreshToken: tokenResponse.refresh_token,
      expiresAt: new Date(Date.now() + tokenResponse.expires_in * 1000)
    });

    console.log(`🔄 Refreshed token for ${tokenData.userId}/${tokenData.vin}`);
    return true;
  } catch (e) {
    console.error('Token refresh failed:', e);
    return false;
  }
}

// Function to refresh expired tokens
export async function refreshExpired() {
  const now = new Date();
  const rows = await VehicleToken.findAll({ 
    where: { 
      expiresAt: { [Op.lt]: now }
    }
  });

  console.log(`Found ${rows.length} expired tokens to refresh`);
  
  for (const row of rows) {
    await refreshToken(row);
  }
}

// Initialize database
export async function initialiseDb() {
  try {
    // Sync tables
    await sequelize.sync({ alter: true });
    console.log('Database synchronized');
    
    // Start periodic token refresh (every 5 minutes)
    setInterval(refreshExpired, 5 * 60 * 1000);
    
    // Also refresh on startup
    await refreshExpired();
  } catch (e) {
    console.error('Database initialization failed:', e);
    throw e;
  }
}
</file>

<file path="src/server.ts">
import express from 'express';
import path from 'node:path';
import { config } from 'dotenv';
import { initialiseDb } from './db';
import healthRouter from './routes/health';
import authRouter from './routes/extractToken';
import vehiclesRouter from './routes/vehicles';

config();  // loads .env into process.env

const app = express();
const PORT = process.env.PORT ?? 3000;

// JSON body parser if you need POST/JSON
app.use(express.json());

// Serve static files under /.well-known for Tesla to fetch public key
app.use(
  '/.well-known',
  express.static(path.join(__dirname, '..', 'public', '.well-known'))
);

// Mount routes
app.use('/health', healthRouter);
app.use('/', authRouter);
app.use('/', vehiclesRouter);

// Boot sequence
(async () => {
  await initialiseDb();
})();

app.listen(PORT, () => {
  console.log(`🚀 Server listening on http://localhost:${PORT}`);
});
</file>

<file path="vehicleReq/charging/charging_history">
#!/usr/bin/env node
// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/dx/charging/history`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/charging/charging_invoice">
#!/usr/bin/env node
// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/dx/charging/invoice/${process.env.TESLA_VEHICLE_ID}`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/userEndpoints/feature_config">
#!/usr/bin/env node
// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/users/feature_config`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/userEndpoints/me">
#!/usr/bin/env node
// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/users/me`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/userEndpoints/orders">
#!/usr/bin/env node
// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/users/orders`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/userEndpoints/region">
#!/usr/bin/env node
// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/users/region`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/actuate_trunk">
#!/usr/bin/env node
/* Controls the front (which_trunk: "front") or rear (which_trunk: "rear") trunk. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "which_trunk": "front"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/actuate_trunk`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/add_charge_schedule">
#!/usr/bin/env node
/* Add a schedule for vehicle charging. To view existing schedules, call the vehicle_data endpoint and request charge_schedule_data. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "lat": 37.7576928,
    "lon": -122.4787994,
    "id": 123,
    "days_of_week": "Monday,Tuesday",
    "start_enabled": true,
    "start_time": 60,
    "end_enabled": true,
    "end_time": 690,
    "one_time": false,
    "enabled": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/add_charge_schedule`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/add_precondition_schedule">
#!/usr/bin/env node
/* Add or modify a preconditioning schedule. To view existing schedules, call the vehicle_data endpoint and request preconditioning_schedule_data. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "lat": 37.7576928,
    "lon": -122.4787994,
    "id": 123,
    "days_of_week": "Monday,Thursday",
    "precondition_time": 60,
    "one_time": false,
    "enabled": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/add_precondition_schedule`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/adjust_volume">
#!/usr/bin/env node
/* Adjust vehicle media playback volume. This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "volume": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/adjust_volume`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/auto_conditioning_start">
#!/usr/bin/env node
/* Starts climate preconditioning. */ 

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/auto_conditioning_start`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/auto_conditioning_stop">
#!/usr/bin/env node
/* Stops climate preconditioning */ 

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/auto_conditioning_stop`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/cancel_software_update">
#!/usr/bin/env node
/* Cancels the countdown to install the vehicle software update. This operation will no longer work after the vehicle begins the software installation. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/cancel_software_update`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/charge_max_range">
#!/usr/bin/env node
/* Sets the charge limit to the vehicle's maximum range (100%). */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/charge_max_range`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/charge_port_door_close">
#!/usr/bin/env node
/* Closes the vehicle charge port door. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/charge_port_door_close`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/charge_port_door_open">
#!/usr/bin/env node
/* Opens the vehicle charge port door. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/charge_port_door_open`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/charge_standard">
#!/usr/bin/env node
/* Sets the charge limit to the vehicle's standard charge limit (typically 80-90%). */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/charge_standard`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/charge_start">
#!/usr/bin/env node
/* Starts vehicle charging. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/charge_start`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/charge_stop">
#!/usr/bin/env node
/* Stops vehicle charging. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/charge_stop`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/clear_pin_to_drive_admin">
#!/usr/bin/env node
/* Clears the pin to drive admin setting for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/clear_pin_to_drive_admin`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/door_lock">
#!/usr/bin/env node
/* Locks the vehicle doors. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/door_lock`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/door_unlock">
#!/usr/bin/env node
/* Unlocks the vehicle doors. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/door_unlock`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/erase_user_data">
#!/usr/bin/env node
/* Erases user data from the vehicle. This is irreversible. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/erase_user_data`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/flash_lights">
#!/usr/bin/env node
/* Flashes the vehicle lights. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/flash_lights`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/guest_mode">
#!/usr/bin/env node
/* Enables or disables guest mode for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "enable": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/guest_mode`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/honk_horn">
#!/usr/bin/env node

/* Honks the vehicle horn. */

/* Load environment variables from fleet.env */
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/honk_horn`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/media_next_fav">
#!/usr/bin/env node
/* Skips to the next favorite in media playback. This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/media_next_fav`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/media_next_track">
#!/usr/bin/env node
/* Skips to the next track in media playback. This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/media_next_track`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/media_prev_fav">
#!/usr/bin/env node
/* Skips to the previous favorite in media playback. This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/media_prev_fav`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/media_prev_track">
#!/usr/bin/env node
/* Skips to the previous track in media playback. This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/media_prev_track`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/media_toggle_playback">
#!/usr/bin/env node
/* Toggles media playback (play/pause). This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/media_toggle_playback`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/media_volume_down">
#!/usr/bin/env node
/* Turns the media volume down. This command requires the user to be present and mobile access to be enabled. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/media_volume_down`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/navigation_gps_request">
#!/usr/bin/env node
/* Sends a GPS navigation request to the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "lat": 37.7749,
    "lon": -122.4194,
    "order": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/navigation_gps_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/navigation_request">
#!/usr/bin/env node
/* Sends a navigation request to the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "type": "share_ext_content_raw",
    "value": {
        "android.intent.ACTION": "android.intent.action.SEND",
        "android.intent.TYPE": "text/plain",
        "android.intent.TEXT": "3500 Deer Creek Rd, Palo Alto, CA 94304",
        "android.intent.extra.TEXT": "3500 Deer Creek Rd, Palo Alto, CA 94304"
    },
    "locale": "en-US",
    "timestamp_ms": "1689291250000"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/navigation_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/navigation_sc_request">
#!/usr/bin/env node
/* Sends a supercharger navigation request to the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "id": 1234,
    "order": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/navigation_sc_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/navigation_waypoints_request">
#!/usr/bin/env node
/* Sends a navigation waypoints request to the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "waypoints": "refId:ChIJIQBpAG2ahYAR_6128GcTUEo,refId:ChIJw____96GhYARCVVwg5cT7c0"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/navigation_waypoints_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_auto_seat_climate_request">
#!/usr/bin/env node
/* Controls automatic seat climate based on cabin temperature. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "auto_seat_position": 1,
    "auto_climate_on": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_auto_seat_climate_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_auto_steering_wheel_heat_climate_request">
#!/usr/bin/env node
/* Controls automatic steering wheel heating based on cabin temperature. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_auto_steering_wheel_heat_climate_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_boombox">
#!/usr/bin/env node
/* Plays sound using the vehicle's external speaker system. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "sound": 2000
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_boombox`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_seat_cooler_request">
#!/usr/bin/env node
/* Controls the seat cooler for a specific seat. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "seat_position": 1,
    "seat_cooler_level": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_seat_cooler_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_seat_heater_request">
#!/usr/bin/env node
/* Controls the seat heater for a specific seat. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "seat_position": 1,
    "level": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_seat_heater_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_start_drive">
#!/usr/bin/env node
/* Enables remote start for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_start_drive`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_steering_wheel_heat_level_request">
#!/usr/bin/env node
/* Sets the steering wheel heater level. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "level": 3
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_steering_wheel_heat_level_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remote_steering_wheel_heater_request">
#!/usr/bin/env node
/* Controls the steering wheel heater. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remote_steering_wheel_heater_request`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remove_charge_schedule">
#!/usr/bin/env node
/* Removes a charge schedule from the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "id": 123
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remove_charge_schedule`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/remove_precondition_schedule">
#!/usr/bin/env node
/* Removes a precondition schedule from the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "id": 123
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/remove_precondition_schedule`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/reset_pin_to_drive_pin">
#!/usr/bin/env node
/* Resets the pin to drive PIN for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/reset_pin_to_drive_pin`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/reset_valet_pin">
#!/usr/bin/env node
/* Resets the valet PIN for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/reset_valet_pin`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/schedule_software_update">
#!/usr/bin/env node
/* Schedules a software update for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "offset_sec": 3600
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/schedule_software_update`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_bioweapon_mode">
#!/usr/bin/env node
/* Enables or disables bioweapon defense mode. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true,
    "manual_override": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_bioweapon_mode`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_cabin_overheat_protection">
#!/usr/bin/env node
/* Enables or disables cabin overheat protection. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true,
    "fan_only": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_cabin_overheat_protection`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_charge_limit">
#!/usr/bin/env node
/* Sets the vehicle charge limit to a specific percentage. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "percent": 80
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_charge_limit`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_charging_amps">
#!/usr/bin/env node
/* Sets the vehicle charging amperage. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "charging_amps": 32
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_charging_amps`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_climate_keeper_mode">
#!/usr/bin/env node
/* Sets the climate keeper mode. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "climate_keeper_mode": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_climate_keeper_mode`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_cop_temp">
#!/usr/bin/env node
/* Sets the cabin overheat protection temperature. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "cop_temp": 1
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_cop_temp`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_pin_to_drive">
#!/usr/bin/env node
/* Sets or enables pin to drive for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true,
    "password": "1234"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_pin_to_drive`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_preconditioning_max">
#!/usr/bin/env node
/* Sets the maximum preconditioning temperature. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true,
    "manual_override": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_preconditioning_max`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_scheduled_charging">
#!/usr/bin/env node
/* Sets the scheduled charging time. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "enable": true,
    "time": 120
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_scheduled_charging`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_scheduled_departure">
#!/usr/bin/env node
/* Sets the scheduled departure time. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "enable": true,
    "departure_time": 120,
    "off_peak_charging_enabled": false,
    "off_peak_charging_weekdays_only": true,
    "preconditioning_enabled": true,
    "end_off_peak_time": 120
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_scheduled_departure`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_sentry_mode">
#!/usr/bin/env node
/* Enables or disables sentry mode. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_sentry_mode`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_temps">
#!/usr/bin/env node
/* Sets the temperature for the driver and passenger seats. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "driver_temp": 70,
    "passenger_temp": 70
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_temps`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_valet_mode">
#!/usr/bin/env node
/* Enables or disables valet mode. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "on": true,
    "password": "1234"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_valet_mode`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/set_vehicle_name">
#!/usr/bin/env node
/* Sets the vehicle name. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "vehicle_name": "My Tesla"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/set_vehicle_name`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/speed_limit_activate">
#!/usr/bin/env node
/* Activates the speed limit for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "pin": "1234"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/speed_limit_activate`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/speed_limit_clear_pin">
#!/usr/bin/env node
/* Clears the speed limit PIN for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "pin": "1234"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/speed_limit_clear_pin`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/speed_limit_clear_pin_admin">
#!/usr/bin/env node
/* Clears the speed limit PIN admin setting for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/speed_limit_clear_pin_admin`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/speed_limit_deactivate">
#!/usr/bin/env node
/* Deactivates the speed limit for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "pin": "1234"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/speed_limit_deactivate`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/speed_limit_set_limit">
#!/usr/bin/env node
/* Sets the speed limit for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "limit_mph": 65
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/speed_limit_set_limit`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/sun_roof_control">
#!/usr/bin/env node
/* Controls the vehicle sunroof. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "state": "vent"
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/sun_roof_control`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/trigger_homelink">
#!/usr/bin/env node
/* Triggers the HomeLink device for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "lat": 37.7749,
    "lon": -122.4194
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/trigger_homelink`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/upcoming_calendar_entries">
#!/usr/bin/env node
/* Gets upcoming calendar entries for the vehicle. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/upcoming_calendar_entries`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleCommands/window_control">
#!/usr/bin/env node
/* Controls the vehicle windows. */

// Load environment variables from fleet.env
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const body = {
    "command": "vent",
    "lat": 37.7749,
    "lon": -122.4194
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/command/window_control`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/drivers">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/drivers`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/drivers_remove">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'DELETE',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/drivers`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/eligible_subscriptions">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/dx/vehicles/subscriptions/eligibility?vin={vin}`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/eligible_upgrades">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/dx/vehicles/upgrades/eligibility?vin={vin}`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/fleet_status">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const body = {
    "vins": [
        process.env.VIN
    ]
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};
fetch(`${BASE_URL}/api/1/vehicles/fleet_status`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/fleet_telemetry_config_create">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://localhost:4443';

const body = {
    "config": {
        "delivery_policy": "latest",
        "prefer_typed": true,
        "port": 3000,
        "exp": 1704067200,
        "alert_types": [
            "service"
        ],
        "fields": {
            "`<field_to_stream>`": {
                "resend_interval_seconds": 3600,
                "minimum_delta": 1,
                "interval_seconds": 1800
            }
        },
        "ca": "-----BEGIN CERTIFICATE-----\ncert\n-----END CERTIFICATE-----\n",
        "hostname": "barnacle-pleasing-heavily.ngrok-free.app"
    },
    "vins": [
        `${process.env.TESLA_VEHICLE_ID}`,
    ]
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/fleet_telemetry_config`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/fleet_telemetry_config_delete">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'DELETE',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/fleet_telemetry_config`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/fleet_telemetry_config_get">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/fleet_telemetry_config`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/fleet_telemetry_config_jws">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const body = {
    "token": "jws_token",
    "vins": [
        "vin1",
        "vin2"
    ]
}

const options = {
    method: 'POST',
    body: JSON.stringify(body),
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/fleet_telemetry_config_jws`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/fleet_telemetry_errors">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/fleet_telemetry_errors`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/list">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/mobile_enabled">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/mobile_enabled`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/nearbly_charging_sites">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/nearby_charging_sites`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/options">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/dx/vehicles/options?vin={vin}`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/recent_alerts">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/recent_alerts`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/release_notes">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/release_notes`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/service_data">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/service_data`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/share_invites">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/invitations`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/share_invites_create">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/invitations`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/share_invites_redeem">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/invitations/redeem`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/share_invites_revoke">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/invitations/{id}/revoke`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/signed_command">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/signed_command`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/subscriptions">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/subscriptions`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/subscriptions_set">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/subscriptions`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/vehicle">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/vehicle_data">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/vehicle_data`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/vehicle_subscriptions">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicle_subscriptions`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/vehicle_subscriptions_set">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });
const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicle_subscriptions`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/wake_up">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';
const vin = process.env.TESLA_VEHICLE_ID;

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/vehicles/${vin}/wake_up`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/vehicleEndpoints/warranty_details">
#!/usr/bin/env node
require('dotenv').config({ path: '../../fleet.env' });

const BASE_URL = 'https://fleet-api.prd.na.vn.cloud.tesla.com';

const options = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.TP_TOKEN}`
    }
};

fetch(`${BASE_URL}/api/1/dx/warranty/details`, options)
    .then(res => res.json())
    .then(res => console.log(res))
    .catch(err => console.log('error', err));
</file>

<file path="vehicleReq/mapsReq.js">
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Load environment variables from fleet.env
function loadEnvVars() {
    const envPath = path.join(__dirname, '..', 'fleet.env');
    try {
        const envContent = fs.readFileSync(envPath, 'utf8');
        const envVars = {};
        
        envContent.split('\n').forEach(line => {
            // Skip comments and empty lines
            if (line.startsWith('#') || !line.trim()) return;
            
            // Extract key and value, handling quotes
            const match = line.match(/^([^=]+)=(?:'([^']*)'|"([^"]*)"|(.*))/);
            if (match) {
                const key = match[1].trim();
                // Use the first non-undefined value from the captured groups
                const value = match[2] || match[3] || match[4] || '';
                envVars[key] = value;
            }
        });
        
        return envVars;
    } catch (error) {
        console.error('❌ Error loading environment variables:', error.message);
        process.exit(1);
    }
}

async function sendNavigationRequest(destination) {
    const env = loadEnvVars();
    
    if (!env.TP_TOKEN) {
        console.error('❌ TP_TOKEN not found in environment variables');
        process.exit(1);
    }
    
    if (!env.TESLA_VEHICLE_ID) {
        console.error('❌ TESLA_VEHICLE_ID not found in environment variables');
        process.exit(1);
    }
    
    // Use Google Maps link for autocomplete/typed destinations
    const GOOGLE_LINK = `https://maps.google.com/?q=${encodeURIComponent(destination)}`;
    
    console.log('🚗 Sending navigation request to Tesla API...');
    console.log(`📍 Destination: ${destination}`);
    
    try {
        const response = await fetch(
            `https://fleet-api.prd.na.vn.cloud.tesla.com/api/1/vehicles/${env.TESLA_VEHICLE_ID}/command/navigation_request`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${env.TP_TOKEN}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    locale: 'en-US',
                    timestamp_ms: Date.now(),
                    type: 'share_ext_content_raw',
                    value: { 'android.intent.extra.TEXT': GOOGLE_LINK },
                }),
            }
        );
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(`API request failed: ${data.error || response.statusText}`);
        }
        
        console.log('✅ Navigation request sent successfully!');
        console.log('Response:', JSON.stringify(data, null, 2));
        return data;
        
    } catch (error) {
        console.error('❌ Error sending navigation request:', error.message);
        process.exit(1);
    }
}

// Main function to handle interactive input
async function main() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    console.log('🗺️  Tesla Navigation Request');
    console.log('==========================\n');
    
    const destination = await new Promise((resolve) => {
        rl.question('Enter destination: ', (answer) => {
            resolve(answer.trim());
        });
    });
    
    if (!destination) {
        console.error('❌ No destination provided');
        rl.close();
        process.exit(1);
    }
    
    await sendNavigationRequest(destination);
    rl.close();
}

// Handle command line arguments or run interactive mode
if (process.argv.length > 2) {
    const destination = process.argv[2];
    sendNavigationRequest(destination).catch(console.error);
} else {
    main().catch(console.error);
}
</file>

<file path=".gitignore">
*.env
*.pem
</file>

<file path="directory.php">
tesla-fleet/                      # ← repo root
├─ src/                           # TypeScript source
│  ├─ server.ts                   # Express entry (creates app, starts ngrok if you like)
│  │
│  ├─ routes/
│  │   ├─ health.ts              # GET /health  → { status:"ok" }
│  │   ├─ vehicles.ts            # Vehicle-related routes
│  │   └─ extractToken.ts        # GET /extractToken  (OAuth redirect handler)
│  │
│  └─ utils/
│      └─ tesla.ts               # helper that wraps axios/fetch → Fleet API
│
├─ scripts/                       # Utility scripts
│  ├─ authCodeTokenReq           # Auth code token request script
│  ├─ confirmPublicKey           # Public key confirmation
│  ├─ confirmRegisteredDomain.sh # Domain registration check
│  ├─ copyPublicKey.sh          # Copy public key script
│  ├─ hostPublicKey             # Host public key script
│  ├─ ngrokTunnelRequest.sh     # Ngrok tunnel setup
│  ├─ partnerTokenGenerate      # Generate partner token
│  ├─ refreshToAccess.sh        # Refresh token to access token
│  ├─ refreshTokenGenerate      # Generate refresh token
│  ├─ registerEndpoint.sh       # Register endpoint script
│  ├─ update-callback.js        # Update callback URL
│  ├─ update-code.js           # Update auth code
│  ├─ update-tokens.js         # Update tokens
│  └─ viewTokens.sh            # View stored tokens
│
├─ vehicleReq/                   # Vehicle-related requests
│  ├─ charging/
│  │   ├─ charging_history      # Charging history endpoints
│  │   └─ charging_invoice      # Charging invoice endpoints
│  │
│  ├─ userEndpoints/
│  │   ├─ feature_config       # Feature configuration
│  │   ├─ me                   # User info
│  │   ├─ orders              # Orders info
│  │   └─ region              # Region settings
│  │
│  ├─ vehicleCommands/         # Vehicle control commands
│  │   ├─ actuate_trunk
│  │   ├─ auto_conditioning_start
│  │   ├─ charge_control/
│  │   ├─ climate_control/
│  │   ├─ door_control/
│  │   ├─ media_control/
│  │   ├─ navigation/
│  │   ├─ remote_control/
│  │   └─ settings/
│  │
│  ├─ vehicleEndpoints/        # Vehicle data endpoints
│  │   ├─ fleet_status
│  │   ├─ fleet_telemetry/
│  │   ├─ vehicle_data
│  │   ├─ vehicle
│  │   ├─ subscriptions/
│  │   └─ share_invites/
│  │
│  └─ mapsReq.js              # Maps-related requests
│
├─ public/
│  └─ .well-known/
│      └─ appspecific/
│          └─ com.tesla.3p.public-key.pem   # **exact** filename Tesla will fetch
│
├─ keys/                          # never commit to VCS
│  ├─ private-key.pem            # EC-256 private key  (git-ignored)
│  └─ com.tesla.3p.public-key.pem # copy of the PEM above for convenience
│
├─ views/                         # View templates
│  └─ index.js                   # Main view file
│
├─ fleet.env                      # Environment variables for Fleet API
├─ token.env                      # Token-related environment variables
├─ setup-tesla-integration.sh     # Setup script for Tesla integration
├─ test-integration.js           # Integration test script
├─ test-oauth-url.js            # OAuth URL test script
├─ analyze-oauth-vs-partner.js   # OAuth vs Partner analysis
├─ comprehensive-oauth-test.js   # Comprehensive OAuth testing
├─ debug-oauth.sh               # OAuth debugging script
├─ .gitignore                   # node_modules, dist/, .env, keys/, etc.
├─ package.json                 # deps + scripts  (start/dev/build)
├─ package-lock.json            # auto-generated lockfile
├─ tsconfig.json               # compiler settings (rootDir=src, outDir=dist)
├─ README.md                   # project notes / setup instructions
└─ dist/                      # compiled JS (created by `npm run build`, not committed)
</file>

<file path="docker-compose.yml">
services:
  fleet_telemetry:
    image: tesla/fleet-telemetry:latest
    container_name: fleet_telemetry
    depends_on:
      - tesla_http_proxy
    ports: 
      - "8443:443"
    volumes:
      - ./telemetry-config.json:/app/config.json:ro
      - ./config:/config:ro
    command:
      - /fleet-telemetry
      - -config=/app/config.json
  db:
    image: postgres:17
    container_name: tesla_tokens_db
    environment:
      POSTGRES_DB: tesla_tokens_db
      POSTGRES_USER: rishabhmohapatra
      POSTGRES_PASSWORD: thebigflute2006
    ports:
      - "5433:5432"  # Changed host port to 5433, container still uses 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data

  api:
    build: .
    container_name: tesla_fleet_api
    depends_on:
      - db
      - tesla_http_proxy
    environment:
      DATABASE_URL: postgres://rishabhmohapatra:thebigflute2006@db:5432/tesla_tokens_db
      JWT_SECRET: development-secret
      NODE_ENV: development
      PROXY_URL: http://tesla_http_proxy:4443
      NODE_EXTRA_CA_CERTS: /usr/src/app/config/tls-cert.pem
      NODE_OPTIONS: "--use-system-ca"
    ports:
      - "3000:3000"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  tesla_http_proxy:
    image: tesla/vehicle-command:latest
    container_name: tesla_http_proxy
    ports:
      - "4443:4443"
    environment:
      TESLA_HTTP_PROXY_TLS_CERT: /config/tls-cert.pem
      TESLA_HTTP_PROXY_TLS_KEY: /config/tls-key.pem
      TESLA_HTTP_PROXY_HOST: 0.0.0.0
      TESLA_HTTP_PROXY_PORT: 4443
      TESLA_HTTP_PROXY_TIMEOUT: 10s
      TESLA_KEY_FILE: /config/fleet-key.pem
      TESLA_VERBOSE: "true"
    volumes:
      - ./config:/config

volumes:
  postgres_data:
</file>

<file path="Dockerfile">
FROM node:24-slim

#1) Install OS CA tools
RUN apt-get update && apt-get install -y ca-certificates

WORKDIR /usr/src/app

COPY package*.json ./

RUN npm install

COPY . .

# 3) Add the proxy’s cert into the system trust store
COPY config/tls-cert.pem /usr/local/share/ca-certificates/tls-cert.pem
RUN update-ca-certificates

RUN npm run build

EXPOSE 3000

CMD [ "npm", "run", "dev"]
</file>

<file path="nginx.conf">
#uncomment this next line if you are NOT running nginx in docker
#load_module /usr/lib/nginx/modules/ngx_stream_module.so;

events {}

stream {
  upstream k3s_servers {
    server 192.168.60.20:6443;
    server 192.168.60.21:6443;
  }

  server {
    listen 6443;
    proxy_pass k3s_servers;
  }
}
</file>

<file path="package.json">
{
  "name": "tesla-fleet-api",
  "version": "1.0.0",
  "description": "",
  "main": "src/server.ts",
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only src/server.ts",
    "build": "tsc",
    "start": "ts-node src/server.ts"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "@types/jsonwebtoken": "^9.0.10",
    "axios": "^1.10.0",
    "dotenv": "^16.6.1",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "node-fetch": "^3.3.2",
    "pg": "^8.16.3",
    "pg-hstore": "^2.3.4",
    "sequelize": "^6.37.7"
  },
  "devDependencies": {
    "@types/express": "^5.0.3",
    "@types/node": "^24.0.3",
    "@types/sequelize": "^4.28.20",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.8.3"
  }
}
</file>

<file path="README.md">
# Tesla Fleet API Integration (Official OAuth)

This project now uses the official Tesla Fleet API OAuth flow for authentication, as described in the [Tesla Fleet API documentation](https://developer.tesla.com/docs/fleet-api/authentication/third-party-tokens).

## Prerequisites

1. **Tesla Developer Account**: You must have a registered and approved Tesla developer account
2. **Node.js**: Version 16 or higher
3. **ngrok**: For exposing your local server to the internet
4. **Register your redirect URI**: In the Tesla developer portal, add your ngrok domain with `/extractToken` as an allowed redirect URI (e.g., `https://your-ngrok-domain.ngrok-free.app/extractToken`)
5. **Your official client ID**: Use the client ID (UUID) from your Tesla developer portal

## Key Files

- **Private Key**: `keys/private-key.pem` (for vehicle command signing, if needed)
- **Public Key**: `public/.well-known/appspecific/com.tesla.3p.public-key.pem` (for vehicle key pairing, if needed)

## Setup Instructions

### 1. Environment Configuration

Create a `fleet.env` file in the root directory with your ngrok domain and client ID:

```bash
CLIENT_ID='your-client-id-from-tesla-portal'
NGROK_DOMAIN='your-ngrok-domain.ngrok-free.app'
```

### 2. Install Dependencies

```bash
npm install
```

### 3. Start the Server

```bash
npm start
```

The server will start on `http://localhost:3000`.

### 4. Expose Server with ngrok

```bash
ngrok http 3000
```

Note the ngrok URL (e.g., `https://abc123.ngrok-free.app`).

### 5. Register Redirect URI in Tesla Developer Portal

- Go to your Tesla developer portal
- Add your ngrok domain with `/extractToken` as an allowed redirect URI
  - Example: `https://abc123.ngrok-free.app/extractToken`

### 6. Authenticate with Tesla (Official OAuth)

1. **Generate the OAuth URL:**
   - Use the following format:
     ```
     https://auth.tesla.com/oauth2/v3/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=https://your-ngrok-domain.ngrok-free.app/extractToken&response_type=code&scope=openid%20email%20offline_access&state=test
     ```
   - You can generate this URL using `node test-oauth-url.js`.

2. **Visit the OAuth URL in your browser**
   - Log in and consent to the requested permissions
   - Tesla will redirect to your `/extractToken` endpoint with a `code` parameter

3. **Your backend exchanges the code for tokens**
   - The `/extractToken` endpoint will POST to:
     - `https://auth.tesla.com/oauth2/v3/token`
     - With:
       - `grant_type=authorization_code`
       - `client_id=YOUR_CLIENT_ID`
       - `code=...`
       - `redirect_uri=https://your-ngrok-domain.ngrok-free.app/extractToken`
   - The response will include an access token and refresh token

4. **Use the access token to call the Fleet API**
   - Use the returned access token as a Bearer token for API calls

## API Endpoints

### Authentication
- `GET /extractToken` - Handles the OAuth code exchange and returns tokens

## Troubleshooting

- **"unauthorized_client" error:**
  - Make sure you are using your official client ID in the OAuth URL and token exchange
  - Make sure your redirect URI matches exactly what is registered in the Tesla developer portal
  - Use only the scopes: `openid email offline_access`
  - Try the OAuth URL in an incognito browser window

- **Other issues:**
  - Check server logs for error messages
  - Make sure ngrok is running and accessible
  - Ensure your Tesla developer account is approved for third-party API access

## File Structure

```
tesla-fleet/
├── src/
│   ├── routes/
│   │   └── auth.ts          # Authentication endpoint (official OAuth)
│   └── server.ts            # Main server file
├── keys/
│   └── private-key.pem      # EC private key for signing commands (if needed)
├── public/
│   └── .well-known/
│       └── appspecific/
│           └── com.tesla.3p.public-key.pem       # EC public key for pairing (if needed)
├── fleet.env                # Environment variables (DO NOT COMMIT)
├── test-oauth-url.js        # Script to generate the OAuth URL
└── README.md                # This file
```

## Notes
- This project now uses the official Tesla Fleet API OAuth flow.
- Use your official client ID from the Tesla developer portal.
- You do not need a client secret for the third-party flow.
- All user authentication is handled via the official OAuth flow and access tokens.
</file>

<file path="telemetry-config.json">
{
    "host": "0.0.0.0",
    "port": 443,
    "log_level": "info",
    "json_log_enable": true,
    "namespace": "tesla",
    "reliable_ack": false,
    "transmit_decoded_records": true,
    "records": { "V": ["logger"], "alerts": ["logger"], "errors": ["logger"] },
    "tls": {
      "server_cert": "/etc/certs/server/tls-cert.pem",
      "server_key": "/etc/certs/server/tls-key.pem"
    }
  }
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "src",                                    /* Specify the root folder within your source files. */
    "typeRoots": ["./node_modules/@types", "./src/types"],  /* Include our custom type definitions */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "dist",                                    /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
</file>

<file path="values.yaml">
# values.yaml
replicaCount: 1

service:
  type: LoadBalancer
  ports:
    - name: https
      port: 443
      targetPort: 8443    # chart default

tlsSecret:
  # Name of the Kubernetes TLS secret we created above
  name: telemetry-tls
  create: false

config:
  data:
    host: "0.0.0.0"
    port: 8443
    log_level: "info"
    json_log_enable: true
    namespace: "tesla"
    reliable_ack: false
    transmit_decoded_records: true
    records:
      V: ["logger"]
      alerts: ["logger"]
      errors: ["logger"]
    tls:
      server_cert: "/etc/certs/server/tls-cert.pem"
      server_key: "/etc/certs/server/tls-key.pem"

# No need to set server_cert/server_key here—Helm will mount the secret automatically
</file>

</files>
