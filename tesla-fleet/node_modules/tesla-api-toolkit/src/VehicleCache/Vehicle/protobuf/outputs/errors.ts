// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: errors.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "Errors";

export enum GenericErrorE {
  GENERICERROR_NONE = 0,
  GENERICERROR_UNKNOWN = 1,
  GENERICERROR_CLOSURES_OPEN = 2,
  GENERICERROR_ALREADY_ON = 3,
  GENERICERROR_DISABLED_FOR_USER_COMMAND = 4,
  GENERICERROR_VEHICLE_NOT_IN_PARK = 5,
  GENERICERROR_UNAUTHORIZED = 6,
  GENERICERROR_NOT_ALLOWED_OVER_TRANSPORT = 7,
  UNRECOGNIZED = -1,
}

export function genericErrorEFromJSON(object: any): GenericErrorE {
  switch (object) {
    case 0:
    case "GENERICERROR_NONE":
      return GenericErrorE.GENERICERROR_NONE;
    case 1:
    case "GENERICERROR_UNKNOWN":
      return GenericErrorE.GENERICERROR_UNKNOWN;
    case 2:
    case "GENERICERROR_CLOSURES_OPEN":
      return GenericErrorE.GENERICERROR_CLOSURES_OPEN;
    case 3:
    case "GENERICERROR_ALREADY_ON":
      return GenericErrorE.GENERICERROR_ALREADY_ON;
    case 4:
    case "GENERICERROR_DISABLED_FOR_USER_COMMAND":
      return GenericErrorE.GENERICERROR_DISABLED_FOR_USER_COMMAND;
    case 5:
    case "GENERICERROR_VEHICLE_NOT_IN_PARK":
      return GenericErrorE.GENERICERROR_VEHICLE_NOT_IN_PARK;
    case 6:
    case "GENERICERROR_UNAUTHORIZED":
      return GenericErrorE.GENERICERROR_UNAUTHORIZED;
    case 7:
    case "GENERICERROR_NOT_ALLOWED_OVER_TRANSPORT":
      return GenericErrorE.GENERICERROR_NOT_ALLOWED_OVER_TRANSPORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GenericErrorE.UNRECOGNIZED;
  }
}

export function genericErrorEToJSON(object: GenericErrorE): string {
  switch (object) {
    case GenericErrorE.GENERICERROR_NONE:
      return "GENERICERROR_NONE";
    case GenericErrorE.GENERICERROR_UNKNOWN:
      return "GENERICERROR_UNKNOWN";
    case GenericErrorE.GENERICERROR_CLOSURES_OPEN:
      return "GENERICERROR_CLOSURES_OPEN";
    case GenericErrorE.GENERICERROR_ALREADY_ON:
      return "GENERICERROR_ALREADY_ON";
    case GenericErrorE.GENERICERROR_DISABLED_FOR_USER_COMMAND:
      return "GENERICERROR_DISABLED_FOR_USER_COMMAND";
    case GenericErrorE.GENERICERROR_VEHICLE_NOT_IN_PARK:
      return "GENERICERROR_VEHICLE_NOT_IN_PARK";
    case GenericErrorE.GENERICERROR_UNAUTHORIZED:
      return "GENERICERROR_UNAUTHORIZED";
    case GenericErrorE.GENERICERROR_NOT_ALLOWED_OVER_TRANSPORT:
      return "GENERICERROR_NOT_ALLOWED_OVER_TRANSPORT";
    case GenericErrorE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NominalError {
  genericError: GenericErrorE;
}

function createBaseNominalError(): NominalError {
  return { genericError: 0 };
}

export const NominalError: MessageFns<NominalError> = {
  encode(message: NominalError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genericError !== 0) {
      writer.uint32(8).int32(message.genericError);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NominalError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNominalError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.genericError = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NominalError {
    return { genericError: isSet(object.genericError) ? genericErrorEFromJSON(object.genericError) : 0 };
  },

  toJSON(message: NominalError): unknown {
    const obj: any = {};
    if (message.genericError !== 0) {
      obj.genericError = genericErrorEToJSON(message.genericError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NominalError>, I>>(base?: I): NominalError {
    return NominalError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NominalError>, I>>(object: I): NominalError {
    const message = createBaseNominalError();
    message.genericError = object.genericError ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
