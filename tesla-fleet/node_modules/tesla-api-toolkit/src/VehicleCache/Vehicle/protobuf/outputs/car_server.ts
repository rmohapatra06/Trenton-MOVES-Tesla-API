// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: car_server.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  ChargeSchedule,
  LatLong,
  OffPeakChargingTimes,
  PreconditioningTimes,
  PreconditionSchedule,
  Void,
} from "./common";
import { Timestamp } from "./google/protobuf/timestamp";
import { SessionInfo } from "./signatures";
import {
  ClimateState_CopActivationTemp,
  climateState_CopActivationTempFromJSON,
  climateState_CopActivationTempToJSON,
  VehicleState_GuestMode,
} from "./vehicle";

export const protobufPackage = "CarServer";

export enum OperationStatusE {
  OPERATIONSTATUS_OK = 0,
  OPERATIONSTATUS_ERROR = 1,
  UNRECOGNIZED = -1,
}

export function operationStatusEFromJSON(object: any): OperationStatusE {
  switch (object) {
    case 0:
    case "OPERATIONSTATUS_OK":
      return OperationStatusE.OPERATIONSTATUS_OK;
    case 1:
    case "OPERATIONSTATUS_ERROR":
      return OperationStatusE.OPERATIONSTATUS_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationStatusE.UNRECOGNIZED;
  }
}

export function operationStatusEToJSON(object: OperationStatusE): string {
  switch (object) {
    case OperationStatusE.OPERATIONSTATUS_OK:
      return "OPERATIONSTATUS_OK";
    case OperationStatusE.OPERATIONSTATUS_ERROR:
      return "OPERATIONSTATUS_ERROR";
    case OperationStatusE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Action {
  vehicleAction?: VehicleAction | undefined;
}

export interface VehicleAction {
  chargingSetLimitAction?: ChargingSetLimitAction | undefined;
  chargingStartStopAction?: ChargingStartStopAction | undefined;
  drivingClearSpeedLimitPinAction?: DrivingClearSpeedLimitPinAction | undefined;
  drivingSetSpeedLimitAction?: DrivingSetSpeedLimitAction | undefined;
  drivingSpeedLimitAction?: DrivingSpeedLimitAction | undefined;
  hvacAutoAction?: HvacAutoAction | undefined;
  hvacSetPreconditioningMaxAction?: HvacSetPreconditioningMaxAction | undefined;
  hvacSteeringWheelHeaterAction?: HvacSteeringWheelHeaterAction | undefined;
  hvacTemperatureAdjustmentAction?: HvacTemperatureAdjustmentAction | undefined;
  mediaPlayAction?: MediaPlayAction | undefined;
  mediaUpdateVolume?: MediaUpdateVolume | undefined;
  mediaNextFavorite?: MediaNextFavorite | undefined;
  mediaPreviousFavorite?: MediaPreviousFavorite | undefined;
  mediaNextTrack?: MediaNextTrack | undefined;
  mediaPreviousTrack?: MediaPreviousTrack | undefined;
  getNearbyChargingSites?: GetNearbyChargingSites | undefined;
  vehicleControlCancelSoftwareUpdateAction?: VehicleControlCancelSoftwareUpdateAction | undefined;
  vehicleControlFlashLightsAction?: VehicleControlFlashLightsAction | undefined;
  vehicleControlHonkHornAction?: VehicleControlHonkHornAction | undefined;
  vehicleControlResetValetPinAction?: VehicleControlResetValetPinAction | undefined;
  vehicleControlScheduleSoftwareUpdateAction?: VehicleControlScheduleSoftwareUpdateAction | undefined;
  vehicleControlSetSentryModeAction?: VehicleControlSetSentryModeAction | undefined;
  vehicleControlSetValetModeAction?: VehicleControlSetValetModeAction | undefined;
  vehicleControlSunroofOpenCloseAction?: VehicleControlSunroofOpenCloseAction | undefined;
  vehicleControlTriggerHomelinkAction?: VehicleControlTriggerHomelinkAction | undefined;
  vehicleControlWindowAction?: VehicleControlWindowAction | undefined;
  hvacBioweaponModeAction?: HvacBioweaponModeAction | undefined;
  hvacSeatHeaterActions?: HvacSeatHeaterActions | undefined;
  scheduledChargingAction?: ScheduledChargingAction | undefined;
  scheduledDepartureAction?: ScheduledDepartureAction | undefined;
  setChargingAmpsAction?: SetChargingAmpsAction | undefined;
  hvacClimateKeeperAction?: HvacClimateKeeperAction | undefined;
  ping?: Ping | undefined;
  autoSeatClimateAction?: AutoSeatClimateAction | undefined;
  hvacSeatCoolerActions?: HvacSeatCoolerActions | undefined;
  setCabinOverheatProtectionAction?: SetCabinOverheatProtectionAction | undefined;
  setVehicleNameAction?: SetVehicleNameAction | undefined;
  chargePortDoorClose?: ChargePortDoorClose | undefined;
  chargePortDoorOpen?: ChargePortDoorOpen | undefined;
  guestModeAction?: VehicleState_GuestMode | undefined;
  setCopTempAction?: SetCopTempAction | undefined;
  eraseUserDataAction?: EraseUserDataAction | undefined;
  vehicleControlSetPinToDriveAction?: VehicleControlSetPinToDriveAction | undefined;
  vehicleControlResetPinToDriveAction?: VehicleControlResetPinToDriveAction | undefined;
  addChargeScheduleAction?: ChargeSchedule | undefined;
  removeChargeScheduleAction?: RemoveChargeScheduleAction | undefined;
  addPreconditionScheduleAction?: PreconditionSchedule | undefined;
  removePreconditionScheduleAction?: RemovePreconditionScheduleAction | undefined;
  batchRemovePreconditionSchedulesAction?: BatchRemovePreconditionSchedulesAction | undefined;
  batchRemoveChargeSchedulesAction?: BatchRemoveChargeSchedulesAction | undefined;
}

export interface EraseUserDataAction {
  reason: string;
}

export interface Response {
  actionStatus: ActionStatus | undefined;
  getSessionInfoResponse?: SessionInfo | undefined;
  getNearbyChargingSites?: NearbyChargingSites | undefined;
  ping?: Ping | undefined;
}

export interface ActionStatus {
  result: OperationStatusE;
  resultReason: ResultReason | undefined;
}

export interface ResultReason {
  plainText?: string | undefined;
}

export interface EncryptedData {
  fieldNumber: number;
  ciphertext: Uint8Array;
  tag: Uint8Array;
}

export interface ChargingSetLimitAction {
  percent: number;
}

export interface ChargingStartStopAction {
  unknown?: Void | undefined;
  start?: Void | undefined;
  startStandard?: Void | undefined;
  startMaxRange?: Void | undefined;
  stop?: Void | undefined;
}

export interface DrivingClearSpeedLimitPinAction {
  pin: string;
}

export interface DrivingSetSpeedLimitAction {
  limitMph: number;
}

export interface DrivingSpeedLimitAction {
  activate: boolean;
  pin: string;
}

export interface HvacAutoAction {
  powerOn?: boolean | undefined;
  manualOverride?: boolean | undefined;
}

export interface HvacSeatHeaterActions {
  hvacSeatHeaterAction: HvacSeatHeaterActions_HvacSeatHeaterAction[];
}

export interface HvacSeatHeaterActions_HvacSeatHeaterAction {
  seatHeaterUnknown?: Void | undefined;
  seatHeaterOff?: Void | undefined;
  seatHeaterLow?: Void | undefined;
  seatHeaterMed?: Void | undefined;
  seatHeaterHigh?: Void | undefined;
  carSeatUnknown?: Void | undefined;
  carSeatFrontLeft?: Void | undefined;
  carSeatFrontRight?: Void | undefined;
  carSeatRearLeft?: Void | undefined;
  carSeatRearLeftBack?: Void | undefined;
  carSeatRearCenter?: Void | undefined;
  carSeatRearRight?: Void | undefined;
  carSeatRearRightBack?: Void | undefined;
  carSeatThirdRowLeft?: Void | undefined;
  carSeatThirdRowRight?: Void | undefined;
}

export interface HvacSeatCoolerActions {
  hvacSeatCoolerAction: HvacSeatCoolerActions_HvacSeatCoolerAction[];
}

export enum HvacSeatCoolerActions_HvacSeatCoolerLevelE {
  HvacSeatCoolerLevel_Unknown = 0,
  HvacSeatCoolerLevel_Off = 1,
  HvacSeatCoolerLevel_Low = 2,
  HvacSeatCoolerLevel_Med = 3,
  HvacSeatCoolerLevel_High = 4,
  UNRECOGNIZED = -1,
}

export function hvacSeatCoolerActions_HvacSeatCoolerLevelEFromJSON(
  object: any,
): HvacSeatCoolerActions_HvacSeatCoolerLevelE {
  switch (object) {
    case 0:
    case "HvacSeatCoolerLevel_Unknown":
      return HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Unknown;
    case 1:
    case "HvacSeatCoolerLevel_Off":
      return HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Off;
    case 2:
    case "HvacSeatCoolerLevel_Low":
      return HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Low;
    case 3:
    case "HvacSeatCoolerLevel_Med":
      return HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Med;
    case 4:
    case "HvacSeatCoolerLevel_High":
      return HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_High;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HvacSeatCoolerActions_HvacSeatCoolerLevelE.UNRECOGNIZED;
  }
}

export function hvacSeatCoolerActions_HvacSeatCoolerLevelEToJSON(
  object: HvacSeatCoolerActions_HvacSeatCoolerLevelE,
): string {
  switch (object) {
    case HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Unknown:
      return "HvacSeatCoolerLevel_Unknown";
    case HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Off:
      return "HvacSeatCoolerLevel_Off";
    case HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Low:
      return "HvacSeatCoolerLevel_Low";
    case HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_Med:
      return "HvacSeatCoolerLevel_Med";
    case HvacSeatCoolerActions_HvacSeatCoolerLevelE.HvacSeatCoolerLevel_High:
      return "HvacSeatCoolerLevel_High";
    case HvacSeatCoolerActions_HvacSeatCoolerLevelE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HvacSeatCoolerActions_HvacSeatCoolerPositionE {
  HvacSeatCoolerPosition_Unknown = 0,
  HvacSeatCoolerPosition_FrontLeft = 1,
  HvacSeatCoolerPosition_FrontRight = 2,
  UNRECOGNIZED = -1,
}

export function hvacSeatCoolerActions_HvacSeatCoolerPositionEFromJSON(
  object: any,
): HvacSeatCoolerActions_HvacSeatCoolerPositionE {
  switch (object) {
    case 0:
    case "HvacSeatCoolerPosition_Unknown":
      return HvacSeatCoolerActions_HvacSeatCoolerPositionE.HvacSeatCoolerPosition_Unknown;
    case 1:
    case "HvacSeatCoolerPosition_FrontLeft":
      return HvacSeatCoolerActions_HvacSeatCoolerPositionE.HvacSeatCoolerPosition_FrontLeft;
    case 2:
    case "HvacSeatCoolerPosition_FrontRight":
      return HvacSeatCoolerActions_HvacSeatCoolerPositionE.HvacSeatCoolerPosition_FrontRight;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HvacSeatCoolerActions_HvacSeatCoolerPositionE.UNRECOGNIZED;
  }
}

export function hvacSeatCoolerActions_HvacSeatCoolerPositionEToJSON(
  object: HvacSeatCoolerActions_HvacSeatCoolerPositionE,
): string {
  switch (object) {
    case HvacSeatCoolerActions_HvacSeatCoolerPositionE.HvacSeatCoolerPosition_Unknown:
      return "HvacSeatCoolerPosition_Unknown";
    case HvacSeatCoolerActions_HvacSeatCoolerPositionE.HvacSeatCoolerPosition_FrontLeft:
      return "HvacSeatCoolerPosition_FrontLeft";
    case HvacSeatCoolerActions_HvacSeatCoolerPositionE.HvacSeatCoolerPosition_FrontRight:
      return "HvacSeatCoolerPosition_FrontRight";
    case HvacSeatCoolerActions_HvacSeatCoolerPositionE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HvacSeatCoolerActions_HvacSeatCoolerAction {
  seatCoolerLevel: HvacSeatCoolerActions_HvacSeatCoolerLevelE;
  seatPosition: HvacSeatCoolerActions_HvacSeatCoolerPositionE;
}

export interface HvacSetPreconditioningMaxAction {
  on: boolean;
  manualOverride: boolean;
  manualOverrideMode: HvacSetPreconditioningMaxAction_ManualOverrideModeE[];
}

export enum HvacSetPreconditioningMaxAction_ManualOverrideModeE {
  DogMode = 0,
  Soc = 1,
  Doors = 2,
  UNRECOGNIZED = -1,
}

export function hvacSetPreconditioningMaxAction_ManualOverrideModeEFromJSON(
  object: any,
): HvacSetPreconditioningMaxAction_ManualOverrideModeE {
  switch (object) {
    case 0:
    case "DogMode":
      return HvacSetPreconditioningMaxAction_ManualOverrideModeE.DogMode;
    case 1:
    case "Soc":
      return HvacSetPreconditioningMaxAction_ManualOverrideModeE.Soc;
    case 2:
    case "Doors":
      return HvacSetPreconditioningMaxAction_ManualOverrideModeE.Doors;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HvacSetPreconditioningMaxAction_ManualOverrideModeE.UNRECOGNIZED;
  }
}

export function hvacSetPreconditioningMaxAction_ManualOverrideModeEToJSON(
  object: HvacSetPreconditioningMaxAction_ManualOverrideModeE,
): string {
  switch (object) {
    case HvacSetPreconditioningMaxAction_ManualOverrideModeE.DogMode:
      return "DogMode";
    case HvacSetPreconditioningMaxAction_ManualOverrideModeE.Soc:
      return "Soc";
    case HvacSetPreconditioningMaxAction_ManualOverrideModeE.Doors:
      return "Doors";
    case HvacSetPreconditioningMaxAction_ManualOverrideModeE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HvacSteeringWheelHeaterAction {
  powerOn: boolean;
}

export interface HvacTemperatureAdjustmentAction {
  deltaCelsius: number;
  deltaPercent: number;
  absoluteCelsius: number;
  level: HvacTemperatureAdjustmentAction_Temperature | undefined;
  hvacTemperatureZone: HvacTemperatureAdjustmentAction_HvacTemperatureZone[];
  driverTempCelsius: number;
  passengerTempCelsius: number;
}

export interface HvacTemperatureAdjustmentAction_Temperature {
  tempUnknown?: Void | undefined;
  tempMin?: Void | undefined;
  tempMax?: Void | undefined;
}

export interface HvacTemperatureAdjustmentAction_HvacTemperatureZone {
  tempZoneUnknown?: Void | undefined;
  tempZoneFrontLeft?: Void | undefined;
  tempZoneFrontRight?: Void | undefined;
  tempZoneRear?: Void | undefined;
}

export interface GetNearbyChargingSites {
  includeMetaData: boolean;
  radius: number;
  count: number;
}

export interface NearbyChargingSites {
  timestamp: Date | undefined;
  superchargers: Superchargers[];
  congestionSyncTimeUtcSecs: number;
}

export interface Superchargers {
  id: number;
  amenities: string;
  availableStalls: number;
  billingInfo: string;
  billingTime: string;
  city: string;
  country: string;
  distanceMiles: number;
  district: string;
  location: LatLong | undefined;
  name: string;
  postalCode: string;
  siteClosed: boolean;
  state: string;
  streetAddress: string;
  totalStalls: number;
  withinRange: boolean;
  maxPowerKw: number;
  outOfOrderStallsNumber: number;
  outOfOrderStallsNames: string;
}

export interface MediaPlayAction {
}

export interface MediaUpdateVolume {
  volumeDelta?: number | undefined;
  volumeAbsoluteFloat?: number | undefined;
}

export interface MediaNextFavorite {
}

export interface MediaPreviousFavorite {
}

export interface MediaNextTrack {
}

export interface MediaPreviousTrack {
}

export interface VehicleControlCancelSoftwareUpdateAction {
}

export interface VehicleControlFlashLightsAction {
}

export interface VehicleControlHonkHornAction {
}

export interface VehicleControlResetValetPinAction {
}

export interface VehicleControlScheduleSoftwareUpdateAction {
  offsetSec: number;
}

export interface VehicleControlSetSentryModeAction {
  on: boolean;
}

export interface VehicleControlSetValetModeAction {
  on: boolean;
  password: string;
}

export interface VehicleControlSunroofOpenCloseAction {
  absoluteLevel?: number | undefined;
  deltaLevel?: number | undefined;
  vent?: Void | undefined;
  close?: Void | undefined;
  open?: Void | undefined;
}

export interface VehicleControlTriggerHomelinkAction {
  location: LatLong | undefined;
  token: string;
}

export interface VehicleControlWindowAction {
  unknown?: Void | undefined;
  vent?: Void | undefined;
  close?: Void | undefined;
}

export interface HvacBioweaponModeAction {
  on: boolean;
  manualOverride: boolean;
}

export interface AutoSeatClimateAction {
  carseat: AutoSeatClimateAction_CarSeat[];
}

export enum AutoSeatClimateAction_AutoSeatPositionE {
  AutoSeatPosition_Unknown = 0,
  AutoSeatPosition_FrontLeft = 1,
  AutoSeatPosition_FrontRight = 2,
  UNRECOGNIZED = -1,
}

export function autoSeatClimateAction_AutoSeatPositionEFromJSON(object: any): AutoSeatClimateAction_AutoSeatPositionE {
  switch (object) {
    case 0:
    case "AutoSeatPosition_Unknown":
      return AutoSeatClimateAction_AutoSeatPositionE.AutoSeatPosition_Unknown;
    case 1:
    case "AutoSeatPosition_FrontLeft":
      return AutoSeatClimateAction_AutoSeatPositionE.AutoSeatPosition_FrontLeft;
    case 2:
    case "AutoSeatPosition_FrontRight":
      return AutoSeatClimateAction_AutoSeatPositionE.AutoSeatPosition_FrontRight;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AutoSeatClimateAction_AutoSeatPositionE.UNRECOGNIZED;
  }
}

export function autoSeatClimateAction_AutoSeatPositionEToJSON(object: AutoSeatClimateAction_AutoSeatPositionE): string {
  switch (object) {
    case AutoSeatClimateAction_AutoSeatPositionE.AutoSeatPosition_Unknown:
      return "AutoSeatPosition_Unknown";
    case AutoSeatClimateAction_AutoSeatPositionE.AutoSeatPosition_FrontLeft:
      return "AutoSeatPosition_FrontLeft";
    case AutoSeatClimateAction_AutoSeatPositionE.AutoSeatPosition_FrontRight:
      return "AutoSeatPosition_FrontRight";
    case AutoSeatClimateAction_AutoSeatPositionE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AutoSeatClimateAction_CarSeat {
  on: boolean;
  seatPosition: AutoSeatClimateAction_AutoSeatPositionE;
}

export interface Ping {
  pingId: number;
  localTimestamp: Date | undefined;
  lastRemoteTimestamp: Date | undefined;
}

export interface ScheduledChargingAction {
  enabled: boolean;
  chargingTime: number;
}

export interface ScheduledDepartureAction {
  enabled: boolean;
  departureTime: number;
  preconditioningTimes: PreconditioningTimes | undefined;
  offPeakChargingTimes: OffPeakChargingTimes | undefined;
  offPeakHoursEndTime: number;
}

export interface HvacClimateKeeperAction {
  ClimateKeeperAction: HvacClimateKeeperAction_ClimateKeeperActionE;
  manualOverride: boolean;
}

export enum HvacClimateKeeperAction_ClimateKeeperActionE {
  ClimateKeeperAction_Off = 0,
  ClimateKeeperAction_On = 1,
  ClimateKeeperAction_Dog = 2,
  ClimateKeeperAction_Camp = 3,
  UNRECOGNIZED = -1,
}

export function hvacClimateKeeperAction_ClimateKeeperActionEFromJSON(
  object: any,
): HvacClimateKeeperAction_ClimateKeeperActionE {
  switch (object) {
    case 0:
    case "ClimateKeeperAction_Off":
      return HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_Off;
    case 1:
    case "ClimateKeeperAction_On":
      return HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_On;
    case 2:
    case "ClimateKeeperAction_Dog":
      return HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_Dog;
    case 3:
    case "ClimateKeeperAction_Camp":
      return HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_Camp;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HvacClimateKeeperAction_ClimateKeeperActionE.UNRECOGNIZED;
  }
}

export function hvacClimateKeeperAction_ClimateKeeperActionEToJSON(
  object: HvacClimateKeeperAction_ClimateKeeperActionE,
): string {
  switch (object) {
    case HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_Off:
      return "ClimateKeeperAction_Off";
    case HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_On:
      return "ClimateKeeperAction_On";
    case HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_Dog:
      return "ClimateKeeperAction_Dog";
    case HvacClimateKeeperAction_ClimateKeeperActionE.ClimateKeeperAction_Camp:
      return "ClimateKeeperAction_Camp";
    case HvacClimateKeeperAction_ClimateKeeperActionE.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SetChargingAmpsAction {
  chargingAmps: number;
}

export interface RemoveChargeScheduleAction {
  /** datetime in epoch time */
  id: number;
}

export interface BatchRemoveChargeSchedulesAction {
  home: boolean;
  work: boolean;
  /** Delete non-home and non-work charge schedules */
  other: boolean;
}

export interface BatchRemovePreconditionSchedulesAction {
  home: boolean;
  work: boolean;
  /** Delete non-home and non-work precondition schedules */
  other: boolean;
}

export interface RemovePreconditionScheduleAction {
  /** datetime in epoch time */
  id: number;
}

export interface SetCabinOverheatProtectionAction {
  on: boolean;
  fanOnly: boolean;
}

export interface SetVehicleNameAction {
  vehicleName: string;
}

export interface ChargePortDoorClose {
}

export interface ChargePortDoorOpen {
}

export interface SetCopTempAction {
  copActivationTemp: ClimateState_CopActivationTemp;
}

export interface VehicleControlSetPinToDriveAction {
  on: boolean;
  password: string;
}

export interface VehicleControlResetPinToDriveAction {
}

function createBaseAction(): Action {
  return { vehicleAction: undefined };
}

export const Action: MessageFns<Action> = {
  encode(message: Action, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vehicleAction !== undefined) {
      VehicleAction.encode(message.vehicleAction, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Action {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vehicleAction = VehicleAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Action {
    return { vehicleAction: isSet(object.vehicleAction) ? VehicleAction.fromJSON(object.vehicleAction) : undefined };
  },

  toJSON(message: Action): unknown {
    const obj: any = {};
    if (message.vehicleAction !== undefined) {
      obj.vehicleAction = VehicleAction.toJSON(message.vehicleAction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Action>, I>>(base?: I): Action {
    return Action.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Action>, I>>(object: I): Action {
    const message = createBaseAction();
    message.vehicleAction = (object.vehicleAction !== undefined && object.vehicleAction !== null)
      ? VehicleAction.fromPartial(object.vehicleAction)
      : undefined;
    return message;
  },
};

function createBaseVehicleAction(): VehicleAction {
  return {
    chargingSetLimitAction: undefined,
    chargingStartStopAction: undefined,
    drivingClearSpeedLimitPinAction: undefined,
    drivingSetSpeedLimitAction: undefined,
    drivingSpeedLimitAction: undefined,
    hvacAutoAction: undefined,
    hvacSetPreconditioningMaxAction: undefined,
    hvacSteeringWheelHeaterAction: undefined,
    hvacTemperatureAdjustmentAction: undefined,
    mediaPlayAction: undefined,
    mediaUpdateVolume: undefined,
    mediaNextFavorite: undefined,
    mediaPreviousFavorite: undefined,
    mediaNextTrack: undefined,
    mediaPreviousTrack: undefined,
    getNearbyChargingSites: undefined,
    vehicleControlCancelSoftwareUpdateAction: undefined,
    vehicleControlFlashLightsAction: undefined,
    vehicleControlHonkHornAction: undefined,
    vehicleControlResetValetPinAction: undefined,
    vehicleControlScheduleSoftwareUpdateAction: undefined,
    vehicleControlSetSentryModeAction: undefined,
    vehicleControlSetValetModeAction: undefined,
    vehicleControlSunroofOpenCloseAction: undefined,
    vehicleControlTriggerHomelinkAction: undefined,
    vehicleControlWindowAction: undefined,
    hvacBioweaponModeAction: undefined,
    hvacSeatHeaterActions: undefined,
    scheduledChargingAction: undefined,
    scheduledDepartureAction: undefined,
    setChargingAmpsAction: undefined,
    hvacClimateKeeperAction: undefined,
    ping: undefined,
    autoSeatClimateAction: undefined,
    hvacSeatCoolerActions: undefined,
    setCabinOverheatProtectionAction: undefined,
    setVehicleNameAction: undefined,
    chargePortDoorClose: undefined,
    chargePortDoorOpen: undefined,
    guestModeAction: undefined,
    setCopTempAction: undefined,
    eraseUserDataAction: undefined,
    vehicleControlSetPinToDriveAction: undefined,
    vehicleControlResetPinToDriveAction: undefined,
    addChargeScheduleAction: undefined,
    removeChargeScheduleAction: undefined,
    addPreconditionScheduleAction: undefined,
    removePreconditionScheduleAction: undefined,
    batchRemovePreconditionSchedulesAction: undefined,
    batchRemoveChargeSchedulesAction: undefined,
  };
}

export const VehicleAction: MessageFns<VehicleAction> = {
  encode(message: VehicleAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chargingSetLimitAction !== undefined) {
      ChargingSetLimitAction.encode(message.chargingSetLimitAction, writer.uint32(42).fork()).join();
    }
    if (message.chargingStartStopAction !== undefined) {
      ChargingStartStopAction.encode(message.chargingStartStopAction, writer.uint32(50).fork()).join();
    }
    if (message.drivingClearSpeedLimitPinAction !== undefined) {
      DrivingClearSpeedLimitPinAction.encode(message.drivingClearSpeedLimitPinAction, writer.uint32(58).fork()).join();
    }
    if (message.drivingSetSpeedLimitAction !== undefined) {
      DrivingSetSpeedLimitAction.encode(message.drivingSetSpeedLimitAction, writer.uint32(66).fork()).join();
    }
    if (message.drivingSpeedLimitAction !== undefined) {
      DrivingSpeedLimitAction.encode(message.drivingSpeedLimitAction, writer.uint32(74).fork()).join();
    }
    if (message.hvacAutoAction !== undefined) {
      HvacAutoAction.encode(message.hvacAutoAction, writer.uint32(82).fork()).join();
    }
    if (message.hvacSetPreconditioningMaxAction !== undefined) {
      HvacSetPreconditioningMaxAction.encode(message.hvacSetPreconditioningMaxAction, writer.uint32(98).fork()).join();
    }
    if (message.hvacSteeringWheelHeaterAction !== undefined) {
      HvacSteeringWheelHeaterAction.encode(message.hvacSteeringWheelHeaterAction, writer.uint32(106).fork()).join();
    }
    if (message.hvacTemperatureAdjustmentAction !== undefined) {
      HvacTemperatureAdjustmentAction.encode(message.hvacTemperatureAdjustmentAction, writer.uint32(114).fork()).join();
    }
    if (message.mediaPlayAction !== undefined) {
      MediaPlayAction.encode(message.mediaPlayAction, writer.uint32(122).fork()).join();
    }
    if (message.mediaUpdateVolume !== undefined) {
      MediaUpdateVolume.encode(message.mediaUpdateVolume, writer.uint32(130).fork()).join();
    }
    if (message.mediaNextFavorite !== undefined) {
      MediaNextFavorite.encode(message.mediaNextFavorite, writer.uint32(138).fork()).join();
    }
    if (message.mediaPreviousFavorite !== undefined) {
      MediaPreviousFavorite.encode(message.mediaPreviousFavorite, writer.uint32(146).fork()).join();
    }
    if (message.mediaNextTrack !== undefined) {
      MediaNextTrack.encode(message.mediaNextTrack, writer.uint32(154).fork()).join();
    }
    if (message.mediaPreviousTrack !== undefined) {
      MediaPreviousTrack.encode(message.mediaPreviousTrack, writer.uint32(162).fork()).join();
    }
    if (message.getNearbyChargingSites !== undefined) {
      GetNearbyChargingSites.encode(message.getNearbyChargingSites, writer.uint32(186).fork()).join();
    }
    if (message.vehicleControlCancelSoftwareUpdateAction !== undefined) {
      VehicleControlCancelSoftwareUpdateAction.encode(
        message.vehicleControlCancelSoftwareUpdateAction,
        writer.uint32(202).fork(),
      ).join();
    }
    if (message.vehicleControlFlashLightsAction !== undefined) {
      VehicleControlFlashLightsAction.encode(message.vehicleControlFlashLightsAction, writer.uint32(210).fork()).join();
    }
    if (message.vehicleControlHonkHornAction !== undefined) {
      VehicleControlHonkHornAction.encode(message.vehicleControlHonkHornAction, writer.uint32(218).fork()).join();
    }
    if (message.vehicleControlResetValetPinAction !== undefined) {
      VehicleControlResetValetPinAction.encode(message.vehicleControlResetValetPinAction, writer.uint32(226).fork())
        .join();
    }
    if (message.vehicleControlScheduleSoftwareUpdateAction !== undefined) {
      VehicleControlScheduleSoftwareUpdateAction.encode(
        message.vehicleControlScheduleSoftwareUpdateAction,
        writer.uint32(234).fork(),
      ).join();
    }
    if (message.vehicleControlSetSentryModeAction !== undefined) {
      VehicleControlSetSentryModeAction.encode(message.vehicleControlSetSentryModeAction, writer.uint32(242).fork())
        .join();
    }
    if (message.vehicleControlSetValetModeAction !== undefined) {
      VehicleControlSetValetModeAction.encode(message.vehicleControlSetValetModeAction, writer.uint32(250).fork())
        .join();
    }
    if (message.vehicleControlSunroofOpenCloseAction !== undefined) {
      VehicleControlSunroofOpenCloseAction.encode(
        message.vehicleControlSunroofOpenCloseAction,
        writer.uint32(258).fork(),
      ).join();
    }
    if (message.vehicleControlTriggerHomelinkAction !== undefined) {
      VehicleControlTriggerHomelinkAction.encode(message.vehicleControlTriggerHomelinkAction, writer.uint32(266).fork())
        .join();
    }
    if (message.vehicleControlWindowAction !== undefined) {
      VehicleControlWindowAction.encode(message.vehicleControlWindowAction, writer.uint32(274).fork()).join();
    }
    if (message.hvacBioweaponModeAction !== undefined) {
      HvacBioweaponModeAction.encode(message.hvacBioweaponModeAction, writer.uint32(282).fork()).join();
    }
    if (message.hvacSeatHeaterActions !== undefined) {
      HvacSeatHeaterActions.encode(message.hvacSeatHeaterActions, writer.uint32(290).fork()).join();
    }
    if (message.scheduledChargingAction !== undefined) {
      ScheduledChargingAction.encode(message.scheduledChargingAction, writer.uint32(330).fork()).join();
    }
    if (message.scheduledDepartureAction !== undefined) {
      ScheduledDepartureAction.encode(message.scheduledDepartureAction, writer.uint32(338).fork()).join();
    }
    if (message.setChargingAmpsAction !== undefined) {
      SetChargingAmpsAction.encode(message.setChargingAmpsAction, writer.uint32(346).fork()).join();
    }
    if (message.hvacClimateKeeperAction !== undefined) {
      HvacClimateKeeperAction.encode(message.hvacClimateKeeperAction, writer.uint32(354).fork()).join();
    }
    if (message.ping !== undefined) {
      Ping.encode(message.ping, writer.uint32(370).fork()).join();
    }
    if (message.autoSeatClimateAction !== undefined) {
      AutoSeatClimateAction.encode(message.autoSeatClimateAction, writer.uint32(386).fork()).join();
    }
    if (message.hvacSeatCoolerActions !== undefined) {
      HvacSeatCoolerActions.encode(message.hvacSeatCoolerActions, writer.uint32(394).fork()).join();
    }
    if (message.setCabinOverheatProtectionAction !== undefined) {
      SetCabinOverheatProtectionAction.encode(message.setCabinOverheatProtectionAction, writer.uint32(402).fork())
        .join();
    }
    if (message.setVehicleNameAction !== undefined) {
      SetVehicleNameAction.encode(message.setVehicleNameAction, writer.uint32(434).fork()).join();
    }
    if (message.chargePortDoorClose !== undefined) {
      ChargePortDoorClose.encode(message.chargePortDoorClose, writer.uint32(490).fork()).join();
    }
    if (message.chargePortDoorOpen !== undefined) {
      ChargePortDoorOpen.encode(message.chargePortDoorOpen, writer.uint32(498).fork()).join();
    }
    if (message.guestModeAction !== undefined) {
      VehicleState_GuestMode.encode(message.guestModeAction, writer.uint32(522).fork()).join();
    }
    if (message.setCopTempAction !== undefined) {
      SetCopTempAction.encode(message.setCopTempAction, writer.uint32(530).fork()).join();
    }
    if (message.eraseUserDataAction !== undefined) {
      EraseUserDataAction.encode(message.eraseUserDataAction, writer.uint32(578).fork()).join();
    }
    if (message.vehicleControlSetPinToDriveAction !== undefined) {
      VehicleControlSetPinToDriveAction.encode(message.vehicleControlSetPinToDriveAction, writer.uint32(618).fork())
        .join();
    }
    if (message.vehicleControlResetPinToDriveAction !== undefined) {
      VehicleControlResetPinToDriveAction.encode(message.vehicleControlResetPinToDriveAction, writer.uint32(626).fork())
        .join();
    }
    if (message.addChargeScheduleAction !== undefined) {
      ChargeSchedule.encode(message.addChargeScheduleAction, writer.uint32(778).fork()).join();
    }
    if (message.removeChargeScheduleAction !== undefined) {
      RemoveChargeScheduleAction.encode(message.removeChargeScheduleAction, writer.uint32(786).fork()).join();
    }
    if (message.addPreconditionScheduleAction !== undefined) {
      PreconditionSchedule.encode(message.addPreconditionScheduleAction, writer.uint32(794).fork()).join();
    }
    if (message.removePreconditionScheduleAction !== undefined) {
      RemovePreconditionScheduleAction.encode(message.removePreconditionScheduleAction, writer.uint32(802).fork())
        .join();
    }
    if (message.batchRemovePreconditionSchedulesAction !== undefined) {
      BatchRemovePreconditionSchedulesAction.encode(
        message.batchRemovePreconditionSchedulesAction,
        writer.uint32(858).fork(),
      ).join();
    }
    if (message.batchRemoveChargeSchedulesAction !== undefined) {
      BatchRemoveChargeSchedulesAction.encode(message.batchRemoveChargeSchedulesAction, writer.uint32(866).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chargingSetLimitAction = ChargingSetLimitAction.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.chargingStartStopAction = ChargingStartStopAction.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.drivingClearSpeedLimitPinAction = DrivingClearSpeedLimitPinAction.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.drivingSetSpeedLimitAction = DrivingSetSpeedLimitAction.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.drivingSpeedLimitAction = DrivingSpeedLimitAction.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.hvacAutoAction = HvacAutoAction.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.hvacSetPreconditioningMaxAction = HvacSetPreconditioningMaxAction.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.hvacSteeringWheelHeaterAction = HvacSteeringWheelHeaterAction.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.hvacTemperatureAdjustmentAction = HvacTemperatureAdjustmentAction.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.mediaPlayAction = MediaPlayAction.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.mediaUpdateVolume = MediaUpdateVolume.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.mediaNextFavorite = MediaNextFavorite.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.mediaPreviousFavorite = MediaPreviousFavorite.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.mediaNextTrack = MediaNextTrack.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.mediaPreviousTrack = MediaPreviousTrack.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.getNearbyChargingSites = GetNearbyChargingSites.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.vehicleControlCancelSoftwareUpdateAction = VehicleControlCancelSoftwareUpdateAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.vehicleControlFlashLightsAction = VehicleControlFlashLightsAction.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.vehicleControlHonkHornAction = VehicleControlHonkHornAction.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.vehicleControlResetValetPinAction = VehicleControlResetValetPinAction.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.vehicleControlScheduleSoftwareUpdateAction = VehicleControlScheduleSoftwareUpdateAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.vehicleControlSetSentryModeAction = VehicleControlSetSentryModeAction.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.vehicleControlSetValetModeAction = VehicleControlSetValetModeAction.decode(reader, reader.uint32());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.vehicleControlSunroofOpenCloseAction = VehicleControlSunroofOpenCloseAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.vehicleControlTriggerHomelinkAction = VehicleControlTriggerHomelinkAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.vehicleControlWindowAction = VehicleControlWindowAction.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.hvacBioweaponModeAction = HvacBioweaponModeAction.decode(reader, reader.uint32());
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.hvacSeatHeaterActions = HvacSeatHeaterActions.decode(reader, reader.uint32());
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.scheduledChargingAction = ScheduledChargingAction.decode(reader, reader.uint32());
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.scheduledDepartureAction = ScheduledDepartureAction.decode(reader, reader.uint32());
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.setChargingAmpsAction = SetChargingAmpsAction.decode(reader, reader.uint32());
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.hvacClimateKeeperAction = HvacClimateKeeperAction.decode(reader, reader.uint32());
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.ping = Ping.decode(reader, reader.uint32());
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.autoSeatClimateAction = AutoSeatClimateAction.decode(reader, reader.uint32());
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.hvacSeatCoolerActions = HvacSeatCoolerActions.decode(reader, reader.uint32());
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.setCabinOverheatProtectionAction = SetCabinOverheatProtectionAction.decode(reader, reader.uint32());
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.setVehicleNameAction = SetVehicleNameAction.decode(reader, reader.uint32());
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.chargePortDoorClose = ChargePortDoorClose.decode(reader, reader.uint32());
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.chargePortDoorOpen = ChargePortDoorOpen.decode(reader, reader.uint32());
          continue;
        }
        case 65: {
          if (tag !== 522) {
            break;
          }

          message.guestModeAction = VehicleState_GuestMode.decode(reader, reader.uint32());
          continue;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.setCopTempAction = SetCopTempAction.decode(reader, reader.uint32());
          continue;
        }
        case 72: {
          if (tag !== 578) {
            break;
          }

          message.eraseUserDataAction = EraseUserDataAction.decode(reader, reader.uint32());
          continue;
        }
        case 77: {
          if (tag !== 618) {
            break;
          }

          message.vehicleControlSetPinToDriveAction = VehicleControlSetPinToDriveAction.decode(reader, reader.uint32());
          continue;
        }
        case 78: {
          if (tag !== 626) {
            break;
          }

          message.vehicleControlResetPinToDriveAction = VehicleControlResetPinToDriveAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 97: {
          if (tag !== 778) {
            break;
          }

          message.addChargeScheduleAction = ChargeSchedule.decode(reader, reader.uint32());
          continue;
        }
        case 98: {
          if (tag !== 786) {
            break;
          }

          message.removeChargeScheduleAction = RemoveChargeScheduleAction.decode(reader, reader.uint32());
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.addPreconditionScheduleAction = PreconditionSchedule.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.removePreconditionScheduleAction = RemovePreconditionScheduleAction.decode(reader, reader.uint32());
          continue;
        }
        case 107: {
          if (tag !== 858) {
            break;
          }

          message.batchRemovePreconditionSchedulesAction = BatchRemovePreconditionSchedulesAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 108: {
          if (tag !== 866) {
            break;
          }

          message.batchRemoveChargeSchedulesAction = BatchRemoveChargeSchedulesAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleAction {
    return {
      chargingSetLimitAction: isSet(object.chargingSetLimitAction)
        ? ChargingSetLimitAction.fromJSON(object.chargingSetLimitAction)
        : undefined,
      chargingStartStopAction: isSet(object.chargingStartStopAction)
        ? ChargingStartStopAction.fromJSON(object.chargingStartStopAction)
        : undefined,
      drivingClearSpeedLimitPinAction: isSet(object.drivingClearSpeedLimitPinAction)
        ? DrivingClearSpeedLimitPinAction.fromJSON(object.drivingClearSpeedLimitPinAction)
        : undefined,
      drivingSetSpeedLimitAction: isSet(object.drivingSetSpeedLimitAction)
        ? DrivingSetSpeedLimitAction.fromJSON(object.drivingSetSpeedLimitAction)
        : undefined,
      drivingSpeedLimitAction: isSet(object.drivingSpeedLimitAction)
        ? DrivingSpeedLimitAction.fromJSON(object.drivingSpeedLimitAction)
        : undefined,
      hvacAutoAction: isSet(object.hvacAutoAction) ? HvacAutoAction.fromJSON(object.hvacAutoAction) : undefined,
      hvacSetPreconditioningMaxAction: isSet(object.hvacSetPreconditioningMaxAction)
        ? HvacSetPreconditioningMaxAction.fromJSON(object.hvacSetPreconditioningMaxAction)
        : undefined,
      hvacSteeringWheelHeaterAction: isSet(object.hvacSteeringWheelHeaterAction)
        ? HvacSteeringWheelHeaterAction.fromJSON(object.hvacSteeringWheelHeaterAction)
        : undefined,
      hvacTemperatureAdjustmentAction: isSet(object.hvacTemperatureAdjustmentAction)
        ? HvacTemperatureAdjustmentAction.fromJSON(object.hvacTemperatureAdjustmentAction)
        : undefined,
      mediaPlayAction: isSet(object.mediaPlayAction) ? MediaPlayAction.fromJSON(object.mediaPlayAction) : undefined,
      mediaUpdateVolume: isSet(object.mediaUpdateVolume)
        ? MediaUpdateVolume.fromJSON(object.mediaUpdateVolume)
        : undefined,
      mediaNextFavorite: isSet(object.mediaNextFavorite)
        ? MediaNextFavorite.fromJSON(object.mediaNextFavorite)
        : undefined,
      mediaPreviousFavorite: isSet(object.mediaPreviousFavorite)
        ? MediaPreviousFavorite.fromJSON(object.mediaPreviousFavorite)
        : undefined,
      mediaNextTrack: isSet(object.mediaNextTrack) ? MediaNextTrack.fromJSON(object.mediaNextTrack) : undefined,
      mediaPreviousTrack: isSet(object.mediaPreviousTrack)
        ? MediaPreviousTrack.fromJSON(object.mediaPreviousTrack)
        : undefined,
      getNearbyChargingSites: isSet(object.getNearbyChargingSites)
        ? GetNearbyChargingSites.fromJSON(object.getNearbyChargingSites)
        : undefined,
      vehicleControlCancelSoftwareUpdateAction: isSet(object.vehicleControlCancelSoftwareUpdateAction)
        ? VehicleControlCancelSoftwareUpdateAction.fromJSON(object.vehicleControlCancelSoftwareUpdateAction)
        : undefined,
      vehicleControlFlashLightsAction: isSet(object.vehicleControlFlashLightsAction)
        ? VehicleControlFlashLightsAction.fromJSON(object.vehicleControlFlashLightsAction)
        : undefined,
      vehicleControlHonkHornAction: isSet(object.vehicleControlHonkHornAction)
        ? VehicleControlHonkHornAction.fromJSON(object.vehicleControlHonkHornAction)
        : undefined,
      vehicleControlResetValetPinAction: isSet(object.vehicleControlResetValetPinAction)
        ? VehicleControlResetValetPinAction.fromJSON(object.vehicleControlResetValetPinAction)
        : undefined,
      vehicleControlScheduleSoftwareUpdateAction: isSet(object.vehicleControlScheduleSoftwareUpdateAction)
        ? VehicleControlScheduleSoftwareUpdateAction.fromJSON(object.vehicleControlScheduleSoftwareUpdateAction)
        : undefined,
      vehicleControlSetSentryModeAction: isSet(object.vehicleControlSetSentryModeAction)
        ? VehicleControlSetSentryModeAction.fromJSON(object.vehicleControlSetSentryModeAction)
        : undefined,
      vehicleControlSetValetModeAction: isSet(object.vehicleControlSetValetModeAction)
        ? VehicleControlSetValetModeAction.fromJSON(object.vehicleControlSetValetModeAction)
        : undefined,
      vehicleControlSunroofOpenCloseAction: isSet(object.vehicleControlSunroofOpenCloseAction)
        ? VehicleControlSunroofOpenCloseAction.fromJSON(object.vehicleControlSunroofOpenCloseAction)
        : undefined,
      vehicleControlTriggerHomelinkAction: isSet(object.vehicleControlTriggerHomelinkAction)
        ? VehicleControlTriggerHomelinkAction.fromJSON(object.vehicleControlTriggerHomelinkAction)
        : undefined,
      vehicleControlWindowAction: isSet(object.vehicleControlWindowAction)
        ? VehicleControlWindowAction.fromJSON(object.vehicleControlWindowAction)
        : undefined,
      hvacBioweaponModeAction: isSet(object.hvacBioweaponModeAction)
        ? HvacBioweaponModeAction.fromJSON(object.hvacBioweaponModeAction)
        : undefined,
      hvacSeatHeaterActions: isSet(object.hvacSeatHeaterActions)
        ? HvacSeatHeaterActions.fromJSON(object.hvacSeatHeaterActions)
        : undefined,
      scheduledChargingAction: isSet(object.scheduledChargingAction)
        ? ScheduledChargingAction.fromJSON(object.scheduledChargingAction)
        : undefined,
      scheduledDepartureAction: isSet(object.scheduledDepartureAction)
        ? ScheduledDepartureAction.fromJSON(object.scheduledDepartureAction)
        : undefined,
      setChargingAmpsAction: isSet(object.setChargingAmpsAction)
        ? SetChargingAmpsAction.fromJSON(object.setChargingAmpsAction)
        : undefined,
      hvacClimateKeeperAction: isSet(object.hvacClimateKeeperAction)
        ? HvacClimateKeeperAction.fromJSON(object.hvacClimateKeeperAction)
        : undefined,
      ping: isSet(object.ping) ? Ping.fromJSON(object.ping) : undefined,
      autoSeatClimateAction: isSet(object.autoSeatClimateAction)
        ? AutoSeatClimateAction.fromJSON(object.autoSeatClimateAction)
        : undefined,
      hvacSeatCoolerActions: isSet(object.hvacSeatCoolerActions)
        ? HvacSeatCoolerActions.fromJSON(object.hvacSeatCoolerActions)
        : undefined,
      setCabinOverheatProtectionAction: isSet(object.setCabinOverheatProtectionAction)
        ? SetCabinOverheatProtectionAction.fromJSON(object.setCabinOverheatProtectionAction)
        : undefined,
      setVehicleNameAction: isSet(object.setVehicleNameAction)
        ? SetVehicleNameAction.fromJSON(object.setVehicleNameAction)
        : undefined,
      chargePortDoorClose: isSet(object.chargePortDoorClose)
        ? ChargePortDoorClose.fromJSON(object.chargePortDoorClose)
        : undefined,
      chargePortDoorOpen: isSet(object.chargePortDoorOpen)
        ? ChargePortDoorOpen.fromJSON(object.chargePortDoorOpen)
        : undefined,
      guestModeAction: isSet(object.guestModeAction)
        ? VehicleState_GuestMode.fromJSON(object.guestModeAction)
        : undefined,
      setCopTempAction: isSet(object.setCopTempAction) ? SetCopTempAction.fromJSON(object.setCopTempAction) : undefined,
      eraseUserDataAction: isSet(object.eraseUserDataAction)
        ? EraseUserDataAction.fromJSON(object.eraseUserDataAction)
        : undefined,
      vehicleControlSetPinToDriveAction: isSet(object.vehicleControlSetPinToDriveAction)
        ? VehicleControlSetPinToDriveAction.fromJSON(object.vehicleControlSetPinToDriveAction)
        : undefined,
      vehicleControlResetPinToDriveAction: isSet(object.vehicleControlResetPinToDriveAction)
        ? VehicleControlResetPinToDriveAction.fromJSON(object.vehicleControlResetPinToDriveAction)
        : undefined,
      addChargeScheduleAction: isSet(object.addChargeScheduleAction)
        ? ChargeSchedule.fromJSON(object.addChargeScheduleAction)
        : undefined,
      removeChargeScheduleAction: isSet(object.removeChargeScheduleAction)
        ? RemoveChargeScheduleAction.fromJSON(object.removeChargeScheduleAction)
        : undefined,
      addPreconditionScheduleAction: isSet(object.addPreconditionScheduleAction)
        ? PreconditionSchedule.fromJSON(object.addPreconditionScheduleAction)
        : undefined,
      removePreconditionScheduleAction: isSet(object.removePreconditionScheduleAction)
        ? RemovePreconditionScheduleAction.fromJSON(object.removePreconditionScheduleAction)
        : undefined,
      batchRemovePreconditionSchedulesAction: isSet(object.batchRemovePreconditionSchedulesAction)
        ? BatchRemovePreconditionSchedulesAction.fromJSON(object.batchRemovePreconditionSchedulesAction)
        : undefined,
      batchRemoveChargeSchedulesAction: isSet(object.batchRemoveChargeSchedulesAction)
        ? BatchRemoveChargeSchedulesAction.fromJSON(object.batchRemoveChargeSchedulesAction)
        : undefined,
    };
  },

  toJSON(message: VehicleAction): unknown {
    const obj: any = {};
    if (message.chargingSetLimitAction !== undefined) {
      obj.chargingSetLimitAction = ChargingSetLimitAction.toJSON(message.chargingSetLimitAction);
    }
    if (message.chargingStartStopAction !== undefined) {
      obj.chargingStartStopAction = ChargingStartStopAction.toJSON(message.chargingStartStopAction);
    }
    if (message.drivingClearSpeedLimitPinAction !== undefined) {
      obj.drivingClearSpeedLimitPinAction = DrivingClearSpeedLimitPinAction.toJSON(
        message.drivingClearSpeedLimitPinAction,
      );
    }
    if (message.drivingSetSpeedLimitAction !== undefined) {
      obj.drivingSetSpeedLimitAction = DrivingSetSpeedLimitAction.toJSON(message.drivingSetSpeedLimitAction);
    }
    if (message.drivingSpeedLimitAction !== undefined) {
      obj.drivingSpeedLimitAction = DrivingSpeedLimitAction.toJSON(message.drivingSpeedLimitAction);
    }
    if (message.hvacAutoAction !== undefined) {
      obj.hvacAutoAction = HvacAutoAction.toJSON(message.hvacAutoAction);
    }
    if (message.hvacSetPreconditioningMaxAction !== undefined) {
      obj.hvacSetPreconditioningMaxAction = HvacSetPreconditioningMaxAction.toJSON(
        message.hvacSetPreconditioningMaxAction,
      );
    }
    if (message.hvacSteeringWheelHeaterAction !== undefined) {
      obj.hvacSteeringWheelHeaterAction = HvacSteeringWheelHeaterAction.toJSON(message.hvacSteeringWheelHeaterAction);
    }
    if (message.hvacTemperatureAdjustmentAction !== undefined) {
      obj.hvacTemperatureAdjustmentAction = HvacTemperatureAdjustmentAction.toJSON(
        message.hvacTemperatureAdjustmentAction,
      );
    }
    if (message.mediaPlayAction !== undefined) {
      obj.mediaPlayAction = MediaPlayAction.toJSON(message.mediaPlayAction);
    }
    if (message.mediaUpdateVolume !== undefined) {
      obj.mediaUpdateVolume = MediaUpdateVolume.toJSON(message.mediaUpdateVolume);
    }
    if (message.mediaNextFavorite !== undefined) {
      obj.mediaNextFavorite = MediaNextFavorite.toJSON(message.mediaNextFavorite);
    }
    if (message.mediaPreviousFavorite !== undefined) {
      obj.mediaPreviousFavorite = MediaPreviousFavorite.toJSON(message.mediaPreviousFavorite);
    }
    if (message.mediaNextTrack !== undefined) {
      obj.mediaNextTrack = MediaNextTrack.toJSON(message.mediaNextTrack);
    }
    if (message.mediaPreviousTrack !== undefined) {
      obj.mediaPreviousTrack = MediaPreviousTrack.toJSON(message.mediaPreviousTrack);
    }
    if (message.getNearbyChargingSites !== undefined) {
      obj.getNearbyChargingSites = GetNearbyChargingSites.toJSON(message.getNearbyChargingSites);
    }
    if (message.vehicleControlCancelSoftwareUpdateAction !== undefined) {
      obj.vehicleControlCancelSoftwareUpdateAction = VehicleControlCancelSoftwareUpdateAction.toJSON(
        message.vehicleControlCancelSoftwareUpdateAction,
      );
    }
    if (message.vehicleControlFlashLightsAction !== undefined) {
      obj.vehicleControlFlashLightsAction = VehicleControlFlashLightsAction.toJSON(
        message.vehicleControlFlashLightsAction,
      );
    }
    if (message.vehicleControlHonkHornAction !== undefined) {
      obj.vehicleControlHonkHornAction = VehicleControlHonkHornAction.toJSON(message.vehicleControlHonkHornAction);
    }
    if (message.vehicleControlResetValetPinAction !== undefined) {
      obj.vehicleControlResetValetPinAction = VehicleControlResetValetPinAction.toJSON(
        message.vehicleControlResetValetPinAction,
      );
    }
    if (message.vehicleControlScheduleSoftwareUpdateAction !== undefined) {
      obj.vehicleControlScheduleSoftwareUpdateAction = VehicleControlScheduleSoftwareUpdateAction.toJSON(
        message.vehicleControlScheduleSoftwareUpdateAction,
      );
    }
    if (message.vehicleControlSetSentryModeAction !== undefined) {
      obj.vehicleControlSetSentryModeAction = VehicleControlSetSentryModeAction.toJSON(
        message.vehicleControlSetSentryModeAction,
      );
    }
    if (message.vehicleControlSetValetModeAction !== undefined) {
      obj.vehicleControlSetValetModeAction = VehicleControlSetValetModeAction.toJSON(
        message.vehicleControlSetValetModeAction,
      );
    }
    if (message.vehicleControlSunroofOpenCloseAction !== undefined) {
      obj.vehicleControlSunroofOpenCloseAction = VehicleControlSunroofOpenCloseAction.toJSON(
        message.vehicleControlSunroofOpenCloseAction,
      );
    }
    if (message.vehicleControlTriggerHomelinkAction !== undefined) {
      obj.vehicleControlTriggerHomelinkAction = VehicleControlTriggerHomelinkAction.toJSON(
        message.vehicleControlTriggerHomelinkAction,
      );
    }
    if (message.vehicleControlWindowAction !== undefined) {
      obj.vehicleControlWindowAction = VehicleControlWindowAction.toJSON(message.vehicleControlWindowAction);
    }
    if (message.hvacBioweaponModeAction !== undefined) {
      obj.hvacBioweaponModeAction = HvacBioweaponModeAction.toJSON(message.hvacBioweaponModeAction);
    }
    if (message.hvacSeatHeaterActions !== undefined) {
      obj.hvacSeatHeaterActions = HvacSeatHeaterActions.toJSON(message.hvacSeatHeaterActions);
    }
    if (message.scheduledChargingAction !== undefined) {
      obj.scheduledChargingAction = ScheduledChargingAction.toJSON(message.scheduledChargingAction);
    }
    if (message.scheduledDepartureAction !== undefined) {
      obj.scheduledDepartureAction = ScheduledDepartureAction.toJSON(message.scheduledDepartureAction);
    }
    if (message.setChargingAmpsAction !== undefined) {
      obj.setChargingAmpsAction = SetChargingAmpsAction.toJSON(message.setChargingAmpsAction);
    }
    if (message.hvacClimateKeeperAction !== undefined) {
      obj.hvacClimateKeeperAction = HvacClimateKeeperAction.toJSON(message.hvacClimateKeeperAction);
    }
    if (message.ping !== undefined) {
      obj.ping = Ping.toJSON(message.ping);
    }
    if (message.autoSeatClimateAction !== undefined) {
      obj.autoSeatClimateAction = AutoSeatClimateAction.toJSON(message.autoSeatClimateAction);
    }
    if (message.hvacSeatCoolerActions !== undefined) {
      obj.hvacSeatCoolerActions = HvacSeatCoolerActions.toJSON(message.hvacSeatCoolerActions);
    }
    if (message.setCabinOverheatProtectionAction !== undefined) {
      obj.setCabinOverheatProtectionAction = SetCabinOverheatProtectionAction.toJSON(
        message.setCabinOverheatProtectionAction,
      );
    }
    if (message.setVehicleNameAction !== undefined) {
      obj.setVehicleNameAction = SetVehicleNameAction.toJSON(message.setVehicleNameAction);
    }
    if (message.chargePortDoorClose !== undefined) {
      obj.chargePortDoorClose = ChargePortDoorClose.toJSON(message.chargePortDoorClose);
    }
    if (message.chargePortDoorOpen !== undefined) {
      obj.chargePortDoorOpen = ChargePortDoorOpen.toJSON(message.chargePortDoorOpen);
    }
    if (message.guestModeAction !== undefined) {
      obj.guestModeAction = VehicleState_GuestMode.toJSON(message.guestModeAction);
    }
    if (message.setCopTempAction !== undefined) {
      obj.setCopTempAction = SetCopTempAction.toJSON(message.setCopTempAction);
    }
    if (message.eraseUserDataAction !== undefined) {
      obj.eraseUserDataAction = EraseUserDataAction.toJSON(message.eraseUserDataAction);
    }
    if (message.vehicleControlSetPinToDriveAction !== undefined) {
      obj.vehicleControlSetPinToDriveAction = VehicleControlSetPinToDriveAction.toJSON(
        message.vehicleControlSetPinToDriveAction,
      );
    }
    if (message.vehicleControlResetPinToDriveAction !== undefined) {
      obj.vehicleControlResetPinToDriveAction = VehicleControlResetPinToDriveAction.toJSON(
        message.vehicleControlResetPinToDriveAction,
      );
    }
    if (message.addChargeScheduleAction !== undefined) {
      obj.addChargeScheduleAction = ChargeSchedule.toJSON(message.addChargeScheduleAction);
    }
    if (message.removeChargeScheduleAction !== undefined) {
      obj.removeChargeScheduleAction = RemoveChargeScheduleAction.toJSON(message.removeChargeScheduleAction);
    }
    if (message.addPreconditionScheduleAction !== undefined) {
      obj.addPreconditionScheduleAction = PreconditionSchedule.toJSON(message.addPreconditionScheduleAction);
    }
    if (message.removePreconditionScheduleAction !== undefined) {
      obj.removePreconditionScheduleAction = RemovePreconditionScheduleAction.toJSON(
        message.removePreconditionScheduleAction,
      );
    }
    if (message.batchRemovePreconditionSchedulesAction !== undefined) {
      obj.batchRemovePreconditionSchedulesAction = BatchRemovePreconditionSchedulesAction.toJSON(
        message.batchRemovePreconditionSchedulesAction,
      );
    }
    if (message.batchRemoveChargeSchedulesAction !== undefined) {
      obj.batchRemoveChargeSchedulesAction = BatchRemoveChargeSchedulesAction.toJSON(
        message.batchRemoveChargeSchedulesAction,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleAction>, I>>(base?: I): VehicleAction {
    return VehicleAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleAction>, I>>(object: I): VehicleAction {
    const message = createBaseVehicleAction();
    message.chargingSetLimitAction =
      (object.chargingSetLimitAction !== undefined && object.chargingSetLimitAction !== null)
        ? ChargingSetLimitAction.fromPartial(object.chargingSetLimitAction)
        : undefined;
    message.chargingStartStopAction =
      (object.chargingStartStopAction !== undefined && object.chargingStartStopAction !== null)
        ? ChargingStartStopAction.fromPartial(object.chargingStartStopAction)
        : undefined;
    message.drivingClearSpeedLimitPinAction =
      (object.drivingClearSpeedLimitPinAction !== undefined && object.drivingClearSpeedLimitPinAction !== null)
        ? DrivingClearSpeedLimitPinAction.fromPartial(object.drivingClearSpeedLimitPinAction)
        : undefined;
    message.drivingSetSpeedLimitAction =
      (object.drivingSetSpeedLimitAction !== undefined && object.drivingSetSpeedLimitAction !== null)
        ? DrivingSetSpeedLimitAction.fromPartial(object.drivingSetSpeedLimitAction)
        : undefined;
    message.drivingSpeedLimitAction =
      (object.drivingSpeedLimitAction !== undefined && object.drivingSpeedLimitAction !== null)
        ? DrivingSpeedLimitAction.fromPartial(object.drivingSpeedLimitAction)
        : undefined;
    message.hvacAutoAction = (object.hvacAutoAction !== undefined && object.hvacAutoAction !== null)
      ? HvacAutoAction.fromPartial(object.hvacAutoAction)
      : undefined;
    message.hvacSetPreconditioningMaxAction =
      (object.hvacSetPreconditioningMaxAction !== undefined && object.hvacSetPreconditioningMaxAction !== null)
        ? HvacSetPreconditioningMaxAction.fromPartial(object.hvacSetPreconditioningMaxAction)
        : undefined;
    message.hvacSteeringWheelHeaterAction =
      (object.hvacSteeringWheelHeaterAction !== undefined && object.hvacSteeringWheelHeaterAction !== null)
        ? HvacSteeringWheelHeaterAction.fromPartial(object.hvacSteeringWheelHeaterAction)
        : undefined;
    message.hvacTemperatureAdjustmentAction =
      (object.hvacTemperatureAdjustmentAction !== undefined && object.hvacTemperatureAdjustmentAction !== null)
        ? HvacTemperatureAdjustmentAction.fromPartial(object.hvacTemperatureAdjustmentAction)
        : undefined;
    message.mediaPlayAction = (object.mediaPlayAction !== undefined && object.mediaPlayAction !== null)
      ? MediaPlayAction.fromPartial(object.mediaPlayAction)
      : undefined;
    message.mediaUpdateVolume = (object.mediaUpdateVolume !== undefined && object.mediaUpdateVolume !== null)
      ? MediaUpdateVolume.fromPartial(object.mediaUpdateVolume)
      : undefined;
    message.mediaNextFavorite = (object.mediaNextFavorite !== undefined && object.mediaNextFavorite !== null)
      ? MediaNextFavorite.fromPartial(object.mediaNextFavorite)
      : undefined;
    message.mediaPreviousFavorite =
      (object.mediaPreviousFavorite !== undefined && object.mediaPreviousFavorite !== null)
        ? MediaPreviousFavorite.fromPartial(object.mediaPreviousFavorite)
        : undefined;
    message.mediaNextTrack = (object.mediaNextTrack !== undefined && object.mediaNextTrack !== null)
      ? MediaNextTrack.fromPartial(object.mediaNextTrack)
      : undefined;
    message.mediaPreviousTrack = (object.mediaPreviousTrack !== undefined && object.mediaPreviousTrack !== null)
      ? MediaPreviousTrack.fromPartial(object.mediaPreviousTrack)
      : undefined;
    message.getNearbyChargingSites =
      (object.getNearbyChargingSites !== undefined && object.getNearbyChargingSites !== null)
        ? GetNearbyChargingSites.fromPartial(object.getNearbyChargingSites)
        : undefined;
    message.vehicleControlCancelSoftwareUpdateAction =
      (object.vehicleControlCancelSoftwareUpdateAction !== undefined &&
          object.vehicleControlCancelSoftwareUpdateAction !== null)
        ? VehicleControlCancelSoftwareUpdateAction.fromPartial(object.vehicleControlCancelSoftwareUpdateAction)
        : undefined;
    message.vehicleControlFlashLightsAction =
      (object.vehicleControlFlashLightsAction !== undefined && object.vehicleControlFlashLightsAction !== null)
        ? VehicleControlFlashLightsAction.fromPartial(object.vehicleControlFlashLightsAction)
        : undefined;
    message.vehicleControlHonkHornAction =
      (object.vehicleControlHonkHornAction !== undefined && object.vehicleControlHonkHornAction !== null)
        ? VehicleControlHonkHornAction.fromPartial(object.vehicleControlHonkHornAction)
        : undefined;
    message.vehicleControlResetValetPinAction =
      (object.vehicleControlResetValetPinAction !== undefined && object.vehicleControlResetValetPinAction !== null)
        ? VehicleControlResetValetPinAction.fromPartial(object.vehicleControlResetValetPinAction)
        : undefined;
    message.vehicleControlScheduleSoftwareUpdateAction =
      (object.vehicleControlScheduleSoftwareUpdateAction !== undefined &&
          object.vehicleControlScheduleSoftwareUpdateAction !== null)
        ? VehicleControlScheduleSoftwareUpdateAction.fromPartial(object.vehicleControlScheduleSoftwareUpdateAction)
        : undefined;
    message.vehicleControlSetSentryModeAction =
      (object.vehicleControlSetSentryModeAction !== undefined && object.vehicleControlSetSentryModeAction !== null)
        ? VehicleControlSetSentryModeAction.fromPartial(object.vehicleControlSetSentryModeAction)
        : undefined;
    message.vehicleControlSetValetModeAction =
      (object.vehicleControlSetValetModeAction !== undefined && object.vehicleControlSetValetModeAction !== null)
        ? VehicleControlSetValetModeAction.fromPartial(object.vehicleControlSetValetModeAction)
        : undefined;
    message.vehicleControlSunroofOpenCloseAction =
      (object.vehicleControlSunroofOpenCloseAction !== undefined &&
          object.vehicleControlSunroofOpenCloseAction !== null)
        ? VehicleControlSunroofOpenCloseAction.fromPartial(object.vehicleControlSunroofOpenCloseAction)
        : undefined;
    message.vehicleControlTriggerHomelinkAction =
      (object.vehicleControlTriggerHomelinkAction !== undefined && object.vehicleControlTriggerHomelinkAction !== null)
        ? VehicleControlTriggerHomelinkAction.fromPartial(object.vehicleControlTriggerHomelinkAction)
        : undefined;
    message.vehicleControlWindowAction =
      (object.vehicleControlWindowAction !== undefined && object.vehicleControlWindowAction !== null)
        ? VehicleControlWindowAction.fromPartial(object.vehicleControlWindowAction)
        : undefined;
    message.hvacBioweaponModeAction =
      (object.hvacBioweaponModeAction !== undefined && object.hvacBioweaponModeAction !== null)
        ? HvacBioweaponModeAction.fromPartial(object.hvacBioweaponModeAction)
        : undefined;
    message.hvacSeatHeaterActions =
      (object.hvacSeatHeaterActions !== undefined && object.hvacSeatHeaterActions !== null)
        ? HvacSeatHeaterActions.fromPartial(object.hvacSeatHeaterActions)
        : undefined;
    message.scheduledChargingAction =
      (object.scheduledChargingAction !== undefined && object.scheduledChargingAction !== null)
        ? ScheduledChargingAction.fromPartial(object.scheduledChargingAction)
        : undefined;
    message.scheduledDepartureAction =
      (object.scheduledDepartureAction !== undefined && object.scheduledDepartureAction !== null)
        ? ScheduledDepartureAction.fromPartial(object.scheduledDepartureAction)
        : undefined;
    message.setChargingAmpsAction =
      (object.setChargingAmpsAction !== undefined && object.setChargingAmpsAction !== null)
        ? SetChargingAmpsAction.fromPartial(object.setChargingAmpsAction)
        : undefined;
    message.hvacClimateKeeperAction =
      (object.hvacClimateKeeperAction !== undefined && object.hvacClimateKeeperAction !== null)
        ? HvacClimateKeeperAction.fromPartial(object.hvacClimateKeeperAction)
        : undefined;
    message.ping = (object.ping !== undefined && object.ping !== null) ? Ping.fromPartial(object.ping) : undefined;
    message.autoSeatClimateAction =
      (object.autoSeatClimateAction !== undefined && object.autoSeatClimateAction !== null)
        ? AutoSeatClimateAction.fromPartial(object.autoSeatClimateAction)
        : undefined;
    message.hvacSeatCoolerActions =
      (object.hvacSeatCoolerActions !== undefined && object.hvacSeatCoolerActions !== null)
        ? HvacSeatCoolerActions.fromPartial(object.hvacSeatCoolerActions)
        : undefined;
    message.setCabinOverheatProtectionAction =
      (object.setCabinOverheatProtectionAction !== undefined && object.setCabinOverheatProtectionAction !== null)
        ? SetCabinOverheatProtectionAction.fromPartial(object.setCabinOverheatProtectionAction)
        : undefined;
    message.setVehicleNameAction = (object.setVehicleNameAction !== undefined && object.setVehicleNameAction !== null)
      ? SetVehicleNameAction.fromPartial(object.setVehicleNameAction)
      : undefined;
    message.chargePortDoorClose = (object.chargePortDoorClose !== undefined && object.chargePortDoorClose !== null)
      ? ChargePortDoorClose.fromPartial(object.chargePortDoorClose)
      : undefined;
    message.chargePortDoorOpen = (object.chargePortDoorOpen !== undefined && object.chargePortDoorOpen !== null)
      ? ChargePortDoorOpen.fromPartial(object.chargePortDoorOpen)
      : undefined;
    message.guestModeAction = (object.guestModeAction !== undefined && object.guestModeAction !== null)
      ? VehicleState_GuestMode.fromPartial(object.guestModeAction)
      : undefined;
    message.setCopTempAction = (object.setCopTempAction !== undefined && object.setCopTempAction !== null)
      ? SetCopTempAction.fromPartial(object.setCopTempAction)
      : undefined;
    message.eraseUserDataAction = (object.eraseUserDataAction !== undefined && object.eraseUserDataAction !== null)
      ? EraseUserDataAction.fromPartial(object.eraseUserDataAction)
      : undefined;
    message.vehicleControlSetPinToDriveAction =
      (object.vehicleControlSetPinToDriveAction !== undefined && object.vehicleControlSetPinToDriveAction !== null)
        ? VehicleControlSetPinToDriveAction.fromPartial(object.vehicleControlSetPinToDriveAction)
        : undefined;
    message.vehicleControlResetPinToDriveAction =
      (object.vehicleControlResetPinToDriveAction !== undefined && object.vehicleControlResetPinToDriveAction !== null)
        ? VehicleControlResetPinToDriveAction.fromPartial(object.vehicleControlResetPinToDriveAction)
        : undefined;
    message.addChargeScheduleAction =
      (object.addChargeScheduleAction !== undefined && object.addChargeScheduleAction !== null)
        ? ChargeSchedule.fromPartial(object.addChargeScheduleAction)
        : undefined;
    message.removeChargeScheduleAction =
      (object.removeChargeScheduleAction !== undefined && object.removeChargeScheduleAction !== null)
        ? RemoveChargeScheduleAction.fromPartial(object.removeChargeScheduleAction)
        : undefined;
    message.addPreconditionScheduleAction =
      (object.addPreconditionScheduleAction !== undefined && object.addPreconditionScheduleAction !== null)
        ? PreconditionSchedule.fromPartial(object.addPreconditionScheduleAction)
        : undefined;
    message.removePreconditionScheduleAction =
      (object.removePreconditionScheduleAction !== undefined && object.removePreconditionScheduleAction !== null)
        ? RemovePreconditionScheduleAction.fromPartial(object.removePreconditionScheduleAction)
        : undefined;
    message.batchRemovePreconditionSchedulesAction =
      (object.batchRemovePreconditionSchedulesAction !== undefined &&
          object.batchRemovePreconditionSchedulesAction !== null)
        ? BatchRemovePreconditionSchedulesAction.fromPartial(object.batchRemovePreconditionSchedulesAction)
        : undefined;
    message.batchRemoveChargeSchedulesAction =
      (object.batchRemoveChargeSchedulesAction !== undefined && object.batchRemoveChargeSchedulesAction !== null)
        ? BatchRemoveChargeSchedulesAction.fromPartial(object.batchRemoveChargeSchedulesAction)
        : undefined;
    return message;
  },
};

function createBaseEraseUserDataAction(): EraseUserDataAction {
  return { reason: "" };
}

export const EraseUserDataAction: MessageFns<EraseUserDataAction> = {
  encode(message: EraseUserDataAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reason !== "") {
      writer.uint32(10).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EraseUserDataAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEraseUserDataAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EraseUserDataAction {
    return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
  },

  toJSON(message: EraseUserDataAction): unknown {
    const obj: any = {};
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EraseUserDataAction>, I>>(base?: I): EraseUserDataAction {
    return EraseUserDataAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EraseUserDataAction>, I>>(object: I): EraseUserDataAction {
    const message = createBaseEraseUserDataAction();
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    actionStatus: undefined,
    getSessionInfoResponse: undefined,
    getNearbyChargingSites: undefined,
    ping: undefined,
  };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.actionStatus !== undefined) {
      ActionStatus.encode(message.actionStatus, writer.uint32(10).fork()).join();
    }
    if (message.getSessionInfoResponse !== undefined) {
      SessionInfo.encode(message.getSessionInfoResponse, writer.uint32(26).fork()).join();
    }
    if (message.getNearbyChargingSites !== undefined) {
      NearbyChargingSites.encode(message.getNearbyChargingSites, writer.uint32(42).fork()).join();
    }
    if (message.ping !== undefined) {
      Ping.encode(message.ping, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actionStatus = ActionStatus.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.getSessionInfoResponse = SessionInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.getNearbyChargingSites = NearbyChargingSites.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.ping = Ping.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      actionStatus: isSet(object.actionStatus) ? ActionStatus.fromJSON(object.actionStatus) : undefined,
      getSessionInfoResponse: isSet(object.getSessionInfoResponse)
        ? SessionInfo.fromJSON(object.getSessionInfoResponse)
        : undefined,
      getNearbyChargingSites: isSet(object.getNearbyChargingSites)
        ? NearbyChargingSites.fromJSON(object.getNearbyChargingSites)
        : undefined,
      ping: isSet(object.ping) ? Ping.fromJSON(object.ping) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.actionStatus !== undefined) {
      obj.actionStatus = ActionStatus.toJSON(message.actionStatus);
    }
    if (message.getSessionInfoResponse !== undefined) {
      obj.getSessionInfoResponse = SessionInfo.toJSON(message.getSessionInfoResponse);
    }
    if (message.getNearbyChargingSites !== undefined) {
      obj.getNearbyChargingSites = NearbyChargingSites.toJSON(message.getNearbyChargingSites);
    }
    if (message.ping !== undefined) {
      obj.ping = Ping.toJSON(message.ping);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.actionStatus = (object.actionStatus !== undefined && object.actionStatus !== null)
      ? ActionStatus.fromPartial(object.actionStatus)
      : undefined;
    message.getSessionInfoResponse =
      (object.getSessionInfoResponse !== undefined && object.getSessionInfoResponse !== null)
        ? SessionInfo.fromPartial(object.getSessionInfoResponse)
        : undefined;
    message.getNearbyChargingSites =
      (object.getNearbyChargingSites !== undefined && object.getNearbyChargingSites !== null)
        ? NearbyChargingSites.fromPartial(object.getNearbyChargingSites)
        : undefined;
    message.ping = (object.ping !== undefined && object.ping !== null) ? Ping.fromPartial(object.ping) : undefined;
    return message;
  },
};

function createBaseActionStatus(): ActionStatus {
  return { result: 0, resultReason: undefined };
}

export const ActionStatus: MessageFns<ActionStatus> = {
  encode(message: ActionStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    if (message.resultReason !== undefined) {
      ResultReason.encode(message.resultReason, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resultReason = ResultReason.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionStatus {
    return {
      result: isSet(object.result) ? operationStatusEFromJSON(object.result) : 0,
      resultReason: isSet(object.resultReason) ? ResultReason.fromJSON(object.resultReason) : undefined,
    };
  },

  toJSON(message: ActionStatus): unknown {
    const obj: any = {};
    if (message.result !== 0) {
      obj.result = operationStatusEToJSON(message.result);
    }
    if (message.resultReason !== undefined) {
      obj.resultReason = ResultReason.toJSON(message.resultReason);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionStatus>, I>>(base?: I): ActionStatus {
    return ActionStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionStatus>, I>>(object: I): ActionStatus {
    const message = createBaseActionStatus();
    message.result = object.result ?? 0;
    message.resultReason = (object.resultReason !== undefined && object.resultReason !== null)
      ? ResultReason.fromPartial(object.resultReason)
      : undefined;
    return message;
  },
};

function createBaseResultReason(): ResultReason {
  return { plainText: undefined };
}

export const ResultReason: MessageFns<ResultReason> = {
  encode(message: ResultReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.plainText !== undefined) {
      writer.uint32(10).string(message.plainText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResultReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResultReason();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.plainText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResultReason {
    return { plainText: isSet(object.plainText) ? globalThis.String(object.plainText) : undefined };
  },

  toJSON(message: ResultReason): unknown {
    const obj: any = {};
    if (message.plainText !== undefined) {
      obj.plainText = message.plainText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResultReason>, I>>(base?: I): ResultReason {
    return ResultReason.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResultReason>, I>>(object: I): ResultReason {
    const message = createBaseResultReason();
    message.plainText = object.plainText ?? undefined;
    return message;
  },
};

function createBaseEncryptedData(): EncryptedData {
  return { fieldNumber: 0, ciphertext: new Uint8Array(0), tag: new Uint8Array(0) };
}

export const EncryptedData: MessageFns<EncryptedData> = {
  encode(message: EncryptedData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldNumber !== 0) {
      writer.uint32(8).int32(message.fieldNumber);
    }
    if (message.ciphertext.length !== 0) {
      writer.uint32(18).bytes(message.ciphertext);
    }
    if (message.tag.length !== 0) {
      writer.uint32(26).bytes(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptedData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptedData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fieldNumber = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ciphertext = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tag = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptedData {
    return {
      fieldNumber: isSet(object.fieldNumber) ? globalThis.Number(object.fieldNumber) : 0,
      ciphertext: isSet(object.ciphertext) ? bytesFromBase64(object.ciphertext) : new Uint8Array(0),
      tag: isSet(object.tag) ? bytesFromBase64(object.tag) : new Uint8Array(0),
    };
  },

  toJSON(message: EncryptedData): unknown {
    const obj: any = {};
    if (message.fieldNumber !== 0) {
      obj.fieldNumber = Math.round(message.fieldNumber);
    }
    if (message.ciphertext.length !== 0) {
      obj.ciphertext = base64FromBytes(message.ciphertext);
    }
    if (message.tag.length !== 0) {
      obj.tag = base64FromBytes(message.tag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncryptedData>, I>>(base?: I): EncryptedData {
    return EncryptedData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncryptedData>, I>>(object: I): EncryptedData {
    const message = createBaseEncryptedData();
    message.fieldNumber = object.fieldNumber ?? 0;
    message.ciphertext = object.ciphertext ?? new Uint8Array(0);
    message.tag = object.tag ?? new Uint8Array(0);
    return message;
  },
};

function createBaseChargingSetLimitAction(): ChargingSetLimitAction {
  return { percent: 0 };
}

export const ChargingSetLimitAction: MessageFns<ChargingSetLimitAction> = {
  encode(message: ChargingSetLimitAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.percent !== 0) {
      writer.uint32(8).int32(message.percent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargingSetLimitAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargingSetLimitAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.percent = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargingSetLimitAction {
    return { percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0 };
  },

  toJSON(message: ChargingSetLimitAction): unknown {
    const obj: any = {};
    if (message.percent !== 0) {
      obj.percent = Math.round(message.percent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargingSetLimitAction>, I>>(base?: I): ChargingSetLimitAction {
    return ChargingSetLimitAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargingSetLimitAction>, I>>(object: I): ChargingSetLimitAction {
    const message = createBaseChargingSetLimitAction();
    message.percent = object.percent ?? 0;
    return message;
  },
};

function createBaseChargingStartStopAction(): ChargingStartStopAction {
  return { unknown: undefined, start: undefined, startStandard: undefined, startMaxRange: undefined, stop: undefined };
}

export const ChargingStartStopAction: MessageFns<ChargingStartStopAction> = {
  encode(message: ChargingStartStopAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unknown !== undefined) {
      Void.encode(message.unknown, writer.uint32(10).fork()).join();
    }
    if (message.start !== undefined) {
      Void.encode(message.start, writer.uint32(18).fork()).join();
    }
    if (message.startStandard !== undefined) {
      Void.encode(message.startStandard, writer.uint32(26).fork()).join();
    }
    if (message.startMaxRange !== undefined) {
      Void.encode(message.startMaxRange, writer.uint32(34).fork()).join();
    }
    if (message.stop !== undefined) {
      Void.encode(message.stop, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargingStartStopAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargingStartStopAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unknown = Void.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.start = Void.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startStandard = Void.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startMaxRange = Void.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stop = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargingStartStopAction {
    return {
      unknown: isSet(object.unknown) ? Void.fromJSON(object.unknown) : undefined,
      start: isSet(object.start) ? Void.fromJSON(object.start) : undefined,
      startStandard: isSet(object.startStandard) ? Void.fromJSON(object.startStandard) : undefined,
      startMaxRange: isSet(object.startMaxRange) ? Void.fromJSON(object.startMaxRange) : undefined,
      stop: isSet(object.stop) ? Void.fromJSON(object.stop) : undefined,
    };
  },

  toJSON(message: ChargingStartStopAction): unknown {
    const obj: any = {};
    if (message.unknown !== undefined) {
      obj.unknown = Void.toJSON(message.unknown);
    }
    if (message.start !== undefined) {
      obj.start = Void.toJSON(message.start);
    }
    if (message.startStandard !== undefined) {
      obj.startStandard = Void.toJSON(message.startStandard);
    }
    if (message.startMaxRange !== undefined) {
      obj.startMaxRange = Void.toJSON(message.startMaxRange);
    }
    if (message.stop !== undefined) {
      obj.stop = Void.toJSON(message.stop);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargingStartStopAction>, I>>(base?: I): ChargingStartStopAction {
    return ChargingStartStopAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargingStartStopAction>, I>>(object: I): ChargingStartStopAction {
    const message = createBaseChargingStartStopAction();
    message.unknown = (object.unknown !== undefined && object.unknown !== null)
      ? Void.fromPartial(object.unknown)
      : undefined;
    message.start = (object.start !== undefined && object.start !== null) ? Void.fromPartial(object.start) : undefined;
    message.startStandard = (object.startStandard !== undefined && object.startStandard !== null)
      ? Void.fromPartial(object.startStandard)
      : undefined;
    message.startMaxRange = (object.startMaxRange !== undefined && object.startMaxRange !== null)
      ? Void.fromPartial(object.startMaxRange)
      : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null) ? Void.fromPartial(object.stop) : undefined;
    return message;
  },
};

function createBaseDrivingClearSpeedLimitPinAction(): DrivingClearSpeedLimitPinAction {
  return { pin: "" };
}

export const DrivingClearSpeedLimitPinAction: MessageFns<DrivingClearSpeedLimitPinAction> = {
  encode(message: DrivingClearSpeedLimitPinAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pin !== "") {
      writer.uint32(10).string(message.pin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DrivingClearSpeedLimitPinAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrivingClearSpeedLimitPinAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrivingClearSpeedLimitPinAction {
    return { pin: isSet(object.pin) ? globalThis.String(object.pin) : "" };
  },

  toJSON(message: DrivingClearSpeedLimitPinAction): unknown {
    const obj: any = {};
    if (message.pin !== "") {
      obj.pin = message.pin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrivingClearSpeedLimitPinAction>, I>>(base?: I): DrivingClearSpeedLimitPinAction {
    return DrivingClearSpeedLimitPinAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrivingClearSpeedLimitPinAction>, I>>(
    object: I,
  ): DrivingClearSpeedLimitPinAction {
    const message = createBaseDrivingClearSpeedLimitPinAction();
    message.pin = object.pin ?? "";
    return message;
  },
};

function createBaseDrivingSetSpeedLimitAction(): DrivingSetSpeedLimitAction {
  return { limitMph: 0 };
}

export const DrivingSetSpeedLimitAction: MessageFns<DrivingSetSpeedLimitAction> = {
  encode(message: DrivingSetSpeedLimitAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limitMph !== 0) {
      writer.uint32(9).double(message.limitMph);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DrivingSetSpeedLimitAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrivingSetSpeedLimitAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.limitMph = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrivingSetSpeedLimitAction {
    return { limitMph: isSet(object.limitMph) ? globalThis.Number(object.limitMph) : 0 };
  },

  toJSON(message: DrivingSetSpeedLimitAction): unknown {
    const obj: any = {};
    if (message.limitMph !== 0) {
      obj.limitMph = message.limitMph;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrivingSetSpeedLimitAction>, I>>(base?: I): DrivingSetSpeedLimitAction {
    return DrivingSetSpeedLimitAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrivingSetSpeedLimitAction>, I>>(object: I): DrivingSetSpeedLimitAction {
    const message = createBaseDrivingSetSpeedLimitAction();
    message.limitMph = object.limitMph ?? 0;
    return message;
  },
};

function createBaseDrivingSpeedLimitAction(): DrivingSpeedLimitAction {
  return { activate: false, pin: "" };
}

export const DrivingSpeedLimitAction: MessageFns<DrivingSpeedLimitAction> = {
  encode(message: DrivingSpeedLimitAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.activate !== false) {
      writer.uint32(8).bool(message.activate);
    }
    if (message.pin !== "") {
      writer.uint32(18).string(message.pin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DrivingSpeedLimitAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrivingSpeedLimitAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.activate = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrivingSpeedLimitAction {
    return {
      activate: isSet(object.activate) ? globalThis.Boolean(object.activate) : false,
      pin: isSet(object.pin) ? globalThis.String(object.pin) : "",
    };
  },

  toJSON(message: DrivingSpeedLimitAction): unknown {
    const obj: any = {};
    if (message.activate !== false) {
      obj.activate = message.activate;
    }
    if (message.pin !== "") {
      obj.pin = message.pin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrivingSpeedLimitAction>, I>>(base?: I): DrivingSpeedLimitAction {
    return DrivingSpeedLimitAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrivingSpeedLimitAction>, I>>(object: I): DrivingSpeedLimitAction {
    const message = createBaseDrivingSpeedLimitAction();
    message.activate = object.activate ?? false;
    message.pin = object.pin ?? "";
    return message;
  },
};

function createBaseHvacAutoAction(): HvacAutoAction {
  return { powerOn: undefined, manualOverride: undefined };
}

export const HvacAutoAction: MessageFns<HvacAutoAction> = {
  encode(message: HvacAutoAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.powerOn !== undefined) {
      writer.uint32(8).bool(message.powerOn);
    }
    if (message.manualOverride !== undefined) {
      writer.uint32(16).bool(message.manualOverride);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacAutoAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacAutoAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.powerOn = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.manualOverride = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacAutoAction {
    return {
      powerOn: isSet(object.powerOn) ? globalThis.Boolean(object.powerOn) : undefined,
      manualOverride: isSet(object.manualOverride) ? globalThis.Boolean(object.manualOverride) : undefined,
    };
  },

  toJSON(message: HvacAutoAction): unknown {
    const obj: any = {};
    if (message.powerOn !== undefined) {
      obj.powerOn = message.powerOn;
    }
    if (message.manualOverride !== undefined) {
      obj.manualOverride = message.manualOverride;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacAutoAction>, I>>(base?: I): HvacAutoAction {
    return HvacAutoAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacAutoAction>, I>>(object: I): HvacAutoAction {
    const message = createBaseHvacAutoAction();
    message.powerOn = object.powerOn ?? undefined;
    message.manualOverride = object.manualOverride ?? undefined;
    return message;
  },
};

function createBaseHvacSeatHeaterActions(): HvacSeatHeaterActions {
  return { hvacSeatHeaterAction: [] };
}

export const HvacSeatHeaterActions: MessageFns<HvacSeatHeaterActions> = {
  encode(message: HvacSeatHeaterActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hvacSeatHeaterAction) {
      HvacSeatHeaterActions_HvacSeatHeaterAction.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacSeatHeaterActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacSeatHeaterActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hvacSeatHeaterAction.push(HvacSeatHeaterActions_HvacSeatHeaterAction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacSeatHeaterActions {
    return {
      hvacSeatHeaterAction: globalThis.Array.isArray(object?.hvacSeatHeaterAction)
        ? object.hvacSeatHeaterAction.map((e: any) => HvacSeatHeaterActions_HvacSeatHeaterAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: HvacSeatHeaterActions): unknown {
    const obj: any = {};
    if (message.hvacSeatHeaterAction?.length) {
      obj.hvacSeatHeaterAction = message.hvacSeatHeaterAction.map((e) =>
        HvacSeatHeaterActions_HvacSeatHeaterAction.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacSeatHeaterActions>, I>>(base?: I): HvacSeatHeaterActions {
    return HvacSeatHeaterActions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacSeatHeaterActions>, I>>(object: I): HvacSeatHeaterActions {
    const message = createBaseHvacSeatHeaterActions();
    message.hvacSeatHeaterAction =
      object.hvacSeatHeaterAction?.map((e) => HvacSeatHeaterActions_HvacSeatHeaterAction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHvacSeatHeaterActions_HvacSeatHeaterAction(): HvacSeatHeaterActions_HvacSeatHeaterAction {
  return {
    seatHeaterUnknown: undefined,
    seatHeaterOff: undefined,
    seatHeaterLow: undefined,
    seatHeaterMed: undefined,
    seatHeaterHigh: undefined,
    carSeatUnknown: undefined,
    carSeatFrontLeft: undefined,
    carSeatFrontRight: undefined,
    carSeatRearLeft: undefined,
    carSeatRearLeftBack: undefined,
    carSeatRearCenter: undefined,
    carSeatRearRight: undefined,
    carSeatRearRightBack: undefined,
    carSeatThirdRowLeft: undefined,
    carSeatThirdRowRight: undefined,
  };
}

export const HvacSeatHeaterActions_HvacSeatHeaterAction: MessageFns<HvacSeatHeaterActions_HvacSeatHeaterAction> = {
  encode(message: HvacSeatHeaterActions_HvacSeatHeaterAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seatHeaterUnknown !== undefined) {
      Void.encode(message.seatHeaterUnknown, writer.uint32(10).fork()).join();
    }
    if (message.seatHeaterOff !== undefined) {
      Void.encode(message.seatHeaterOff, writer.uint32(18).fork()).join();
    }
    if (message.seatHeaterLow !== undefined) {
      Void.encode(message.seatHeaterLow, writer.uint32(26).fork()).join();
    }
    if (message.seatHeaterMed !== undefined) {
      Void.encode(message.seatHeaterMed, writer.uint32(34).fork()).join();
    }
    if (message.seatHeaterHigh !== undefined) {
      Void.encode(message.seatHeaterHigh, writer.uint32(42).fork()).join();
    }
    if (message.carSeatUnknown !== undefined) {
      Void.encode(message.carSeatUnknown, writer.uint32(50).fork()).join();
    }
    if (message.carSeatFrontLeft !== undefined) {
      Void.encode(message.carSeatFrontLeft, writer.uint32(58).fork()).join();
    }
    if (message.carSeatFrontRight !== undefined) {
      Void.encode(message.carSeatFrontRight, writer.uint32(66).fork()).join();
    }
    if (message.carSeatRearLeft !== undefined) {
      Void.encode(message.carSeatRearLeft, writer.uint32(74).fork()).join();
    }
    if (message.carSeatRearLeftBack !== undefined) {
      Void.encode(message.carSeatRearLeftBack, writer.uint32(82).fork()).join();
    }
    if (message.carSeatRearCenter !== undefined) {
      Void.encode(message.carSeatRearCenter, writer.uint32(90).fork()).join();
    }
    if (message.carSeatRearRight !== undefined) {
      Void.encode(message.carSeatRearRight, writer.uint32(98).fork()).join();
    }
    if (message.carSeatRearRightBack !== undefined) {
      Void.encode(message.carSeatRearRightBack, writer.uint32(106).fork()).join();
    }
    if (message.carSeatThirdRowLeft !== undefined) {
      Void.encode(message.carSeatThirdRowLeft, writer.uint32(114).fork()).join();
    }
    if (message.carSeatThirdRowRight !== undefined) {
      Void.encode(message.carSeatThirdRowRight, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacSeatHeaterActions_HvacSeatHeaterAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacSeatHeaterActions_HvacSeatHeaterAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.seatHeaterUnknown = Void.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.seatHeaterOff = Void.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.seatHeaterLow = Void.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.seatHeaterMed = Void.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.seatHeaterHigh = Void.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.carSeatUnknown = Void.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.carSeatFrontLeft = Void.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.carSeatFrontRight = Void.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.carSeatRearLeft = Void.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.carSeatRearLeftBack = Void.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.carSeatRearCenter = Void.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.carSeatRearRight = Void.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.carSeatRearRightBack = Void.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.carSeatThirdRowLeft = Void.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.carSeatThirdRowRight = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacSeatHeaterActions_HvacSeatHeaterAction {
    return {
      seatHeaterUnknown: isSet(object.SEATHEATERUNKNOWN) ? Void.fromJSON(object.SEATHEATERUNKNOWN) : undefined,
      seatHeaterOff: isSet(object.SEATHEATEROFF) ? Void.fromJSON(object.SEATHEATEROFF) : undefined,
      seatHeaterLow: isSet(object.SEATHEATERLOW) ? Void.fromJSON(object.SEATHEATERLOW) : undefined,
      seatHeaterMed: isSet(object.SEATHEATERMED) ? Void.fromJSON(object.SEATHEATERMED) : undefined,
      seatHeaterHigh: isSet(object.SEATHEATERHIGH) ? Void.fromJSON(object.SEATHEATERHIGH) : undefined,
      carSeatUnknown: isSet(object.CARSEATUNKNOWN) ? Void.fromJSON(object.CARSEATUNKNOWN) : undefined,
      carSeatFrontLeft: isSet(object.CARSEATFRONTLEFT) ? Void.fromJSON(object.CARSEATFRONTLEFT) : undefined,
      carSeatFrontRight: isSet(object.CARSEATFRONTRIGHT) ? Void.fromJSON(object.CARSEATFRONTRIGHT) : undefined,
      carSeatRearLeft: isSet(object.CARSEATREARLEFT) ? Void.fromJSON(object.CARSEATREARLEFT) : undefined,
      carSeatRearLeftBack: isSet(object.CARSEATREARLEFTBACK) ? Void.fromJSON(object.CARSEATREARLEFTBACK) : undefined,
      carSeatRearCenter: isSet(object.CARSEATREARCENTER) ? Void.fromJSON(object.CARSEATREARCENTER) : undefined,
      carSeatRearRight: isSet(object.CARSEATREARRIGHT) ? Void.fromJSON(object.CARSEATREARRIGHT) : undefined,
      carSeatRearRightBack: isSet(object.CARSEATREARRIGHTBACK) ? Void.fromJSON(object.CARSEATREARRIGHTBACK) : undefined,
      carSeatThirdRowLeft: isSet(object.CARSEATTHIRDROWLEFT) ? Void.fromJSON(object.CARSEATTHIRDROWLEFT) : undefined,
      carSeatThirdRowRight: isSet(object.CARSEATTHIRDROWRIGHT) ? Void.fromJSON(object.CARSEATTHIRDROWRIGHT) : undefined,
    };
  },

  toJSON(message: HvacSeatHeaterActions_HvacSeatHeaterAction): unknown {
    const obj: any = {};
    if (message.seatHeaterUnknown !== undefined) {
      obj.SEATHEATERUNKNOWN = Void.toJSON(message.seatHeaterUnknown);
    }
    if (message.seatHeaterOff !== undefined) {
      obj.SEATHEATEROFF = Void.toJSON(message.seatHeaterOff);
    }
    if (message.seatHeaterLow !== undefined) {
      obj.SEATHEATERLOW = Void.toJSON(message.seatHeaterLow);
    }
    if (message.seatHeaterMed !== undefined) {
      obj.SEATHEATERMED = Void.toJSON(message.seatHeaterMed);
    }
    if (message.seatHeaterHigh !== undefined) {
      obj.SEATHEATERHIGH = Void.toJSON(message.seatHeaterHigh);
    }
    if (message.carSeatUnknown !== undefined) {
      obj.CARSEATUNKNOWN = Void.toJSON(message.carSeatUnknown);
    }
    if (message.carSeatFrontLeft !== undefined) {
      obj.CARSEATFRONTLEFT = Void.toJSON(message.carSeatFrontLeft);
    }
    if (message.carSeatFrontRight !== undefined) {
      obj.CARSEATFRONTRIGHT = Void.toJSON(message.carSeatFrontRight);
    }
    if (message.carSeatRearLeft !== undefined) {
      obj.CARSEATREARLEFT = Void.toJSON(message.carSeatRearLeft);
    }
    if (message.carSeatRearLeftBack !== undefined) {
      obj.CARSEATREARLEFTBACK = Void.toJSON(message.carSeatRearLeftBack);
    }
    if (message.carSeatRearCenter !== undefined) {
      obj.CARSEATREARCENTER = Void.toJSON(message.carSeatRearCenter);
    }
    if (message.carSeatRearRight !== undefined) {
      obj.CARSEATREARRIGHT = Void.toJSON(message.carSeatRearRight);
    }
    if (message.carSeatRearRightBack !== undefined) {
      obj.CARSEATREARRIGHTBACK = Void.toJSON(message.carSeatRearRightBack);
    }
    if (message.carSeatThirdRowLeft !== undefined) {
      obj.CARSEATTHIRDROWLEFT = Void.toJSON(message.carSeatThirdRowLeft);
    }
    if (message.carSeatThirdRowRight !== undefined) {
      obj.CARSEATTHIRDROWRIGHT = Void.toJSON(message.carSeatThirdRowRight);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacSeatHeaterActions_HvacSeatHeaterAction>, I>>(
    base?: I,
  ): HvacSeatHeaterActions_HvacSeatHeaterAction {
    return HvacSeatHeaterActions_HvacSeatHeaterAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacSeatHeaterActions_HvacSeatHeaterAction>, I>>(
    object: I,
  ): HvacSeatHeaterActions_HvacSeatHeaterAction {
    const message = createBaseHvacSeatHeaterActions_HvacSeatHeaterAction();
    message.seatHeaterUnknown = (object.seatHeaterUnknown !== undefined && object.seatHeaterUnknown !== null)
      ? Void.fromPartial(object.seatHeaterUnknown)
      : undefined;
    message.seatHeaterOff = (object.seatHeaterOff !== undefined && object.seatHeaterOff !== null)
      ? Void.fromPartial(object.seatHeaterOff)
      : undefined;
    message.seatHeaterLow = (object.seatHeaterLow !== undefined && object.seatHeaterLow !== null)
      ? Void.fromPartial(object.seatHeaterLow)
      : undefined;
    message.seatHeaterMed = (object.seatHeaterMed !== undefined && object.seatHeaterMed !== null)
      ? Void.fromPartial(object.seatHeaterMed)
      : undefined;
    message.seatHeaterHigh = (object.seatHeaterHigh !== undefined && object.seatHeaterHigh !== null)
      ? Void.fromPartial(object.seatHeaterHigh)
      : undefined;
    message.carSeatUnknown = (object.carSeatUnknown !== undefined && object.carSeatUnknown !== null)
      ? Void.fromPartial(object.carSeatUnknown)
      : undefined;
    message.carSeatFrontLeft = (object.carSeatFrontLeft !== undefined && object.carSeatFrontLeft !== null)
      ? Void.fromPartial(object.carSeatFrontLeft)
      : undefined;
    message.carSeatFrontRight = (object.carSeatFrontRight !== undefined && object.carSeatFrontRight !== null)
      ? Void.fromPartial(object.carSeatFrontRight)
      : undefined;
    message.carSeatRearLeft = (object.carSeatRearLeft !== undefined && object.carSeatRearLeft !== null)
      ? Void.fromPartial(object.carSeatRearLeft)
      : undefined;
    message.carSeatRearLeftBack = (object.carSeatRearLeftBack !== undefined && object.carSeatRearLeftBack !== null)
      ? Void.fromPartial(object.carSeatRearLeftBack)
      : undefined;
    message.carSeatRearCenter = (object.carSeatRearCenter !== undefined && object.carSeatRearCenter !== null)
      ? Void.fromPartial(object.carSeatRearCenter)
      : undefined;
    message.carSeatRearRight = (object.carSeatRearRight !== undefined && object.carSeatRearRight !== null)
      ? Void.fromPartial(object.carSeatRearRight)
      : undefined;
    message.carSeatRearRightBack = (object.carSeatRearRightBack !== undefined && object.carSeatRearRightBack !== null)
      ? Void.fromPartial(object.carSeatRearRightBack)
      : undefined;
    message.carSeatThirdRowLeft = (object.carSeatThirdRowLeft !== undefined && object.carSeatThirdRowLeft !== null)
      ? Void.fromPartial(object.carSeatThirdRowLeft)
      : undefined;
    message.carSeatThirdRowRight = (object.carSeatThirdRowRight !== undefined && object.carSeatThirdRowRight !== null)
      ? Void.fromPartial(object.carSeatThirdRowRight)
      : undefined;
    return message;
  },
};

function createBaseHvacSeatCoolerActions(): HvacSeatCoolerActions {
  return { hvacSeatCoolerAction: [] };
}

export const HvacSeatCoolerActions: MessageFns<HvacSeatCoolerActions> = {
  encode(message: HvacSeatCoolerActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.hvacSeatCoolerAction) {
      HvacSeatCoolerActions_HvacSeatCoolerAction.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacSeatCoolerActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacSeatCoolerActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hvacSeatCoolerAction.push(HvacSeatCoolerActions_HvacSeatCoolerAction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacSeatCoolerActions {
    return {
      hvacSeatCoolerAction: globalThis.Array.isArray(object?.hvacSeatCoolerAction)
        ? object.hvacSeatCoolerAction.map((e: any) => HvacSeatCoolerActions_HvacSeatCoolerAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: HvacSeatCoolerActions): unknown {
    const obj: any = {};
    if (message.hvacSeatCoolerAction?.length) {
      obj.hvacSeatCoolerAction = message.hvacSeatCoolerAction.map((e) =>
        HvacSeatCoolerActions_HvacSeatCoolerAction.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacSeatCoolerActions>, I>>(base?: I): HvacSeatCoolerActions {
    return HvacSeatCoolerActions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacSeatCoolerActions>, I>>(object: I): HvacSeatCoolerActions {
    const message = createBaseHvacSeatCoolerActions();
    message.hvacSeatCoolerAction =
      object.hvacSeatCoolerAction?.map((e) => HvacSeatCoolerActions_HvacSeatCoolerAction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHvacSeatCoolerActions_HvacSeatCoolerAction(): HvacSeatCoolerActions_HvacSeatCoolerAction {
  return { seatCoolerLevel: 0, seatPosition: 0 };
}

export const HvacSeatCoolerActions_HvacSeatCoolerAction: MessageFns<HvacSeatCoolerActions_HvacSeatCoolerAction> = {
  encode(message: HvacSeatCoolerActions_HvacSeatCoolerAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seatCoolerLevel !== 0) {
      writer.uint32(8).int32(message.seatCoolerLevel);
    }
    if (message.seatPosition !== 0) {
      writer.uint32(16).int32(message.seatPosition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacSeatCoolerActions_HvacSeatCoolerAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacSeatCoolerActions_HvacSeatCoolerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seatCoolerLevel = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.seatPosition = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacSeatCoolerActions_HvacSeatCoolerAction {
    return {
      seatCoolerLevel: isSet(object.seatCoolerLevel)
        ? hvacSeatCoolerActions_HvacSeatCoolerLevelEFromJSON(object.seatCoolerLevel)
        : 0,
      seatPosition: isSet(object.seatPosition)
        ? hvacSeatCoolerActions_HvacSeatCoolerPositionEFromJSON(object.seatPosition)
        : 0,
    };
  },

  toJSON(message: HvacSeatCoolerActions_HvacSeatCoolerAction): unknown {
    const obj: any = {};
    if (message.seatCoolerLevel !== 0) {
      obj.seatCoolerLevel = hvacSeatCoolerActions_HvacSeatCoolerLevelEToJSON(message.seatCoolerLevel);
    }
    if (message.seatPosition !== 0) {
      obj.seatPosition = hvacSeatCoolerActions_HvacSeatCoolerPositionEToJSON(message.seatPosition);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacSeatCoolerActions_HvacSeatCoolerAction>, I>>(
    base?: I,
  ): HvacSeatCoolerActions_HvacSeatCoolerAction {
    return HvacSeatCoolerActions_HvacSeatCoolerAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacSeatCoolerActions_HvacSeatCoolerAction>, I>>(
    object: I,
  ): HvacSeatCoolerActions_HvacSeatCoolerAction {
    const message = createBaseHvacSeatCoolerActions_HvacSeatCoolerAction();
    message.seatCoolerLevel = object.seatCoolerLevel ?? 0;
    message.seatPosition = object.seatPosition ?? 0;
    return message;
  },
};

function createBaseHvacSetPreconditioningMaxAction(): HvacSetPreconditioningMaxAction {
  return { on: false, manualOverride: false, manualOverrideMode: [] };
}

export const HvacSetPreconditioningMaxAction: MessageFns<HvacSetPreconditioningMaxAction> = {
  encode(message: HvacSetPreconditioningMaxAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    if (message.manualOverride !== false) {
      writer.uint32(16).bool(message.manualOverride);
    }
    writer.uint32(26).fork();
    for (const v of message.manualOverrideMode) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacSetPreconditioningMaxAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacSetPreconditioningMaxAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.manualOverride = reader.bool();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.manualOverrideMode.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.manualOverrideMode.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacSetPreconditioningMaxAction {
    return {
      on: isSet(object.on) ? globalThis.Boolean(object.on) : false,
      manualOverride: isSet(object.manualOverride) ? globalThis.Boolean(object.manualOverride) : false,
      manualOverrideMode: globalThis.Array.isArray(object?.manualOverrideMode)
        ? object.manualOverrideMode.map((e: any) => hvacSetPreconditioningMaxAction_ManualOverrideModeEFromJSON(e))
        : [],
    };
  },

  toJSON(message: HvacSetPreconditioningMaxAction): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    if (message.manualOverride !== false) {
      obj.manualOverride = message.manualOverride;
    }
    if (message.manualOverrideMode?.length) {
      obj.manualOverrideMode = message.manualOverrideMode.map((e) =>
        hvacSetPreconditioningMaxAction_ManualOverrideModeEToJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacSetPreconditioningMaxAction>, I>>(base?: I): HvacSetPreconditioningMaxAction {
    return HvacSetPreconditioningMaxAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacSetPreconditioningMaxAction>, I>>(
    object: I,
  ): HvacSetPreconditioningMaxAction {
    const message = createBaseHvacSetPreconditioningMaxAction();
    message.on = object.on ?? false;
    message.manualOverride = object.manualOverride ?? false;
    message.manualOverrideMode = object.manualOverrideMode?.map((e) => e) || [];
    return message;
  },
};

function createBaseHvacSteeringWheelHeaterAction(): HvacSteeringWheelHeaterAction {
  return { powerOn: false };
}

export const HvacSteeringWheelHeaterAction: MessageFns<HvacSteeringWheelHeaterAction> = {
  encode(message: HvacSteeringWheelHeaterAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.powerOn !== false) {
      writer.uint32(8).bool(message.powerOn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacSteeringWheelHeaterAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacSteeringWheelHeaterAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.powerOn = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacSteeringWheelHeaterAction {
    return { powerOn: isSet(object.powerOn) ? globalThis.Boolean(object.powerOn) : false };
  },

  toJSON(message: HvacSteeringWheelHeaterAction): unknown {
    const obj: any = {};
    if (message.powerOn !== false) {
      obj.powerOn = message.powerOn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacSteeringWheelHeaterAction>, I>>(base?: I): HvacSteeringWheelHeaterAction {
    return HvacSteeringWheelHeaterAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacSteeringWheelHeaterAction>, I>>(
    object: I,
  ): HvacSteeringWheelHeaterAction {
    const message = createBaseHvacSteeringWheelHeaterAction();
    message.powerOn = object.powerOn ?? false;
    return message;
  },
};

function createBaseHvacTemperatureAdjustmentAction(): HvacTemperatureAdjustmentAction {
  return {
    deltaCelsius: 0,
    deltaPercent: 0,
    absoluteCelsius: 0,
    level: undefined,
    hvacTemperatureZone: [],
    driverTempCelsius: 0,
    passengerTempCelsius: 0,
  };
}

export const HvacTemperatureAdjustmentAction: MessageFns<HvacTemperatureAdjustmentAction> = {
  encode(message: HvacTemperatureAdjustmentAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deltaCelsius !== 0) {
      writer.uint32(13).float(message.deltaCelsius);
    }
    if (message.deltaPercent !== 0) {
      writer.uint32(16).sint32(message.deltaPercent);
    }
    if (message.absoluteCelsius !== 0) {
      writer.uint32(29).float(message.absoluteCelsius);
    }
    if (message.level !== undefined) {
      HvacTemperatureAdjustmentAction_Temperature.encode(message.level, writer.uint32(42).fork()).join();
    }
    for (const v of message.hvacTemperatureZone) {
      HvacTemperatureAdjustmentAction_HvacTemperatureZone.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.driverTempCelsius !== 0) {
      writer.uint32(53).float(message.driverTempCelsius);
    }
    if (message.passengerTempCelsius !== 0) {
      writer.uint32(61).float(message.passengerTempCelsius);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacTemperatureAdjustmentAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacTemperatureAdjustmentAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.deltaCelsius = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deltaPercent = reader.sint32();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.absoluteCelsius = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.level = HvacTemperatureAdjustmentAction_Temperature.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hvacTemperatureZone.push(
            HvacTemperatureAdjustmentAction_HvacTemperatureZone.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.driverTempCelsius = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.passengerTempCelsius = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacTemperatureAdjustmentAction {
    return {
      deltaCelsius: isSet(object.deltaCelsius) ? globalThis.Number(object.deltaCelsius) : 0,
      deltaPercent: isSet(object.deltaPercent) ? globalThis.Number(object.deltaPercent) : 0,
      absoluteCelsius: isSet(object.absoluteCelsius) ? globalThis.Number(object.absoluteCelsius) : 0,
      level: isSet(object.level) ? HvacTemperatureAdjustmentAction_Temperature.fromJSON(object.level) : undefined,
      hvacTemperatureZone: globalThis.Array.isArray(object?.hvacTemperatureZone)
        ? object.hvacTemperatureZone.map((e: any) => HvacTemperatureAdjustmentAction_HvacTemperatureZone.fromJSON(e))
        : [],
      driverTempCelsius: isSet(object.driverTempCelsius) ? globalThis.Number(object.driverTempCelsius) : 0,
      passengerTempCelsius: isSet(object.passengerTempCelsius) ? globalThis.Number(object.passengerTempCelsius) : 0,
    };
  },

  toJSON(message: HvacTemperatureAdjustmentAction): unknown {
    const obj: any = {};
    if (message.deltaCelsius !== 0) {
      obj.deltaCelsius = message.deltaCelsius;
    }
    if (message.deltaPercent !== 0) {
      obj.deltaPercent = Math.round(message.deltaPercent);
    }
    if (message.absoluteCelsius !== 0) {
      obj.absoluteCelsius = message.absoluteCelsius;
    }
    if (message.level !== undefined) {
      obj.level = HvacTemperatureAdjustmentAction_Temperature.toJSON(message.level);
    }
    if (message.hvacTemperatureZone?.length) {
      obj.hvacTemperatureZone = message.hvacTemperatureZone.map((e) =>
        HvacTemperatureAdjustmentAction_HvacTemperatureZone.toJSON(e)
      );
    }
    if (message.driverTempCelsius !== 0) {
      obj.driverTempCelsius = message.driverTempCelsius;
    }
    if (message.passengerTempCelsius !== 0) {
      obj.passengerTempCelsius = message.passengerTempCelsius;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacTemperatureAdjustmentAction>, I>>(base?: I): HvacTemperatureAdjustmentAction {
    return HvacTemperatureAdjustmentAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacTemperatureAdjustmentAction>, I>>(
    object: I,
  ): HvacTemperatureAdjustmentAction {
    const message = createBaseHvacTemperatureAdjustmentAction();
    message.deltaCelsius = object.deltaCelsius ?? 0;
    message.deltaPercent = object.deltaPercent ?? 0;
    message.absoluteCelsius = object.absoluteCelsius ?? 0;
    message.level = (object.level !== undefined && object.level !== null)
      ? HvacTemperatureAdjustmentAction_Temperature.fromPartial(object.level)
      : undefined;
    message.hvacTemperatureZone =
      object.hvacTemperatureZone?.map((e) => HvacTemperatureAdjustmentAction_HvacTemperatureZone.fromPartial(e)) || [];
    message.driverTempCelsius = object.driverTempCelsius ?? 0;
    message.passengerTempCelsius = object.passengerTempCelsius ?? 0;
    return message;
  },
};

function createBaseHvacTemperatureAdjustmentAction_Temperature(): HvacTemperatureAdjustmentAction_Temperature {
  return { tempUnknown: undefined, tempMin: undefined, tempMax: undefined };
}

export const HvacTemperatureAdjustmentAction_Temperature: MessageFns<HvacTemperatureAdjustmentAction_Temperature> = {
  encode(
    message: HvacTemperatureAdjustmentAction_Temperature,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.tempUnknown !== undefined) {
      Void.encode(message.tempUnknown, writer.uint32(10).fork()).join();
    }
    if (message.tempMin !== undefined) {
      Void.encode(message.tempMin, writer.uint32(18).fork()).join();
    }
    if (message.tempMax !== undefined) {
      Void.encode(message.tempMax, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacTemperatureAdjustmentAction_Temperature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacTemperatureAdjustmentAction_Temperature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tempUnknown = Void.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tempMin = Void.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tempMax = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacTemperatureAdjustmentAction_Temperature {
    return {
      tempUnknown: isSet(object.TEMPUNKNOWN) ? Void.fromJSON(object.TEMPUNKNOWN) : undefined,
      tempMin: isSet(object.TEMPMIN) ? Void.fromJSON(object.TEMPMIN) : undefined,
      tempMax: isSet(object.TEMPMAX) ? Void.fromJSON(object.TEMPMAX) : undefined,
    };
  },

  toJSON(message: HvacTemperatureAdjustmentAction_Temperature): unknown {
    const obj: any = {};
    if (message.tempUnknown !== undefined) {
      obj.TEMPUNKNOWN = Void.toJSON(message.tempUnknown);
    }
    if (message.tempMin !== undefined) {
      obj.TEMPMIN = Void.toJSON(message.tempMin);
    }
    if (message.tempMax !== undefined) {
      obj.TEMPMAX = Void.toJSON(message.tempMax);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacTemperatureAdjustmentAction_Temperature>, I>>(
    base?: I,
  ): HvacTemperatureAdjustmentAction_Temperature {
    return HvacTemperatureAdjustmentAction_Temperature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacTemperatureAdjustmentAction_Temperature>, I>>(
    object: I,
  ): HvacTemperatureAdjustmentAction_Temperature {
    const message = createBaseHvacTemperatureAdjustmentAction_Temperature();
    message.tempUnknown = (object.tempUnknown !== undefined && object.tempUnknown !== null)
      ? Void.fromPartial(object.tempUnknown)
      : undefined;
    message.tempMin = (object.tempMin !== undefined && object.tempMin !== null)
      ? Void.fromPartial(object.tempMin)
      : undefined;
    message.tempMax = (object.tempMax !== undefined && object.tempMax !== null)
      ? Void.fromPartial(object.tempMax)
      : undefined;
    return message;
  },
};

function createBaseHvacTemperatureAdjustmentAction_HvacTemperatureZone(): HvacTemperatureAdjustmentAction_HvacTemperatureZone {
  return {
    tempZoneUnknown: undefined,
    tempZoneFrontLeft: undefined,
    tempZoneFrontRight: undefined,
    tempZoneRear: undefined,
  };
}

export const HvacTemperatureAdjustmentAction_HvacTemperatureZone: MessageFns<
  HvacTemperatureAdjustmentAction_HvacTemperatureZone
> = {
  encode(
    message: HvacTemperatureAdjustmentAction_HvacTemperatureZone,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.tempZoneUnknown !== undefined) {
      Void.encode(message.tempZoneUnknown, writer.uint32(10).fork()).join();
    }
    if (message.tempZoneFrontLeft !== undefined) {
      Void.encode(message.tempZoneFrontLeft, writer.uint32(18).fork()).join();
    }
    if (message.tempZoneFrontRight !== undefined) {
      Void.encode(message.tempZoneFrontRight, writer.uint32(26).fork()).join();
    }
    if (message.tempZoneRear !== undefined) {
      Void.encode(message.tempZoneRear, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacTemperatureAdjustmentAction_HvacTemperatureZone {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacTemperatureAdjustmentAction_HvacTemperatureZone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tempZoneUnknown = Void.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tempZoneFrontLeft = Void.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tempZoneFrontRight = Void.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tempZoneRear = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacTemperatureAdjustmentAction_HvacTemperatureZone {
    return {
      tempZoneUnknown: isSet(object.TEMPZONEUNKNOWN) ? Void.fromJSON(object.TEMPZONEUNKNOWN) : undefined,
      tempZoneFrontLeft: isSet(object.TEMPZONEFRONTLEFT) ? Void.fromJSON(object.TEMPZONEFRONTLEFT) : undefined,
      tempZoneFrontRight: isSet(object.TEMPZONEFRONTRIGHT) ? Void.fromJSON(object.TEMPZONEFRONTRIGHT) : undefined,
      tempZoneRear: isSet(object.TEMPZONEREAR) ? Void.fromJSON(object.TEMPZONEREAR) : undefined,
    };
  },

  toJSON(message: HvacTemperatureAdjustmentAction_HvacTemperatureZone): unknown {
    const obj: any = {};
    if (message.tempZoneUnknown !== undefined) {
      obj.TEMPZONEUNKNOWN = Void.toJSON(message.tempZoneUnknown);
    }
    if (message.tempZoneFrontLeft !== undefined) {
      obj.TEMPZONEFRONTLEFT = Void.toJSON(message.tempZoneFrontLeft);
    }
    if (message.tempZoneFrontRight !== undefined) {
      obj.TEMPZONEFRONTRIGHT = Void.toJSON(message.tempZoneFrontRight);
    }
    if (message.tempZoneRear !== undefined) {
      obj.TEMPZONEREAR = Void.toJSON(message.tempZoneRear);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacTemperatureAdjustmentAction_HvacTemperatureZone>, I>>(
    base?: I,
  ): HvacTemperatureAdjustmentAction_HvacTemperatureZone {
    return HvacTemperatureAdjustmentAction_HvacTemperatureZone.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacTemperatureAdjustmentAction_HvacTemperatureZone>, I>>(
    object: I,
  ): HvacTemperatureAdjustmentAction_HvacTemperatureZone {
    const message = createBaseHvacTemperatureAdjustmentAction_HvacTemperatureZone();
    message.tempZoneUnknown = (object.tempZoneUnknown !== undefined && object.tempZoneUnknown !== null)
      ? Void.fromPartial(object.tempZoneUnknown)
      : undefined;
    message.tempZoneFrontLeft = (object.tempZoneFrontLeft !== undefined && object.tempZoneFrontLeft !== null)
      ? Void.fromPartial(object.tempZoneFrontLeft)
      : undefined;
    message.tempZoneFrontRight = (object.tempZoneFrontRight !== undefined && object.tempZoneFrontRight !== null)
      ? Void.fromPartial(object.tempZoneFrontRight)
      : undefined;
    message.tempZoneRear = (object.tempZoneRear !== undefined && object.tempZoneRear !== null)
      ? Void.fromPartial(object.tempZoneRear)
      : undefined;
    return message;
  },
};

function createBaseGetNearbyChargingSites(): GetNearbyChargingSites {
  return { includeMetaData: false, radius: 0, count: 0 };
}

export const GetNearbyChargingSites: MessageFns<GetNearbyChargingSites> = {
  encode(message: GetNearbyChargingSites, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.includeMetaData !== false) {
      writer.uint32(8).bool(message.includeMetaData);
    }
    if (message.radius !== 0) {
      writer.uint32(16).int32(message.radius);
    }
    if (message.count !== 0) {
      writer.uint32(24).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetNearbyChargingSites {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNearbyChargingSites();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.includeMetaData = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.radius = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNearbyChargingSites {
    return {
      includeMetaData: isSet(object.includeMetaData) ? globalThis.Boolean(object.includeMetaData) : false,
      radius: isSet(object.radius) ? globalThis.Number(object.radius) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: GetNearbyChargingSites): unknown {
    const obj: any = {};
    if (message.includeMetaData !== false) {
      obj.includeMetaData = message.includeMetaData;
    }
    if (message.radius !== 0) {
      obj.radius = Math.round(message.radius);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNearbyChargingSites>, I>>(base?: I): GetNearbyChargingSites {
    return GetNearbyChargingSites.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNearbyChargingSites>, I>>(object: I): GetNearbyChargingSites {
    const message = createBaseGetNearbyChargingSites();
    message.includeMetaData = object.includeMetaData ?? false;
    message.radius = object.radius ?? 0;
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseNearbyChargingSites(): NearbyChargingSites {
  return { timestamp: undefined, superchargers: [], congestionSyncTimeUtcSecs: 0 };
}

export const NearbyChargingSites: MessageFns<NearbyChargingSites> = {
  encode(message: NearbyChargingSites, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    for (const v of message.superchargers) {
      Superchargers.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.congestionSyncTimeUtcSecs !== 0) {
      writer.uint32(32).int64(message.congestionSyncTimeUtcSecs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NearbyChargingSites {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNearbyChargingSites();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.superchargers.push(Superchargers.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.congestionSyncTimeUtcSecs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NearbyChargingSites {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      superchargers: globalThis.Array.isArray(object?.superchargers)
        ? object.superchargers.map((e: any) => Superchargers.fromJSON(e))
        : [],
      congestionSyncTimeUtcSecs: isSet(object.congestionSyncTimeUtcSecs)
        ? globalThis.Number(object.congestionSyncTimeUtcSecs)
        : 0,
    };
  },

  toJSON(message: NearbyChargingSites): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.superchargers?.length) {
      obj.superchargers = message.superchargers.map((e) => Superchargers.toJSON(e));
    }
    if (message.congestionSyncTimeUtcSecs !== 0) {
      obj.congestionSyncTimeUtcSecs = Math.round(message.congestionSyncTimeUtcSecs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NearbyChargingSites>, I>>(base?: I): NearbyChargingSites {
    return NearbyChargingSites.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NearbyChargingSites>, I>>(object: I): NearbyChargingSites {
    const message = createBaseNearbyChargingSites();
    message.timestamp = object.timestamp ?? undefined;
    message.superchargers = object.superchargers?.map((e) => Superchargers.fromPartial(e)) || [];
    message.congestionSyncTimeUtcSecs = object.congestionSyncTimeUtcSecs ?? 0;
    return message;
  },
};

function createBaseSuperchargers(): Superchargers {
  return {
    id: 0,
    amenities: "",
    availableStalls: 0,
    billingInfo: "",
    billingTime: "",
    city: "",
    country: "",
    distanceMiles: 0,
    district: "",
    location: undefined,
    name: "",
    postalCode: "",
    siteClosed: false,
    state: "",
    streetAddress: "",
    totalStalls: 0,
    withinRange: false,
    maxPowerKw: 0,
    outOfOrderStallsNumber: 0,
    outOfOrderStallsNames: "",
  };
}

export const Superchargers: MessageFns<Superchargers> = {
  encode(message: Superchargers, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.amenities !== "") {
      writer.uint32(18).string(message.amenities);
    }
    if (message.availableStalls !== 0) {
      writer.uint32(24).int32(message.availableStalls);
    }
    if (message.billingInfo !== "") {
      writer.uint32(34).string(message.billingInfo);
    }
    if (message.billingTime !== "") {
      writer.uint32(42).string(message.billingTime);
    }
    if (message.city !== "") {
      writer.uint32(50).string(message.city);
    }
    if (message.country !== "") {
      writer.uint32(58).string(message.country);
    }
    if (message.distanceMiles !== 0) {
      writer.uint32(69).float(message.distanceMiles);
    }
    if (message.district !== "") {
      writer.uint32(74).string(message.district);
    }
    if (message.location !== undefined) {
      LatLong.encode(message.location, writer.uint32(82).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(90).string(message.name);
    }
    if (message.postalCode !== "") {
      writer.uint32(98).string(message.postalCode);
    }
    if (message.siteClosed !== false) {
      writer.uint32(104).bool(message.siteClosed);
    }
    if (message.state !== "") {
      writer.uint32(114).string(message.state);
    }
    if (message.streetAddress !== "") {
      writer.uint32(122).string(message.streetAddress);
    }
    if (message.totalStalls !== 0) {
      writer.uint32(128).int32(message.totalStalls);
    }
    if (message.withinRange !== false) {
      writer.uint32(136).bool(message.withinRange);
    }
    if (message.maxPowerKw !== 0) {
      writer.uint32(144).int32(message.maxPowerKw);
    }
    if (message.outOfOrderStallsNumber !== 0) {
      writer.uint32(152).int32(message.outOfOrderStallsNumber);
    }
    if (message.outOfOrderStallsNames !== "") {
      writer.uint32(162).string(message.outOfOrderStallsNames);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Superchargers {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuperchargers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amenities = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.availableStalls = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.billingInfo = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.billingTime = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.distanceMiles = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.district = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.location = LatLong.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.postalCode = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.siteClosed = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.streetAddress = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.totalStalls = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.withinRange = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.maxPowerKw = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.outOfOrderStallsNumber = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.outOfOrderStallsNames = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Superchargers {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      amenities: isSet(object.amenities) ? globalThis.String(object.amenities) : "",
      availableStalls: isSet(object.availableStalls) ? globalThis.Number(object.availableStalls) : 0,
      billingInfo: isSet(object.billingInfo) ? globalThis.String(object.billingInfo) : "",
      billingTime: isSet(object.billingTime) ? globalThis.String(object.billingTime) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      distanceMiles: isSet(object.distanceMiles) ? globalThis.Number(object.distanceMiles) : 0,
      district: isSet(object.district) ? globalThis.String(object.district) : "",
      location: isSet(object.location) ? LatLong.fromJSON(object.location) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      postalCode: isSet(object.postalCode) ? globalThis.String(object.postalCode) : "",
      siteClosed: isSet(object.siteClosed) ? globalThis.Boolean(object.siteClosed) : false,
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      streetAddress: isSet(object.streetAddress) ? globalThis.String(object.streetAddress) : "",
      totalStalls: isSet(object.totalStalls) ? globalThis.Number(object.totalStalls) : 0,
      withinRange: isSet(object.withinRange) ? globalThis.Boolean(object.withinRange) : false,
      maxPowerKw: isSet(object.maxPowerKw) ? globalThis.Number(object.maxPowerKw) : 0,
      outOfOrderStallsNumber: isSet(object.outOfOrderStallsNumber)
        ? globalThis.Number(object.outOfOrderStallsNumber)
        : 0,
      outOfOrderStallsNames: isSet(object.outOfOrderStallsNames) ? globalThis.String(object.outOfOrderStallsNames) : "",
    };
  },

  toJSON(message: Superchargers): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.amenities !== "") {
      obj.amenities = message.amenities;
    }
    if (message.availableStalls !== 0) {
      obj.availableStalls = Math.round(message.availableStalls);
    }
    if (message.billingInfo !== "") {
      obj.billingInfo = message.billingInfo;
    }
    if (message.billingTime !== "") {
      obj.billingTime = message.billingTime;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.distanceMiles !== 0) {
      obj.distanceMiles = message.distanceMiles;
    }
    if (message.district !== "") {
      obj.district = message.district;
    }
    if (message.location !== undefined) {
      obj.location = LatLong.toJSON(message.location);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.postalCode !== "") {
      obj.postalCode = message.postalCode;
    }
    if (message.siteClosed !== false) {
      obj.siteClosed = message.siteClosed;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.streetAddress !== "") {
      obj.streetAddress = message.streetAddress;
    }
    if (message.totalStalls !== 0) {
      obj.totalStalls = Math.round(message.totalStalls);
    }
    if (message.withinRange !== false) {
      obj.withinRange = message.withinRange;
    }
    if (message.maxPowerKw !== 0) {
      obj.maxPowerKw = Math.round(message.maxPowerKw);
    }
    if (message.outOfOrderStallsNumber !== 0) {
      obj.outOfOrderStallsNumber = Math.round(message.outOfOrderStallsNumber);
    }
    if (message.outOfOrderStallsNames !== "") {
      obj.outOfOrderStallsNames = message.outOfOrderStallsNames;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Superchargers>, I>>(base?: I): Superchargers {
    return Superchargers.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Superchargers>, I>>(object: I): Superchargers {
    const message = createBaseSuperchargers();
    message.id = object.id ?? 0;
    message.amenities = object.amenities ?? "";
    message.availableStalls = object.availableStalls ?? 0;
    message.billingInfo = object.billingInfo ?? "";
    message.billingTime = object.billingTime ?? "";
    message.city = object.city ?? "";
    message.country = object.country ?? "";
    message.distanceMiles = object.distanceMiles ?? 0;
    message.district = object.district ?? "";
    message.location = (object.location !== undefined && object.location !== null)
      ? LatLong.fromPartial(object.location)
      : undefined;
    message.name = object.name ?? "";
    message.postalCode = object.postalCode ?? "";
    message.siteClosed = object.siteClosed ?? false;
    message.state = object.state ?? "";
    message.streetAddress = object.streetAddress ?? "";
    message.totalStalls = object.totalStalls ?? 0;
    message.withinRange = object.withinRange ?? false;
    message.maxPowerKw = object.maxPowerKw ?? 0;
    message.outOfOrderStallsNumber = object.outOfOrderStallsNumber ?? 0;
    message.outOfOrderStallsNames = object.outOfOrderStallsNames ?? "";
    return message;
  },
};

function createBaseMediaPlayAction(): MediaPlayAction {
  return {};
}

export const MediaPlayAction: MessageFns<MediaPlayAction> = {
  encode(_: MediaPlayAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaPlayAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaPlayAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaPlayAction {
    return {};
  },

  toJSON(_: MediaPlayAction): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaPlayAction>, I>>(base?: I): MediaPlayAction {
    return MediaPlayAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaPlayAction>, I>>(_: I): MediaPlayAction {
    const message = createBaseMediaPlayAction();
    return message;
  },
};

function createBaseMediaUpdateVolume(): MediaUpdateVolume {
  return { volumeDelta: undefined, volumeAbsoluteFloat: undefined };
}

export const MediaUpdateVolume: MessageFns<MediaUpdateVolume> = {
  encode(message: MediaUpdateVolume, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.volumeDelta !== undefined) {
      writer.uint32(8).sint32(message.volumeDelta);
    }
    if (message.volumeAbsoluteFloat !== undefined) {
      writer.uint32(29).float(message.volumeAbsoluteFloat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaUpdateVolume {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaUpdateVolume();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.volumeDelta = reader.sint32();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.volumeAbsoluteFloat = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaUpdateVolume {
    return {
      volumeDelta: isSet(object.volumeDelta) ? globalThis.Number(object.volumeDelta) : undefined,
      volumeAbsoluteFloat: isSet(object.volumeAbsoluteFloat)
        ? globalThis.Number(object.volumeAbsoluteFloat)
        : undefined,
    };
  },

  toJSON(message: MediaUpdateVolume): unknown {
    const obj: any = {};
    if (message.volumeDelta !== undefined) {
      obj.volumeDelta = Math.round(message.volumeDelta);
    }
    if (message.volumeAbsoluteFloat !== undefined) {
      obj.volumeAbsoluteFloat = message.volumeAbsoluteFloat;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaUpdateVolume>, I>>(base?: I): MediaUpdateVolume {
    return MediaUpdateVolume.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaUpdateVolume>, I>>(object: I): MediaUpdateVolume {
    const message = createBaseMediaUpdateVolume();
    message.volumeDelta = object.volumeDelta ?? undefined;
    message.volumeAbsoluteFloat = object.volumeAbsoluteFloat ?? undefined;
    return message;
  },
};

function createBaseMediaNextFavorite(): MediaNextFavorite {
  return {};
}

export const MediaNextFavorite: MessageFns<MediaNextFavorite> = {
  encode(_: MediaNextFavorite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaNextFavorite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaNextFavorite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaNextFavorite {
    return {};
  },

  toJSON(_: MediaNextFavorite): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaNextFavorite>, I>>(base?: I): MediaNextFavorite {
    return MediaNextFavorite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaNextFavorite>, I>>(_: I): MediaNextFavorite {
    const message = createBaseMediaNextFavorite();
    return message;
  },
};

function createBaseMediaPreviousFavorite(): MediaPreviousFavorite {
  return {};
}

export const MediaPreviousFavorite: MessageFns<MediaPreviousFavorite> = {
  encode(_: MediaPreviousFavorite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaPreviousFavorite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaPreviousFavorite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaPreviousFavorite {
    return {};
  },

  toJSON(_: MediaPreviousFavorite): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaPreviousFavorite>, I>>(base?: I): MediaPreviousFavorite {
    return MediaPreviousFavorite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaPreviousFavorite>, I>>(_: I): MediaPreviousFavorite {
    const message = createBaseMediaPreviousFavorite();
    return message;
  },
};

function createBaseMediaNextTrack(): MediaNextTrack {
  return {};
}

export const MediaNextTrack: MessageFns<MediaNextTrack> = {
  encode(_: MediaNextTrack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaNextTrack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaNextTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaNextTrack {
    return {};
  },

  toJSON(_: MediaNextTrack): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaNextTrack>, I>>(base?: I): MediaNextTrack {
    return MediaNextTrack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaNextTrack>, I>>(_: I): MediaNextTrack {
    const message = createBaseMediaNextTrack();
    return message;
  },
};

function createBaseMediaPreviousTrack(): MediaPreviousTrack {
  return {};
}

export const MediaPreviousTrack: MessageFns<MediaPreviousTrack> = {
  encode(_: MediaPreviousTrack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaPreviousTrack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaPreviousTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MediaPreviousTrack {
    return {};
  },

  toJSON(_: MediaPreviousTrack): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaPreviousTrack>, I>>(base?: I): MediaPreviousTrack {
    return MediaPreviousTrack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaPreviousTrack>, I>>(_: I): MediaPreviousTrack {
    const message = createBaseMediaPreviousTrack();
    return message;
  },
};

function createBaseVehicleControlCancelSoftwareUpdateAction(): VehicleControlCancelSoftwareUpdateAction {
  return {};
}

export const VehicleControlCancelSoftwareUpdateAction: MessageFns<VehicleControlCancelSoftwareUpdateAction> = {
  encode(_: VehicleControlCancelSoftwareUpdateAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlCancelSoftwareUpdateAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlCancelSoftwareUpdateAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VehicleControlCancelSoftwareUpdateAction {
    return {};
  },

  toJSON(_: VehicleControlCancelSoftwareUpdateAction): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlCancelSoftwareUpdateAction>, I>>(
    base?: I,
  ): VehicleControlCancelSoftwareUpdateAction {
    return VehicleControlCancelSoftwareUpdateAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlCancelSoftwareUpdateAction>, I>>(
    _: I,
  ): VehicleControlCancelSoftwareUpdateAction {
    const message = createBaseVehicleControlCancelSoftwareUpdateAction();
    return message;
  },
};

function createBaseVehicleControlFlashLightsAction(): VehicleControlFlashLightsAction {
  return {};
}

export const VehicleControlFlashLightsAction: MessageFns<VehicleControlFlashLightsAction> = {
  encode(_: VehicleControlFlashLightsAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlFlashLightsAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlFlashLightsAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VehicleControlFlashLightsAction {
    return {};
  },

  toJSON(_: VehicleControlFlashLightsAction): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlFlashLightsAction>, I>>(base?: I): VehicleControlFlashLightsAction {
    return VehicleControlFlashLightsAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlFlashLightsAction>, I>>(_: I): VehicleControlFlashLightsAction {
    const message = createBaseVehicleControlFlashLightsAction();
    return message;
  },
};

function createBaseVehicleControlHonkHornAction(): VehicleControlHonkHornAction {
  return {};
}

export const VehicleControlHonkHornAction: MessageFns<VehicleControlHonkHornAction> = {
  encode(_: VehicleControlHonkHornAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlHonkHornAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlHonkHornAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VehicleControlHonkHornAction {
    return {};
  },

  toJSON(_: VehicleControlHonkHornAction): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlHonkHornAction>, I>>(base?: I): VehicleControlHonkHornAction {
    return VehicleControlHonkHornAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlHonkHornAction>, I>>(_: I): VehicleControlHonkHornAction {
    const message = createBaseVehicleControlHonkHornAction();
    return message;
  },
};

function createBaseVehicleControlResetValetPinAction(): VehicleControlResetValetPinAction {
  return {};
}

export const VehicleControlResetValetPinAction: MessageFns<VehicleControlResetValetPinAction> = {
  encode(_: VehicleControlResetValetPinAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlResetValetPinAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlResetValetPinAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VehicleControlResetValetPinAction {
    return {};
  },

  toJSON(_: VehicleControlResetValetPinAction): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlResetValetPinAction>, I>>(
    base?: I,
  ): VehicleControlResetValetPinAction {
    return VehicleControlResetValetPinAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlResetValetPinAction>, I>>(
    _: I,
  ): VehicleControlResetValetPinAction {
    const message = createBaseVehicleControlResetValetPinAction();
    return message;
  },
};

function createBaseVehicleControlScheduleSoftwareUpdateAction(): VehicleControlScheduleSoftwareUpdateAction {
  return { offsetSec: 0 };
}

export const VehicleControlScheduleSoftwareUpdateAction: MessageFns<VehicleControlScheduleSoftwareUpdateAction> = {
  encode(message: VehicleControlScheduleSoftwareUpdateAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offsetSec !== 0) {
      writer.uint32(8).int32(message.offsetSec);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlScheduleSoftwareUpdateAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlScheduleSoftwareUpdateAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.offsetSec = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlScheduleSoftwareUpdateAction {
    return { offsetSec: isSet(object.offsetSec) ? globalThis.Number(object.offsetSec) : 0 };
  },

  toJSON(message: VehicleControlScheduleSoftwareUpdateAction): unknown {
    const obj: any = {};
    if (message.offsetSec !== 0) {
      obj.offsetSec = Math.round(message.offsetSec);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlScheduleSoftwareUpdateAction>, I>>(
    base?: I,
  ): VehicleControlScheduleSoftwareUpdateAction {
    return VehicleControlScheduleSoftwareUpdateAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlScheduleSoftwareUpdateAction>, I>>(
    object: I,
  ): VehicleControlScheduleSoftwareUpdateAction {
    const message = createBaseVehicleControlScheduleSoftwareUpdateAction();
    message.offsetSec = object.offsetSec ?? 0;
    return message;
  },
};

function createBaseVehicleControlSetSentryModeAction(): VehicleControlSetSentryModeAction {
  return { on: false };
}

export const VehicleControlSetSentryModeAction: MessageFns<VehicleControlSetSentryModeAction> = {
  encode(message: VehicleControlSetSentryModeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlSetSentryModeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlSetSentryModeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlSetSentryModeAction {
    return { on: isSet(object.on) ? globalThis.Boolean(object.on) : false };
  },

  toJSON(message: VehicleControlSetSentryModeAction): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlSetSentryModeAction>, I>>(
    base?: I,
  ): VehicleControlSetSentryModeAction {
    return VehicleControlSetSentryModeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlSetSentryModeAction>, I>>(
    object: I,
  ): VehicleControlSetSentryModeAction {
    const message = createBaseVehicleControlSetSentryModeAction();
    message.on = object.on ?? false;
    return message;
  },
};

function createBaseVehicleControlSetValetModeAction(): VehicleControlSetValetModeAction {
  return { on: false, password: "" };
}

export const VehicleControlSetValetModeAction: MessageFns<VehicleControlSetValetModeAction> = {
  encode(message: VehicleControlSetValetModeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlSetValetModeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlSetValetModeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlSetValetModeAction {
    return {
      on: isSet(object.on) ? globalThis.Boolean(object.on) : false,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: VehicleControlSetValetModeAction): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlSetValetModeAction>, I>>(
    base?: I,
  ): VehicleControlSetValetModeAction {
    return VehicleControlSetValetModeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlSetValetModeAction>, I>>(
    object: I,
  ): VehicleControlSetValetModeAction {
    const message = createBaseVehicleControlSetValetModeAction();
    message.on = object.on ?? false;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseVehicleControlSunroofOpenCloseAction(): VehicleControlSunroofOpenCloseAction {
  return { absoluteLevel: undefined, deltaLevel: undefined, vent: undefined, close: undefined, open: undefined };
}

export const VehicleControlSunroofOpenCloseAction: MessageFns<VehicleControlSunroofOpenCloseAction> = {
  encode(message: VehicleControlSunroofOpenCloseAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.absoluteLevel !== undefined) {
      writer.uint32(8).int32(message.absoluteLevel);
    }
    if (message.deltaLevel !== undefined) {
      writer.uint32(16).sint32(message.deltaLevel);
    }
    if (message.vent !== undefined) {
      Void.encode(message.vent, writer.uint32(26).fork()).join();
    }
    if (message.close !== undefined) {
      Void.encode(message.close, writer.uint32(34).fork()).join();
    }
    if (message.open !== undefined) {
      Void.encode(message.open, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlSunroofOpenCloseAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlSunroofOpenCloseAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.absoluteLevel = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deltaLevel = reader.sint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vent = Void.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.close = Void.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.open = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlSunroofOpenCloseAction {
    return {
      absoluteLevel: isSet(object.absoluteLevel) ? globalThis.Number(object.absoluteLevel) : undefined,
      deltaLevel: isSet(object.deltaLevel) ? globalThis.Number(object.deltaLevel) : undefined,
      vent: isSet(object.vent) ? Void.fromJSON(object.vent) : undefined,
      close: isSet(object.close) ? Void.fromJSON(object.close) : undefined,
      open: isSet(object.open) ? Void.fromJSON(object.open) : undefined,
    };
  },

  toJSON(message: VehicleControlSunroofOpenCloseAction): unknown {
    const obj: any = {};
    if (message.absoluteLevel !== undefined) {
      obj.absoluteLevel = Math.round(message.absoluteLevel);
    }
    if (message.deltaLevel !== undefined) {
      obj.deltaLevel = Math.round(message.deltaLevel);
    }
    if (message.vent !== undefined) {
      obj.vent = Void.toJSON(message.vent);
    }
    if (message.close !== undefined) {
      obj.close = Void.toJSON(message.close);
    }
    if (message.open !== undefined) {
      obj.open = Void.toJSON(message.open);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlSunroofOpenCloseAction>, I>>(
    base?: I,
  ): VehicleControlSunroofOpenCloseAction {
    return VehicleControlSunroofOpenCloseAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlSunroofOpenCloseAction>, I>>(
    object: I,
  ): VehicleControlSunroofOpenCloseAction {
    const message = createBaseVehicleControlSunroofOpenCloseAction();
    message.absoluteLevel = object.absoluteLevel ?? undefined;
    message.deltaLevel = object.deltaLevel ?? undefined;
    message.vent = (object.vent !== undefined && object.vent !== null) ? Void.fromPartial(object.vent) : undefined;
    message.close = (object.close !== undefined && object.close !== null) ? Void.fromPartial(object.close) : undefined;
    message.open = (object.open !== undefined && object.open !== null) ? Void.fromPartial(object.open) : undefined;
    return message;
  },
};

function createBaseVehicleControlTriggerHomelinkAction(): VehicleControlTriggerHomelinkAction {
  return { location: undefined, token: "" };
}

export const VehicleControlTriggerHomelinkAction: MessageFns<VehicleControlTriggerHomelinkAction> = {
  encode(message: VehicleControlTriggerHomelinkAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.location !== undefined) {
      LatLong.encode(message.location, writer.uint32(10).fork()).join();
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlTriggerHomelinkAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlTriggerHomelinkAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.location = LatLong.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlTriggerHomelinkAction {
    return {
      location: isSet(object.location) ? LatLong.fromJSON(object.location) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: VehicleControlTriggerHomelinkAction): unknown {
    const obj: any = {};
    if (message.location !== undefined) {
      obj.location = LatLong.toJSON(message.location);
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlTriggerHomelinkAction>, I>>(
    base?: I,
  ): VehicleControlTriggerHomelinkAction {
    return VehicleControlTriggerHomelinkAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlTriggerHomelinkAction>, I>>(
    object: I,
  ): VehicleControlTriggerHomelinkAction {
    const message = createBaseVehicleControlTriggerHomelinkAction();
    message.location = (object.location !== undefined && object.location !== null)
      ? LatLong.fromPartial(object.location)
      : undefined;
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseVehicleControlWindowAction(): VehicleControlWindowAction {
  return { unknown: undefined, vent: undefined, close: undefined };
}

export const VehicleControlWindowAction: MessageFns<VehicleControlWindowAction> = {
  encode(message: VehicleControlWindowAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unknown !== undefined) {
      Void.encode(message.unknown, writer.uint32(18).fork()).join();
    }
    if (message.vent !== undefined) {
      Void.encode(message.vent, writer.uint32(26).fork()).join();
    }
    if (message.close !== undefined) {
      Void.encode(message.close, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlWindowAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlWindowAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unknown = Void.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vent = Void.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.close = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlWindowAction {
    return {
      unknown: isSet(object.unknown) ? Void.fromJSON(object.unknown) : undefined,
      vent: isSet(object.vent) ? Void.fromJSON(object.vent) : undefined,
      close: isSet(object.close) ? Void.fromJSON(object.close) : undefined,
    };
  },

  toJSON(message: VehicleControlWindowAction): unknown {
    const obj: any = {};
    if (message.unknown !== undefined) {
      obj.unknown = Void.toJSON(message.unknown);
    }
    if (message.vent !== undefined) {
      obj.vent = Void.toJSON(message.vent);
    }
    if (message.close !== undefined) {
      obj.close = Void.toJSON(message.close);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlWindowAction>, I>>(base?: I): VehicleControlWindowAction {
    return VehicleControlWindowAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlWindowAction>, I>>(object: I): VehicleControlWindowAction {
    const message = createBaseVehicleControlWindowAction();
    message.unknown = (object.unknown !== undefined && object.unknown !== null)
      ? Void.fromPartial(object.unknown)
      : undefined;
    message.vent = (object.vent !== undefined && object.vent !== null) ? Void.fromPartial(object.vent) : undefined;
    message.close = (object.close !== undefined && object.close !== null) ? Void.fromPartial(object.close) : undefined;
    return message;
  },
};

function createBaseHvacBioweaponModeAction(): HvacBioweaponModeAction {
  return { on: false, manualOverride: false };
}

export const HvacBioweaponModeAction: MessageFns<HvacBioweaponModeAction> = {
  encode(message: HvacBioweaponModeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    if (message.manualOverride !== false) {
      writer.uint32(16).bool(message.manualOverride);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacBioweaponModeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacBioweaponModeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.manualOverride = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacBioweaponModeAction {
    return {
      on: isSet(object.on) ? globalThis.Boolean(object.on) : false,
      manualOverride: isSet(object.manualOverride) ? globalThis.Boolean(object.manualOverride) : false,
    };
  },

  toJSON(message: HvacBioweaponModeAction): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    if (message.manualOverride !== false) {
      obj.manualOverride = message.manualOverride;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacBioweaponModeAction>, I>>(base?: I): HvacBioweaponModeAction {
    return HvacBioweaponModeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacBioweaponModeAction>, I>>(object: I): HvacBioweaponModeAction {
    const message = createBaseHvacBioweaponModeAction();
    message.on = object.on ?? false;
    message.manualOverride = object.manualOverride ?? false;
    return message;
  },
};

function createBaseAutoSeatClimateAction(): AutoSeatClimateAction {
  return { carseat: [] };
}

export const AutoSeatClimateAction: MessageFns<AutoSeatClimateAction> = {
  encode(message: AutoSeatClimateAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.carseat) {
      AutoSeatClimateAction_CarSeat.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoSeatClimateAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoSeatClimateAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.carseat.push(AutoSeatClimateAction_CarSeat.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoSeatClimateAction {
    return {
      carseat: globalThis.Array.isArray(object?.carseat)
        ? object.carseat.map((e: any) => AutoSeatClimateAction_CarSeat.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AutoSeatClimateAction): unknown {
    const obj: any = {};
    if (message.carseat?.length) {
      obj.carseat = message.carseat.map((e) => AutoSeatClimateAction_CarSeat.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoSeatClimateAction>, I>>(base?: I): AutoSeatClimateAction {
    return AutoSeatClimateAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoSeatClimateAction>, I>>(object: I): AutoSeatClimateAction {
    const message = createBaseAutoSeatClimateAction();
    message.carseat = object.carseat?.map((e) => AutoSeatClimateAction_CarSeat.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAutoSeatClimateAction_CarSeat(): AutoSeatClimateAction_CarSeat {
  return { on: false, seatPosition: 0 };
}

export const AutoSeatClimateAction_CarSeat: MessageFns<AutoSeatClimateAction_CarSeat> = {
  encode(message: AutoSeatClimateAction_CarSeat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    if (message.seatPosition !== 0) {
      writer.uint32(16).int32(message.seatPosition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoSeatClimateAction_CarSeat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoSeatClimateAction_CarSeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.seatPosition = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoSeatClimateAction_CarSeat {
    return {
      on: isSet(object.on) ? globalThis.Boolean(object.on) : false,
      seatPosition: isSet(object.seatPosition)
        ? autoSeatClimateAction_AutoSeatPositionEFromJSON(object.seatPosition)
        : 0,
    };
  },

  toJSON(message: AutoSeatClimateAction_CarSeat): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    if (message.seatPosition !== 0) {
      obj.seatPosition = autoSeatClimateAction_AutoSeatPositionEToJSON(message.seatPosition);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoSeatClimateAction_CarSeat>, I>>(base?: I): AutoSeatClimateAction_CarSeat {
    return AutoSeatClimateAction_CarSeat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoSeatClimateAction_CarSeat>, I>>(
    object: I,
  ): AutoSeatClimateAction_CarSeat {
    const message = createBaseAutoSeatClimateAction_CarSeat();
    message.on = object.on ?? false;
    message.seatPosition = object.seatPosition ?? 0;
    return message;
  },
};

function createBasePing(): Ping {
  return { pingId: 0, localTimestamp: undefined, lastRemoteTimestamp: undefined };
}

export const Ping: MessageFns<Ping> = {
  encode(message: Ping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pingId !== 0) {
      writer.uint32(8).int32(message.pingId);
    }
    if (message.localTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.localTimestamp), writer.uint32(18).fork()).join();
    }
    if (message.lastRemoteTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.lastRemoteTimestamp), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pingId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.localTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastRemoteTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ping {
    return {
      pingId: isSet(object.pingId) ? globalThis.Number(object.pingId) : 0,
      localTimestamp: isSet(object.localTimestamp) ? fromJsonTimestamp(object.localTimestamp) : undefined,
      lastRemoteTimestamp: isSet(object.lastRemoteTimestamp)
        ? fromJsonTimestamp(object.lastRemoteTimestamp)
        : undefined,
    };
  },

  toJSON(message: Ping): unknown {
    const obj: any = {};
    if (message.pingId !== 0) {
      obj.pingId = Math.round(message.pingId);
    }
    if (message.localTimestamp !== undefined) {
      obj.localTimestamp = message.localTimestamp.toISOString();
    }
    if (message.lastRemoteTimestamp !== undefined) {
      obj.lastRemoteTimestamp = message.lastRemoteTimestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ping>, I>>(base?: I): Ping {
    return Ping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ping>, I>>(object: I): Ping {
    const message = createBasePing();
    message.pingId = object.pingId ?? 0;
    message.localTimestamp = object.localTimestamp ?? undefined;
    message.lastRemoteTimestamp = object.lastRemoteTimestamp ?? undefined;
    return message;
  },
};

function createBaseScheduledChargingAction(): ScheduledChargingAction {
  return { enabled: false, chargingTime: 0 };
}

export const ScheduledChargingAction: MessageFns<ScheduledChargingAction> = {
  encode(message: ScheduledChargingAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.chargingTime !== 0) {
      writer.uint32(16).int32(message.chargingTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledChargingAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledChargingAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chargingTime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledChargingAction {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      chargingTime: isSet(object.chargingTime) ? globalThis.Number(object.chargingTime) : 0,
    };
  },

  toJSON(message: ScheduledChargingAction): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.chargingTime !== 0) {
      obj.chargingTime = Math.round(message.chargingTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScheduledChargingAction>, I>>(base?: I): ScheduledChargingAction {
    return ScheduledChargingAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduledChargingAction>, I>>(object: I): ScheduledChargingAction {
    const message = createBaseScheduledChargingAction();
    message.enabled = object.enabled ?? false;
    message.chargingTime = object.chargingTime ?? 0;
    return message;
  },
};

function createBaseScheduledDepartureAction(): ScheduledDepartureAction {
  return {
    enabled: false,
    departureTime: 0,
    preconditioningTimes: undefined,
    offPeakChargingTimes: undefined,
    offPeakHoursEndTime: 0,
  };
}

export const ScheduledDepartureAction: MessageFns<ScheduledDepartureAction> = {
  encode(message: ScheduledDepartureAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.departureTime !== 0) {
      writer.uint32(16).int32(message.departureTime);
    }
    if (message.preconditioningTimes !== undefined) {
      PreconditioningTimes.encode(message.preconditioningTimes, writer.uint32(26).fork()).join();
    }
    if (message.offPeakChargingTimes !== undefined) {
      OffPeakChargingTimes.encode(message.offPeakChargingTimes, writer.uint32(34).fork()).join();
    }
    if (message.offPeakHoursEndTime !== 0) {
      writer.uint32(40).int32(message.offPeakHoursEndTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledDepartureAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledDepartureAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.departureTime = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.preconditioningTimes = PreconditioningTimes.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.offPeakChargingTimes = OffPeakChargingTimes.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.offPeakHoursEndTime = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduledDepartureAction {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      departureTime: isSet(object.departureTime) ? globalThis.Number(object.departureTime) : 0,
      preconditioningTimes: isSet(object.preconditioningTimes)
        ? PreconditioningTimes.fromJSON(object.preconditioningTimes)
        : undefined,
      offPeakChargingTimes: isSet(object.offPeakChargingTimes)
        ? OffPeakChargingTimes.fromJSON(object.offPeakChargingTimes)
        : undefined,
      offPeakHoursEndTime: isSet(object.offPeakHoursEndTime) ? globalThis.Number(object.offPeakHoursEndTime) : 0,
    };
  },

  toJSON(message: ScheduledDepartureAction): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.departureTime !== 0) {
      obj.departureTime = Math.round(message.departureTime);
    }
    if (message.preconditioningTimes !== undefined) {
      obj.preconditioningTimes = PreconditioningTimes.toJSON(message.preconditioningTimes);
    }
    if (message.offPeakChargingTimes !== undefined) {
      obj.offPeakChargingTimes = OffPeakChargingTimes.toJSON(message.offPeakChargingTimes);
    }
    if (message.offPeakHoursEndTime !== 0) {
      obj.offPeakHoursEndTime = Math.round(message.offPeakHoursEndTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ScheduledDepartureAction>, I>>(base?: I): ScheduledDepartureAction {
    return ScheduledDepartureAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduledDepartureAction>, I>>(object: I): ScheduledDepartureAction {
    const message = createBaseScheduledDepartureAction();
    message.enabled = object.enabled ?? false;
    message.departureTime = object.departureTime ?? 0;
    message.preconditioningTimes = (object.preconditioningTimes !== undefined && object.preconditioningTimes !== null)
      ? PreconditioningTimes.fromPartial(object.preconditioningTimes)
      : undefined;
    message.offPeakChargingTimes = (object.offPeakChargingTimes !== undefined && object.offPeakChargingTimes !== null)
      ? OffPeakChargingTimes.fromPartial(object.offPeakChargingTimes)
      : undefined;
    message.offPeakHoursEndTime = object.offPeakHoursEndTime ?? 0;
    return message;
  },
};

function createBaseHvacClimateKeeperAction(): HvacClimateKeeperAction {
  return { ClimateKeeperAction: 0, manualOverride: false };
}

export const HvacClimateKeeperAction: MessageFns<HvacClimateKeeperAction> = {
  encode(message: HvacClimateKeeperAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ClimateKeeperAction !== 0) {
      writer.uint32(8).int32(message.ClimateKeeperAction);
    }
    if (message.manualOverride !== false) {
      writer.uint32(16).bool(message.manualOverride);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HvacClimateKeeperAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHvacClimateKeeperAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ClimateKeeperAction = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.manualOverride = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HvacClimateKeeperAction {
    return {
      ClimateKeeperAction: isSet(object.ClimateKeeperAction)
        ? hvacClimateKeeperAction_ClimateKeeperActionEFromJSON(object.ClimateKeeperAction)
        : 0,
      manualOverride: isSet(object.manualOverride) ? globalThis.Boolean(object.manualOverride) : false,
    };
  },

  toJSON(message: HvacClimateKeeperAction): unknown {
    const obj: any = {};
    if (message.ClimateKeeperAction !== 0) {
      obj.ClimateKeeperAction = hvacClimateKeeperAction_ClimateKeeperActionEToJSON(message.ClimateKeeperAction);
    }
    if (message.manualOverride !== false) {
      obj.manualOverride = message.manualOverride;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HvacClimateKeeperAction>, I>>(base?: I): HvacClimateKeeperAction {
    return HvacClimateKeeperAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HvacClimateKeeperAction>, I>>(object: I): HvacClimateKeeperAction {
    const message = createBaseHvacClimateKeeperAction();
    message.ClimateKeeperAction = object.ClimateKeeperAction ?? 0;
    message.manualOverride = object.manualOverride ?? false;
    return message;
  },
};

function createBaseSetChargingAmpsAction(): SetChargingAmpsAction {
  return { chargingAmps: 0 };
}

export const SetChargingAmpsAction: MessageFns<SetChargingAmpsAction> = {
  encode(message: SetChargingAmpsAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chargingAmps !== 0) {
      writer.uint32(8).int32(message.chargingAmps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetChargingAmpsAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetChargingAmpsAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chargingAmps = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetChargingAmpsAction {
    return { chargingAmps: isSet(object.chargingAmps) ? globalThis.Number(object.chargingAmps) : 0 };
  },

  toJSON(message: SetChargingAmpsAction): unknown {
    const obj: any = {};
    if (message.chargingAmps !== 0) {
      obj.chargingAmps = Math.round(message.chargingAmps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetChargingAmpsAction>, I>>(base?: I): SetChargingAmpsAction {
    return SetChargingAmpsAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetChargingAmpsAction>, I>>(object: I): SetChargingAmpsAction {
    const message = createBaseSetChargingAmpsAction();
    message.chargingAmps = object.chargingAmps ?? 0;
    return message;
  },
};

function createBaseRemoveChargeScheduleAction(): RemoveChargeScheduleAction {
  return { id: 0 };
}

export const RemoveChargeScheduleAction: MessageFns<RemoveChargeScheduleAction> = {
  encode(message: RemoveChargeScheduleAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveChargeScheduleAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveChargeScheduleAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveChargeScheduleAction {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: RemoveChargeScheduleAction): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveChargeScheduleAction>, I>>(base?: I): RemoveChargeScheduleAction {
    return RemoveChargeScheduleAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveChargeScheduleAction>, I>>(object: I): RemoveChargeScheduleAction {
    const message = createBaseRemoveChargeScheduleAction();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseBatchRemoveChargeSchedulesAction(): BatchRemoveChargeSchedulesAction {
  return { home: false, work: false, other: false };
}

export const BatchRemoveChargeSchedulesAction: MessageFns<BatchRemoveChargeSchedulesAction> = {
  encode(message: BatchRemoveChargeSchedulesAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.home !== false) {
      writer.uint32(8).bool(message.home);
    }
    if (message.work !== false) {
      writer.uint32(16).bool(message.work);
    }
    if (message.other !== false) {
      writer.uint32(24).bool(message.other);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchRemoveChargeSchedulesAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchRemoveChargeSchedulesAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.home = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.work = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.other = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchRemoveChargeSchedulesAction {
    return {
      home: isSet(object.home) ? globalThis.Boolean(object.home) : false,
      work: isSet(object.work) ? globalThis.Boolean(object.work) : false,
      other: isSet(object.other) ? globalThis.Boolean(object.other) : false,
    };
  },

  toJSON(message: BatchRemoveChargeSchedulesAction): unknown {
    const obj: any = {};
    if (message.home !== false) {
      obj.home = message.home;
    }
    if (message.work !== false) {
      obj.work = message.work;
    }
    if (message.other !== false) {
      obj.other = message.other;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchRemoveChargeSchedulesAction>, I>>(
    base?: I,
  ): BatchRemoveChargeSchedulesAction {
    return BatchRemoveChargeSchedulesAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchRemoveChargeSchedulesAction>, I>>(
    object: I,
  ): BatchRemoveChargeSchedulesAction {
    const message = createBaseBatchRemoveChargeSchedulesAction();
    message.home = object.home ?? false;
    message.work = object.work ?? false;
    message.other = object.other ?? false;
    return message;
  },
};

function createBaseBatchRemovePreconditionSchedulesAction(): BatchRemovePreconditionSchedulesAction {
  return { home: false, work: false, other: false };
}

export const BatchRemovePreconditionSchedulesAction: MessageFns<BatchRemovePreconditionSchedulesAction> = {
  encode(message: BatchRemovePreconditionSchedulesAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.home !== false) {
      writer.uint32(8).bool(message.home);
    }
    if (message.work !== false) {
      writer.uint32(16).bool(message.work);
    }
    if (message.other !== false) {
      writer.uint32(24).bool(message.other);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchRemovePreconditionSchedulesAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchRemovePreconditionSchedulesAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.home = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.work = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.other = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchRemovePreconditionSchedulesAction {
    return {
      home: isSet(object.home) ? globalThis.Boolean(object.home) : false,
      work: isSet(object.work) ? globalThis.Boolean(object.work) : false,
      other: isSet(object.other) ? globalThis.Boolean(object.other) : false,
    };
  },

  toJSON(message: BatchRemovePreconditionSchedulesAction): unknown {
    const obj: any = {};
    if (message.home !== false) {
      obj.home = message.home;
    }
    if (message.work !== false) {
      obj.work = message.work;
    }
    if (message.other !== false) {
      obj.other = message.other;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchRemovePreconditionSchedulesAction>, I>>(
    base?: I,
  ): BatchRemovePreconditionSchedulesAction {
    return BatchRemovePreconditionSchedulesAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchRemovePreconditionSchedulesAction>, I>>(
    object: I,
  ): BatchRemovePreconditionSchedulesAction {
    const message = createBaseBatchRemovePreconditionSchedulesAction();
    message.home = object.home ?? false;
    message.work = object.work ?? false;
    message.other = object.other ?? false;
    return message;
  },
};

function createBaseRemovePreconditionScheduleAction(): RemovePreconditionScheduleAction {
  return { id: 0 };
}

export const RemovePreconditionScheduleAction: MessageFns<RemovePreconditionScheduleAction> = {
  encode(message: RemovePreconditionScheduleAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemovePreconditionScheduleAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePreconditionScheduleAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemovePreconditionScheduleAction {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: RemovePreconditionScheduleAction): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemovePreconditionScheduleAction>, I>>(
    base?: I,
  ): RemovePreconditionScheduleAction {
    return RemovePreconditionScheduleAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemovePreconditionScheduleAction>, I>>(
    object: I,
  ): RemovePreconditionScheduleAction {
    const message = createBaseRemovePreconditionScheduleAction();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseSetCabinOverheatProtectionAction(): SetCabinOverheatProtectionAction {
  return { on: false, fanOnly: false };
}

export const SetCabinOverheatProtectionAction: MessageFns<SetCabinOverheatProtectionAction> = {
  encode(message: SetCabinOverheatProtectionAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    if (message.fanOnly !== false) {
      writer.uint32(16).bool(message.fanOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetCabinOverheatProtectionAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCabinOverheatProtectionAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fanOnly = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCabinOverheatProtectionAction {
    return {
      on: isSet(object.on) ? globalThis.Boolean(object.on) : false,
      fanOnly: isSet(object.fanOnly) ? globalThis.Boolean(object.fanOnly) : false,
    };
  },

  toJSON(message: SetCabinOverheatProtectionAction): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    if (message.fanOnly !== false) {
      obj.fanOnly = message.fanOnly;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCabinOverheatProtectionAction>, I>>(
    base?: I,
  ): SetCabinOverheatProtectionAction {
    return SetCabinOverheatProtectionAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCabinOverheatProtectionAction>, I>>(
    object: I,
  ): SetCabinOverheatProtectionAction {
    const message = createBaseSetCabinOverheatProtectionAction();
    message.on = object.on ?? false;
    message.fanOnly = object.fanOnly ?? false;
    return message;
  },
};

function createBaseSetVehicleNameAction(): SetVehicleNameAction {
  return { vehicleName: "" };
}

export const SetVehicleNameAction: MessageFns<SetVehicleNameAction> = {
  encode(message: SetVehicleNameAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vehicleName !== "") {
      writer.uint32(10).string(message.vehicleName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetVehicleNameAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetVehicleNameAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vehicleName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetVehicleNameAction {
    return { vehicleName: isSet(object.vehicleName) ? globalThis.String(object.vehicleName) : "" };
  },

  toJSON(message: SetVehicleNameAction): unknown {
    const obj: any = {};
    if (message.vehicleName !== "") {
      obj.vehicleName = message.vehicleName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetVehicleNameAction>, I>>(base?: I): SetVehicleNameAction {
    return SetVehicleNameAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetVehicleNameAction>, I>>(object: I): SetVehicleNameAction {
    const message = createBaseSetVehicleNameAction();
    message.vehicleName = object.vehicleName ?? "";
    return message;
  },
};

function createBaseChargePortDoorClose(): ChargePortDoorClose {
  return {};
}

export const ChargePortDoorClose: MessageFns<ChargePortDoorClose> = {
  encode(_: ChargePortDoorClose, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargePortDoorClose {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargePortDoorClose();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ChargePortDoorClose {
    return {};
  },

  toJSON(_: ChargePortDoorClose): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargePortDoorClose>, I>>(base?: I): ChargePortDoorClose {
    return ChargePortDoorClose.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargePortDoorClose>, I>>(_: I): ChargePortDoorClose {
    const message = createBaseChargePortDoorClose();
    return message;
  },
};

function createBaseChargePortDoorOpen(): ChargePortDoorOpen {
  return {};
}

export const ChargePortDoorOpen: MessageFns<ChargePortDoorOpen> = {
  encode(_: ChargePortDoorOpen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargePortDoorOpen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargePortDoorOpen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ChargePortDoorOpen {
    return {};
  },

  toJSON(_: ChargePortDoorOpen): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargePortDoorOpen>, I>>(base?: I): ChargePortDoorOpen {
    return ChargePortDoorOpen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargePortDoorOpen>, I>>(_: I): ChargePortDoorOpen {
    const message = createBaseChargePortDoorOpen();
    return message;
  },
};

function createBaseSetCopTempAction(): SetCopTempAction {
  return { copActivationTemp: 0 };
}

export const SetCopTempAction: MessageFns<SetCopTempAction> = {
  encode(message: SetCopTempAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.copActivationTemp !== 0) {
      writer.uint32(8).int32(message.copActivationTemp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetCopTempAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCopTempAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.copActivationTemp = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCopTempAction {
    return {
      copActivationTemp: isSet(object.copActivationTemp)
        ? climateState_CopActivationTempFromJSON(object.copActivationTemp)
        : 0,
    };
  },

  toJSON(message: SetCopTempAction): unknown {
    const obj: any = {};
    if (message.copActivationTemp !== 0) {
      obj.copActivationTemp = climateState_CopActivationTempToJSON(message.copActivationTemp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCopTempAction>, I>>(base?: I): SetCopTempAction {
    return SetCopTempAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetCopTempAction>, I>>(object: I): SetCopTempAction {
    const message = createBaseSetCopTempAction();
    message.copActivationTemp = object.copActivationTemp ?? 0;
    return message;
  },
};

function createBaseVehicleControlSetPinToDriveAction(): VehicleControlSetPinToDriveAction {
  return { on: false, password: "" };
}

export const VehicleControlSetPinToDriveAction: MessageFns<VehicleControlSetPinToDriveAction> = {
  encode(message: VehicleControlSetPinToDriveAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on !== false) {
      writer.uint32(8).bool(message.on);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlSetPinToDriveAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlSetPinToDriveAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.on = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleControlSetPinToDriveAction {
    return {
      on: isSet(object.on) ? globalThis.Boolean(object.on) : false,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: VehicleControlSetPinToDriveAction): unknown {
    const obj: any = {};
    if (message.on !== false) {
      obj.on = message.on;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlSetPinToDriveAction>, I>>(
    base?: I,
  ): VehicleControlSetPinToDriveAction {
    return VehicleControlSetPinToDriveAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlSetPinToDriveAction>, I>>(
    object: I,
  ): VehicleControlSetPinToDriveAction {
    const message = createBaseVehicleControlSetPinToDriveAction();
    message.on = object.on ?? false;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseVehicleControlResetPinToDriveAction(): VehicleControlResetPinToDriveAction {
  return {};
}

export const VehicleControlResetPinToDriveAction: MessageFns<VehicleControlResetPinToDriveAction> = {
  encode(_: VehicleControlResetPinToDriveAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleControlResetPinToDriveAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleControlResetPinToDriveAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VehicleControlResetPinToDriveAction {
    return {};
  },

  toJSON(_: VehicleControlResetPinToDriveAction): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleControlResetPinToDriveAction>, I>>(
    base?: I,
  ): VehicleControlResetPinToDriveAction {
    return VehicleControlResetPinToDriveAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleControlResetPinToDriveAction>, I>>(
    _: I,
  ): VehicleControlResetPinToDriveAction {
    const message = createBaseVehicleControlResetPinToDriveAction();
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
