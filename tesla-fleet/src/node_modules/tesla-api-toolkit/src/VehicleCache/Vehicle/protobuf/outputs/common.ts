// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.12.4
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "CarServer";

export enum Invalid {
  INVALID = 0,
  UNRECOGNIZED = -1,
}

export function invalidFromJSON(object: any): Invalid {
  switch (object) {
    case 0:
    case "INVALID":
      return Invalid.INVALID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Invalid.UNRECOGNIZED;
  }
}

export function invalidToJSON(object: Invalid): string {
  switch (object) {
    case Invalid.INVALID:
      return "INVALID";
    case Invalid.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Void {
}

export interface LatLong {
  latitude: number;
  longitude: number;
}

export interface PreconditioningTimes {
  allWeek?: Void | undefined;
  weekdays?: Void | undefined;
}

export interface OffPeakChargingTimes {
  allWeek?: Void | undefined;
  weekdays?: Void | undefined;
}

export interface ChargeSchedule {
  /** datetime in epoch time */
  id: number;
  name: string;
  daysOfWeek: number;
  startEnabled: boolean;
  /** 24h in minutes */
  startTime: number;
  endEnabled: boolean;
  /** 24h in minutes */
  endTime: number;
  oneTime: boolean;
  enabled: boolean;
  latitude: number;
  longitude: number;
}

export interface PreconditionSchedule {
  /** datetime in epoch time */
  id: number;
  name: string;
  daysOfWeek: number;
  /** 24h in minutes */
  preconditionTime: number;
  oneTime: boolean;
  enabled: boolean;
  latitude: number;
  longitude: number;
}

function createBaseVoid(): Void {
  return {};
}

export const Void: MessageFns<Void> = {
  encode(_: Void, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Void {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Void {
    return {};
  },

  toJSON(_: Void): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Void>, I>>(base?: I): Void {
    return Void.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Void>, I>>(_: I): Void {
    const message = createBaseVoid();
    return message;
  },
};

function createBaseLatLong(): LatLong {
  return { latitude: 0, longitude: 0 };
}

export const LatLong: MessageFns<LatLong> = {
  encode(message: LatLong, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latitude !== 0) {
      writer.uint32(13).float(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(21).float(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatLong {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatLong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.latitude = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.longitude = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatLong {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
    };
  },

  toJSON(message: LatLong): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatLong>, I>>(base?: I): LatLong {
    return LatLong.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatLong>, I>>(object: I): LatLong {
    const message = createBaseLatLong();
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    return message;
  },
};

function createBasePreconditioningTimes(): PreconditioningTimes {
  return { allWeek: undefined, weekdays: undefined };
}

export const PreconditioningTimes: MessageFns<PreconditioningTimes> = {
  encode(message: PreconditioningTimes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allWeek !== undefined) {
      Void.encode(message.allWeek, writer.uint32(10).fork()).join();
    }
    if (message.weekdays !== undefined) {
      Void.encode(message.weekdays, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreconditioningTimes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreconditioningTimes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allWeek = Void.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weekdays = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreconditioningTimes {
    return {
      allWeek: isSet(object.allWeek) ? Void.fromJSON(object.allWeek) : undefined,
      weekdays: isSet(object.weekdays) ? Void.fromJSON(object.weekdays) : undefined,
    };
  },

  toJSON(message: PreconditioningTimes): unknown {
    const obj: any = {};
    if (message.allWeek !== undefined) {
      obj.allWeek = Void.toJSON(message.allWeek);
    }
    if (message.weekdays !== undefined) {
      obj.weekdays = Void.toJSON(message.weekdays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PreconditioningTimes>, I>>(base?: I): PreconditioningTimes {
    return PreconditioningTimes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PreconditioningTimes>, I>>(object: I): PreconditioningTimes {
    const message = createBasePreconditioningTimes();
    message.allWeek = (object.allWeek !== undefined && object.allWeek !== null)
      ? Void.fromPartial(object.allWeek)
      : undefined;
    message.weekdays = (object.weekdays !== undefined && object.weekdays !== null)
      ? Void.fromPartial(object.weekdays)
      : undefined;
    return message;
  },
};

function createBaseOffPeakChargingTimes(): OffPeakChargingTimes {
  return { allWeek: undefined, weekdays: undefined };
}

export const OffPeakChargingTimes: MessageFns<OffPeakChargingTimes> = {
  encode(message: OffPeakChargingTimes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allWeek !== undefined) {
      Void.encode(message.allWeek, writer.uint32(10).fork()).join();
    }
    if (message.weekdays !== undefined) {
      Void.encode(message.weekdays, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OffPeakChargingTimes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOffPeakChargingTimes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allWeek = Void.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weekdays = Void.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OffPeakChargingTimes {
    return {
      allWeek: isSet(object.allWeek) ? Void.fromJSON(object.allWeek) : undefined,
      weekdays: isSet(object.weekdays) ? Void.fromJSON(object.weekdays) : undefined,
    };
  },

  toJSON(message: OffPeakChargingTimes): unknown {
    const obj: any = {};
    if (message.allWeek !== undefined) {
      obj.allWeek = Void.toJSON(message.allWeek);
    }
    if (message.weekdays !== undefined) {
      obj.weekdays = Void.toJSON(message.weekdays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OffPeakChargingTimes>, I>>(base?: I): OffPeakChargingTimes {
    return OffPeakChargingTimes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OffPeakChargingTimes>, I>>(object: I): OffPeakChargingTimes {
    const message = createBaseOffPeakChargingTimes();
    message.allWeek = (object.allWeek !== undefined && object.allWeek !== null)
      ? Void.fromPartial(object.allWeek)
      : undefined;
    message.weekdays = (object.weekdays !== undefined && object.weekdays !== null)
      ? Void.fromPartial(object.weekdays)
      : undefined;
    return message;
  },
};

function createBaseChargeSchedule(): ChargeSchedule {
  return {
    id: 0,
    name: "",
    daysOfWeek: 0,
    startEnabled: false,
    startTime: 0,
    endEnabled: false,
    endTime: 0,
    oneTime: false,
    enabled: false,
    latitude: 0,
    longitude: 0,
  };
}

export const ChargeSchedule: MessageFns<ChargeSchedule> = {
  encode(message: ChargeSchedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.daysOfWeek !== 0) {
      writer.uint32(24).int32(message.daysOfWeek);
    }
    if (message.startEnabled !== false) {
      writer.uint32(32).bool(message.startEnabled);
    }
    if (message.startTime !== 0) {
      writer.uint32(40).int32(message.startTime);
    }
    if (message.endEnabled !== false) {
      writer.uint32(48).bool(message.endEnabled);
    }
    if (message.endTime !== 0) {
      writer.uint32(56).int32(message.endTime);
    }
    if (message.oneTime !== false) {
      writer.uint32(64).bool(message.oneTime);
    }
    if (message.enabled !== false) {
      writer.uint32(72).bool(message.enabled);
    }
    if (message.latitude !== 0) {
      writer.uint32(85).float(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(93).float(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChargeSchedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChargeSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.daysOfWeek = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startEnabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startTime = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endEnabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.endTime = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.oneTime = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.latitude = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.longitude = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChargeSchedule {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      daysOfWeek: isSet(object.daysOfWeek) ? globalThis.Number(object.daysOfWeek) : 0,
      startEnabled: isSet(object.startEnabled) ? globalThis.Boolean(object.startEnabled) : false,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      endEnabled: isSet(object.endEnabled) ? globalThis.Boolean(object.endEnabled) : false,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
      oneTime: isSet(object.oneTime) ? globalThis.Boolean(object.oneTime) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
    };
  },

  toJSON(message: ChargeSchedule): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.daysOfWeek !== 0) {
      obj.daysOfWeek = Math.round(message.daysOfWeek);
    }
    if (message.startEnabled !== false) {
      obj.startEnabled = message.startEnabled;
    }
    if (message.startTime !== 0) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.endEnabled !== false) {
      obj.endEnabled = message.endEnabled;
    }
    if (message.endTime !== 0) {
      obj.endTime = Math.round(message.endTime);
    }
    if (message.oneTime !== false) {
      obj.oneTime = message.oneTime;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChargeSchedule>, I>>(base?: I): ChargeSchedule {
    return ChargeSchedule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChargeSchedule>, I>>(object: I): ChargeSchedule {
    const message = createBaseChargeSchedule();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.daysOfWeek = object.daysOfWeek ?? 0;
    message.startEnabled = object.startEnabled ?? false;
    message.startTime = object.startTime ?? 0;
    message.endEnabled = object.endEnabled ?? false;
    message.endTime = object.endTime ?? 0;
    message.oneTime = object.oneTime ?? false;
    message.enabled = object.enabled ?? false;
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    return message;
  },
};

function createBasePreconditionSchedule(): PreconditionSchedule {
  return {
    id: 0,
    name: "",
    daysOfWeek: 0,
    preconditionTime: 0,
    oneTime: false,
    enabled: false,
    latitude: 0,
    longitude: 0,
  };
}

export const PreconditionSchedule: MessageFns<PreconditionSchedule> = {
  encode(message: PreconditionSchedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.daysOfWeek !== 0) {
      writer.uint32(24).int32(message.daysOfWeek);
    }
    if (message.preconditionTime !== 0) {
      writer.uint32(32).int32(message.preconditionTime);
    }
    if (message.oneTime !== false) {
      writer.uint32(40).bool(message.oneTime);
    }
    if (message.enabled !== false) {
      writer.uint32(48).bool(message.enabled);
    }
    if (message.latitude !== 0) {
      writer.uint32(61).float(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(69).float(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreconditionSchedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreconditionSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.daysOfWeek = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.preconditionTime = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.oneTime = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.latitude = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.longitude = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreconditionSchedule {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      daysOfWeek: isSet(object.daysOfWeek) ? globalThis.Number(object.daysOfWeek) : 0,
      preconditionTime: isSet(object.preconditionTime) ? globalThis.Number(object.preconditionTime) : 0,
      oneTime: isSet(object.oneTime) ? globalThis.Boolean(object.oneTime) : false,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
    };
  },

  toJSON(message: PreconditionSchedule): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.daysOfWeek !== 0) {
      obj.daysOfWeek = Math.round(message.daysOfWeek);
    }
    if (message.preconditionTime !== 0) {
      obj.preconditionTime = Math.round(message.preconditionTime);
    }
    if (message.oneTime !== false) {
      obj.oneTime = message.oneTime;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PreconditionSchedule>, I>>(base?: I): PreconditionSchedule {
    return PreconditionSchedule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PreconditionSchedule>, I>>(object: I): PreconditionSchedule {
    const message = createBasePreconditionSchedule();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.daysOfWeek = object.daysOfWeek ?? 0;
    message.preconditionTime = object.preconditionTime ?? 0;
    message.oneTime = object.oneTime ?? false;
    message.enabled = object.enabled ?? false;
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
